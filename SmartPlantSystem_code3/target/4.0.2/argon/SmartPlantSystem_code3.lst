
/Users/jamesblack/Documents/IoT/SmartPlantSystem/SmartPlantSystem_code3/target/4.0.2/argon/SmartPlantSystem_code3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009290  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd2b0  000bd2b0  0000d2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000bd2d4  000bd2d4  0000d2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000bd2dc  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005f0  2003de98  000bd2e0  0001de98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000368  2003e488  2003e488  0002e488  2**2
                  ALLOC
  8 .module_info_suffix 00000028  000bd8d0  000bd8d0  0002d8d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bd8f8  000bd8f8  0002d8f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0012a781  00000000  00000000  0002d8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00015bcf  00000000  00000000  0015807d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003aa0a  00000000  00000000  0016dc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002f40  00000000  00000000  001a8656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a390  00000000  00000000  001ab596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00040207  00000000  00000000  001b5926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004ad71  00000000  00000000  001f5b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00138bb5  00000000  00000000  0024089e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000912c  00000000  00000000  00379454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 f87a 	bl	ba12a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 f89c 	bl	ba17a <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003de98 	.word	0x2003de98
   b404c:	000bd2e0 	.word	0x000bd2e0
   b4050:	2003e488 	.word	0x2003e488
   b4054:	2003e488 	.word	0x2003e488
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 fd31 	bl	b7ac8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd28c 	.word	0x000bd28c
   b4080:	000bd2b0 	.word	0x000bd2b0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b830 	b.w	b40e8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f8bd 	bl	b4208 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 bcd1 	b.w	b7a38 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bc21 	b.w	b68dc <malloc>

000b409a <_Znaj>:
   b409a:	f002 bc1f 	b.w	b68dc <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 bc25 	b.w	b68ec <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 fb7a 	bl	b67a4 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b63e5 	.word	0x000b63e5
   b40b8:	000bc0dc 	.word	0x000bc0dc

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40cc:	b40e      	push	{r1, r2, r3}
   b40ce:	b503      	push	{r0, r1, lr}
   b40d0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40d2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40da:	f002 febe 	bl	b6e5a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40de:	b002      	add	sp, #8
   b40e0:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e4:	b003      	add	sp, #12
   b40e6:	4770      	bx	lr

000b40e8 <setup>:
const int soilPin = A0; // analog input pin for the soil moisture sensor
const int dustPin = A3; // analog input pin for dust sensor
const int airPin = A4;  // analog input pin for air quality sensor
const int pumpPin = D11;  // digital output pin to turn on the water pump

void setup() {
   b40e8:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b40ea:	f003 fbdb 	bl	b78a4 <_Z16_fetch_usbserialv>
   b40ee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40f2:	f003 fbcb 	bl	b788c <_ZN9USBSerial5beginEl>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // initialize the OLED display
   b40f6:	223c      	movs	r2, #60	; 0x3c
   b40f8:	2102      	movs	r1, #2
   b40fa:	481e      	ldr	r0, [pc, #120]	; (b4174 <setup+0x8c>)
   b40fc:	f002 f828 	bl	b6150 <_ZN16Adafruit_SSD13065beginEhh>
  display.display(); // turn on the OLED display
   b4100:	481c      	ldr	r0, [pc, #112]	; (b4174 <setup+0x8c>)
   b4102:	f001 ffb5 	bl	b6070 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000); // wait for 2 seconds
   b4106:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b410a:	f002 fc27 	bl	b695c <delay>
  Wire.begin();
   b410e:	f003 fe05 	bl	b7d1c <_Z19__fetch_global_Wirev>
   b4112:	f002 fcb7 	bl	b6a84 <_ZN7TwoWire5beginEv>
  bme.begin(0x76);  // initialize the BME280 sensor
   b4116:	4818      	ldr	r0, [pc, #96]	; (b4178 <setup+0x90>)
   b4118:	2176      	movs	r1, #118	; 0x76
   b411a:	f000 ffe8 	bl	b50ee <_ZN15Adafruit_BME2805beginEh>


  if (sensor.init()) {
   b411e:	4817      	ldr	r0, [pc, #92]	; (b417c <setup+0x94>)
   b4120:	f002 f8f3 	bl	b630a <_ZN16AirQualitySensor4initEv>
   b4124:	b308      	cbz	r0, b416a <setup+0x82>
      Serial.printf("Sensor ready."); // print message to the serial monitor
   b4126:	f003 fbbd 	bl	b78a4 <_Z16_fetch_usbserialv>
   b412a:	4915      	ldr	r1, [pc, #84]	; (b4180 <setup+0x98>)
  } else {
      Serial.printf("Sensor ERROR!");
   b412c:	f7ff ffce 	bl	b40cc <_ZN5Print6printfEPKcz>
  }  

  mqtt.subscribe(&buttonState); // subscribe to the buttonOnOff feed on adafruit.io
   b4130:	4914      	ldr	r1, [pc, #80]	; (b4184 <setup+0x9c>)
   b4132:	4815      	ldr	r0, [pc, #84]	; (b4188 <setup+0xa0>)
   b4134:	f001 f8a0 	bl	b5278 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>


  pinMode(soilPin, INPUT); 
   b4138:	2100      	movs	r1, #0
   b413a:	2013      	movs	r0, #19
   b413c:	f003 fd34 	bl	b7ba8 <pinMode>
  pinMode(pumpPin, OUTPUT);
   b4140:	2101      	movs	r1, #1
   b4142:	200b      	movs	r0, #11
   b4144:	f003 fd30 	bl	b7ba8 <pinMode>
  pinMode(ledPin, OUTPUT);
   b4148:	2101      	movs	r1, #1
   b414a:	2007      	movs	r0, #7
   b414c:	f003 fd2c 	bl	b7ba8 <pinMode>
  pinMode(airPin, INPUT);
   b4150:	2100      	movs	r1, #0
   b4152:	200f      	movs	r0, #15
   b4154:	f003 fd28 	bl	b7ba8 <pinMode>
  pinMode(dustPin, INPUT);
   b4158:	2100      	movs	r1, #0
   b415a:	2010      	movs	r0, #16
   b415c:	f003 fd24 	bl	b7ba8 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4160:	f002 f948 	bl	b63f4 <HAL_Timer_Get_Milli_Seconds>

  dustStartTime = millis();
   b4164:	4b09      	ldr	r3, [pc, #36]	; (b418c <setup+0xa4>)
   b4166:	6018      	str	r0, [r3, #0]
}
   b4168:	bd08      	pop	{r3, pc}
      Serial.printf("Sensor ERROR!");
   b416a:	f003 fb9b 	bl	b78a4 <_Z16_fetch_usbserialv>
   b416e:	4908      	ldr	r1, [pc, #32]	; (b4190 <setup+0xa8>)
   b4170:	e7dc      	b.n	b412c <setup+0x44>
   b4172:	bf00      	nop
   b4174:	2003e538 	.word	0x2003e538
   b4178:	2003e4b4 	.word	0x2003e4b4
   b417c:	2003e67c 	.word	0x2003e67c
   b4180:	000bc0f1 	.word	0x000bc0f1
   b4184:	2003e4f8 	.word	0x2003e4f8
   b4188:	2003e58c 	.word	0x2003e58c
   b418c:	2003e56c 	.word	0x2003e56c
   b4190:	000bc0ff 	.word	0x000bc0ff

000b4194 <_Z12MQTT_connectv>:
    pumpLastTime = millis();
  }

}

void MQTT_connect() {
   b4194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int8_t ret;
 
  if (mqtt.connected()) {
   b4196:	4817      	ldr	r0, [pc, #92]	; (b41f4 <_Z12MQTT_connectv+0x60>)
   b4198:	f001 fac7 	bl	b572a <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   b419c:	bb40      	cbnz	r0, b41f0 <_Z12MQTT_connectv+0x5c>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   b419e:	f003 fb81 	bl	b78a4 <_Z16_fetch_usbserialv>
   b41a2:	4915      	ldr	r1, [pc, #84]	; (b41f8 <_Z12MQTT_connectv+0x64>)
 
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b41a4:	4e13      	ldr	r6, [pc, #76]	; (b41f4 <_Z12MQTT_connectv+0x60>)
       Serial.printf(mqtt.connectErrorString(ret));
       Serial.printf("Retrying MQTT connection in 5 seconds...");
   b41a6:	4f15      	ldr	r7, [pc, #84]	; (b41fc <_Z12MQTT_connectv+0x68>)
  Serial.print("Connecting to MQTT... ");
   b41a8:	f002 fe1c 	bl	b6de4 <_ZN5Print5printEPKc>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b41ac:	4811      	ldr	r0, [pc, #68]	; (b41f4 <_Z12MQTT_connectv+0x60>)
   b41ae:	f001 fa28 	bl	b5602 <_ZN13Adafruit_MQTT7connectEv>
   b41b2:	4604      	mov	r4, r0
   b41b4:	b1b8      	cbz	r0, b41e6 <_Z12MQTT_connectv+0x52>
       Serial.printf(mqtt.connectErrorString(ret));
   b41b6:	f003 fb75 	bl	b78a4 <_Z16_fetch_usbserialv>
   b41ba:	4621      	mov	r1, r4
   b41bc:	4605      	mov	r5, r0
   b41be:	4630      	mov	r0, r6
   b41c0:	f001 f838 	bl	b5234 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   b41c4:	4601      	mov	r1, r0
   b41c6:	4628      	mov	r0, r5
   b41c8:	f7ff ff80 	bl	b40cc <_ZN5Print6printfEPKcz>
       Serial.printf("Retrying MQTT connection in 5 seconds...");
   b41cc:	f003 fb6a 	bl	b78a4 <_Z16_fetch_usbserialv>
   b41d0:	4639      	mov	r1, r7
   b41d2:	f7ff ff7b 	bl	b40cc <_ZN5Print6printfEPKcz>
       mqtt.disconnect();
   b41d6:	4630      	mov	r0, r6
   b41d8:	f001 f83a 	bl	b5250 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  // wait 5 seconds
   b41dc:	f241 3088 	movw	r0, #5000	; 0x1388
   b41e0:	f002 fbbc 	bl	b695c <delay>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b41e4:	e7e2      	b.n	b41ac <_Z12MQTT_connectv+0x18>
  }
  Serial.printf("MQTT Connected!");
   b41e6:	f003 fb5d 	bl	b78a4 <_Z16_fetch_usbserialv>
   b41ea:	4905      	ldr	r1, [pc, #20]	; (b4200 <_Z12MQTT_connectv+0x6c>)
   b41ec:	f7ff ff6e 	bl	b40cc <_ZN5Print6printfEPKcz>
   b41f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b41f2:	bf00      	nop
   b41f4:	2003e58c 	.word	0x2003e58c
   b41f8:	000bc10d 	.word	0x000bc10d
   b41fc:	000bc124 	.word	0x000bc124
   b4200:	000bc14d 	.word	0x000bc14d
   b4204:	00000000 	.word	0x00000000

000b4208 <loop>:
void loop() {
   b4208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b420c:	ed2d 8b02 	vpush	{d8}
  duration = pulseIn(dustPin, LOW);
   b4210:	2100      	movs	r1, #0
void loop() {
   b4212:	b08d      	sub	sp, #52	; 0x34
  duration = pulseIn(dustPin, LOW);
   b4214:	2010      	movs	r0, #16
   b4216:	f003 fd63 	bl	b7ce0 <pulseIn>
  lowPulseOccupancy = lowPulseOccupancy + duration;
   b421a:	4cbd      	ldr	r4, [pc, #756]	; (b4510 <loop+0x308>)
  duration = pulseIn(dustPin, LOW);
   b421c:	4bbd      	ldr	r3, [pc, #756]	; (b4514 <loop+0x30c>)
  lowPulseOccupancy = lowPulseOccupancy + duration;
   b421e:	ed94 7a00 	vldr	s14, [r4]
  if ((millis()-dustStartTime) >= 30000){
   b4222:	f8df a360 	ldr.w	sl, [pc, #864]	; b4584 <loop+0x37c>
  duration = pulseIn(dustPin, LOW);
   b4226:	6018      	str	r0, [r3, #0]
  lowPulseOccupancy = lowPulseOccupancy + duration;
   b4228:	ee07 0a90 	vmov	s15, r0
   b422c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b4230:	4db9      	ldr	r5, [pc, #740]	; (b4518 <loop+0x310>)
   b4232:	ee77 7a87 	vadd.f32	s15, s15, s14
   b4236:	edc4 7a00 	vstr	s15, [r4]
   b423a:	f002 f8db 	bl	b63f4 <HAL_Timer_Get_Milli_Seconds>
  if ((millis()-dustStartTime) >= 30000){
   b423e:	f8da 3000 	ldr.w	r3, [sl]
   b4242:	1ac0      	subs	r0, r0, r3
   b4244:	f247 532f 	movw	r3, #29999	; 0x752f
   b4248:	4298      	cmp	r0, r3
   b424a:	d96d      	bls.n	b4328 <loop+0x120>
    ratio = lowPulseOccupancy/(30000*10.0);
   b424c:	edd4 6a00 	vldr	s13, [r4]
   b4250:	ed9f 7ab2 	vldr	s14, [pc, #712]	; b451c <loop+0x314>
   b4254:	f8df 8330 	ldr.w	r8, [pc, #816]	; b4588 <loop+0x380>
   b4258:	eec6 7a87 	vdiv.f32	s15, s13, s14
   b425c:	edc8 7a00 	vstr	s15, [r8]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4260:	ee17 0a90 	vmov	r0, s15
   b4264:	f005 f8be 	bl	b93e4 <__aeabi_f2d>
   b4268:	ed9f 1b9f 	vldr	d1, [pc, #636]	; b44e8 <loop+0x2e0>
   b426c:	ec41 0b10 	vmov	d0, r0, r1
   b4270:	f003 fece 	bl	b8010 <pow>
    concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62;
   b4274:	ed98 8a00 	vldr	s16, [r8]
   b4278:	ee18 0a10 	vmov	r0, s16
   b427c:	ec57 6b10 	vmov	r6, r7, d0
   b4280:	f005 f8b0 	bl	b93e4 <__aeabi_f2d>
   b4284:	a39a      	add	r3, pc, #616	; (adr r3, b44f0 <loop+0x2e8>)
   b4286:	e9d3 2300 	ldrd	r2, r3, [r3]
   b428a:	4680      	mov	r8, r0
   b428c:	4689      	mov	r9, r1
   b428e:	4630      	mov	r0, r6
   b4290:	4639      	mov	r1, r7
   b4292:	f005 f8ff 	bl	b9494 <__aeabi_dmul>
   b4296:	4642      	mov	r2, r8
   b4298:	4606      	mov	r6, r0
   b429a:	460f      	mov	r7, r1
   b429c:	464b      	mov	r3, r9
   b429e:	4640      	mov	r0, r8
   b42a0:	4649      	mov	r1, r9
   b42a2:	f005 f8f7 	bl	b9494 <__aeabi_dmul>
   b42a6:	a394      	add	r3, pc, #592	; (adr r3, b44f8 <loop+0x2f0>)
   b42a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b42ac:	f005 f8f2 	bl	b9494 <__aeabi_dmul>
   b42b0:	4602      	mov	r2, r0
   b42b2:	460b      	mov	r3, r1
   b42b4:	4630      	mov	r0, r6
   b42b6:	4639      	mov	r1, r7
   b42b8:	f004 ff34 	bl	b9124 <__aeabi_dsub>
   b42bc:	eddf 7a98 	vldr	s15, [pc, #608]	; b4520 <loop+0x318>
   b42c0:	ee68 7a27 	vmul.f32	s15, s16, s15
   b42c4:	4606      	mov	r6, r0
   b42c6:	ee17 0a90 	vmov	r0, s15
   b42ca:	460f      	mov	r7, r1
   b42cc:	f005 f88a 	bl	b93e4 <__aeabi_f2d>
   b42d0:	4602      	mov	r2, r0
   b42d2:	460b      	mov	r3, r1
   b42d4:	4630      	mov	r0, r6
   b42d6:	4639      	mov	r1, r7
   b42d8:	f004 ff26 	bl	b9128 <__adddf3>
   b42dc:	a388      	add	r3, pc, #544	; (adr r3, b4500 <loop+0x2f8>)
   b42de:	e9d3 2300 	ldrd	r2, r3, [r3]
   b42e2:	f004 ff21 	bl	b9128 <__adddf3>
   b42e6:	f005 fbcd 	bl	b9a84 <__aeabi_d2f>
   b42ea:	ee07 0a90 	vmov	s15, r0
    if(concentration > 1){
   b42ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   b42f2:	eef4 7ac7 	vcmpe.f32	s15, s14
    concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62;
   b42f6:	4b8b      	ldr	r3, [pc, #556]	; (b4524 <loop+0x31c>)
    if(concentration > 1){
   b42f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      realConcentration = concentration;
   b42fc:	bfc8      	it	gt
   b42fe:	edc5 7a00 	vstrgt	s15, [r5]
    concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62;
   b4302:	6018      	str	r0, [r3, #0]
    Serial.printf("Concentration = %f pcs/0.01cf",realConcentration);
   b4304:	f003 face 	bl	b78a4 <_Z16_fetch_usbserialv>
   b4308:	4606      	mov	r6, r0
   b430a:	6828      	ldr	r0, [r5, #0]
   b430c:	f005 f86a 	bl	b93e4 <__aeabi_f2d>
   b4310:	4602      	mov	r2, r0
   b4312:	460b      	mov	r3, r1
   b4314:	4630      	mov	r0, r6
   b4316:	4984      	ldr	r1, [pc, #528]	; (b4528 <loop+0x320>)
   b4318:	f7ff fed8 	bl	b40cc <_ZN5Print6printfEPKcz>
    lowPulseOccupancy = 0;
   b431c:	2300      	movs	r3, #0
   b431e:	6023      	str	r3, [r4, #0]
   b4320:	f002 f868 	bl	b63f4 <HAL_Timer_Get_Milli_Seconds>
    dustStartTime = millis();
   b4324:	f8ca 0000 	str.w	r0, [sl]
  int slopeQuality = sensor.slope();
   b4328:	4880      	ldr	r0, [pc, #512]	; (b452c <loop+0x324>)
   b432a:	f002 f81d 	bl	b6368 <_ZN16AirQualitySensor5slopeEv>
  if (slopeQuality == AirQualitySensor::FORCE_SIGNAL) {
   b432e:	4b80      	ldr	r3, [pc, #512]	; (b4530 <loop+0x328>)
   b4330:	681b      	ldr	r3, [r3, #0]
   b4332:	4283      	cmp	r3, r0
   b4334:	f040 80b6 	bne.w	b44a4 <loop+0x29c>
  Serial.printf("High pollution! Force signal active.");
   b4338:	f003 fab4 	bl	b78a4 <_Z16_fetch_usbserialv>
   b433c:	497d      	ldr	r1, [pc, #500]	; (b4534 <loop+0x32c>)
    Serial.printf("Fresh air.");
   b433e:	f7ff fec5 	bl	b40cc <_ZN5Print6printfEPKcz>
  display.clearDisplay();
   b4342:	487d      	ldr	r0, [pc, #500]	; (b4538 <loop+0x330>)
  temp = ((bme.readTemperature()*9/5)+32);
   b4344:	4f7d      	ldr	r7, [pc, #500]	; (b453c <loop+0x334>)
  pressure = ((bme.readPressure()/100)*0.03);
   b4346:	f8df 8244 	ldr.w	r8, [pc, #580]	; b458c <loop+0x384>
  humidity = bme.readHumidity();
   b434a:	f8df 9244 	ldr.w	r9, [pc, #580]	; b4590 <loop+0x388>
  airQuality = sensor.getValue();
   b434e:	f8df a244 	ldr.w	sl, [pc, #580]	; b4594 <loop+0x38c>
  display.printf("Soil: %i\nTemp: %.2f%c\nPressure: %.2f\nHumidity: %.2f%c\nAir Quality: %i\nDust: %.2f\n",capRead,temp,(char)247,pressure,humidity,(char)37,airQuality,realConcentration);
   b4352:	4e7b      	ldr	r6, [pc, #492]	; (b4540 <loop+0x338>)
  display.clearDisplay();
   b4354:	f001 fe30 	bl	b5fb8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setRotation(2);
   b4358:	4877      	ldr	r0, [pc, #476]	; (b4538 <loop+0x330>)
   b435a:	2102      	movs	r1, #2
   b435c:	f001 fc3f 	bl	b5bde <_ZN12Adafruit_GFX11setRotationEh>
  display.setTextSize(1);
   b4360:	4875      	ldr	r0, [pc, #468]	; (b4538 <loop+0x330>)
   b4362:	2101      	movs	r1, #1
   b4364:	f001 fc31 	bl	b5bca <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   b4368:	4873      	ldr	r0, [pc, #460]	; (b4538 <loop+0x330>)
   b436a:	2101      	movs	r1, #1
   b436c:	f001 fc32 	bl	b5bd4 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   b4370:	2200      	movs	r2, #0
   b4372:	4611      	mov	r1, r2
   b4374:	4870      	ldr	r0, [pc, #448]	; (b4538 <loop+0x330>)
   b4376:	f001 fc25 	bl	b5bc4 <_ZN12Adafruit_GFX9setCursorEss>
  temp = ((bme.readTemperature()*9/5)+32);
   b437a:	4872      	ldr	r0, [pc, #456]	; (b4544 <loop+0x33c>)
   b437c:	f000 fd14 	bl	b4da8 <_ZN15Adafruit_BME28015readTemperatureEv>
   b4380:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   b4384:	ee20 0a27 	vmul.f32	s0, s0, s15
   b4388:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
   b438c:	eec0 7a07 	vdiv.f32	s15, s0, s14
  pressure = ((bme.readPressure()/100)*0.03);
   b4390:	486c      	ldr	r0, [pc, #432]	; (b4544 <loop+0x33c>)
  temp = ((bme.readTemperature()*9/5)+32);
   b4392:	ed9f 7a6d 	vldr	s14, [pc, #436]	; b4548 <loop+0x340>
   b4396:	ee77 7a87 	vadd.f32	s15, s15, s14
   b439a:	edc7 7a00 	vstr	s15, [r7]
  pressure = ((bme.readPressure()/100)*0.03);
   b439e:	f000 fd7d 	bl	b4e9c <_ZN15Adafruit_BME28012readPressureEv>
   b43a2:	eddf 7a6a 	vldr	s15, [pc, #424]	; b454c <loop+0x344>
   b43a6:	eec0 7a27 	vdiv.f32	s15, s0, s15
   b43aa:	ee17 0a90 	vmov	r0, s15
   b43ae:	f005 f819 	bl	b93e4 <__aeabi_f2d>
   b43b2:	a355      	add	r3, pc, #340	; (adr r3, b4508 <loop+0x300>)
   b43b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b43b8:	f005 f86c 	bl	b9494 <__aeabi_dmul>
   b43bc:	f005 fb62 	bl	b9a84 <__aeabi_d2f>
   b43c0:	f8c8 0000 	str.w	r0, [r8]
  humidity = bme.readHumidity();
   b43c4:	485f      	ldr	r0, [pc, #380]	; (b4544 <loop+0x33c>)
   b43c6:	f000 fd1f 	bl	b4e08 <_ZN15Adafruit_BME28012readHumidityEv>
  airQuality = sensor.getValue();
   b43ca:	4858      	ldr	r0, [pc, #352]	; (b452c <loop+0x324>)
  humidity = bme.readHumidity();
   b43cc:	ed89 0a00 	vstr	s0, [r9]
  airQuality = sensor.getValue();
   b43d0:	f001 ffb0 	bl	b6334 <_ZN16AirQualitySensor8getValueEv>
   b43d4:	4604      	mov	r4, r0
   b43d6:	f8ca 0000 	str.w	r0, [sl]
  display.printf("Soil: %i\nTemp: %.2f%c\nPressure: %.2f\nHumidity: %.2f%c\nAir Quality: %i\nDust: %.2f\n",capRead,temp,(char)247,pressure,humidity,(char)37,airQuality,realConcentration);
   b43da:	6828      	ldr	r0, [r5, #0]
   b43dc:	f005 f802 	bl	b93e4 <__aeabi_f2d>
   b43e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b43e4:	2325      	movs	r3, #37	; 0x25
   b43e6:	9308      	str	r3, [sp, #32]
   b43e8:	9409      	str	r4, [sp, #36]	; 0x24
   b43ea:	f8d9 0000 	ldr.w	r0, [r9]
  if ((millis()-last)>5000) {
   b43ee:	4c58      	ldr	r4, [pc, #352]	; (b4550 <loop+0x348>)
  display.printf("Soil: %i\nTemp: %.2f%c\nPressure: %.2f\nHumidity: %.2f%c\nAir Quality: %i\nDust: %.2f\n",capRead,temp,(char)247,pressure,humidity,(char)37,airQuality,realConcentration);
   b43f0:	f004 fff8 	bl	b93e4 <__aeabi_f2d>
   b43f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b43f8:	f8d8 0000 	ldr.w	r0, [r8]
   b43fc:	f004 fff2 	bl	b93e4 <__aeabi_f2d>
   b4400:	23f7      	movs	r3, #247	; 0xf7
   b4402:	9302      	str	r3, [sp, #8]
   b4404:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4408:	6838      	ldr	r0, [r7, #0]
   b440a:	f004 ffeb 	bl	b93e4 <__aeabi_f2d>
   b440e:	e9cd 0100 	strd	r0, r1, [sp]
   b4412:	4950      	ldr	r1, [pc, #320]	; (b4554 <loop+0x34c>)
   b4414:	6832      	ldr	r2, [r6, #0]
   b4416:	4848      	ldr	r0, [pc, #288]	; (b4538 <loop+0x330>)
   b4418:	f7ff fe58 	bl	b40cc <_ZN5Print6printfEPKcz>
  display.display();
   b441c:	4846      	ldr	r0, [pc, #280]	; (b4538 <loop+0x330>)
   b441e:	f001 fe27 	bl	b6070 <_ZN16Adafruit_SSD13067displayEv>
  MQTT_connect();
   b4422:	f7ff feb7 	bl	b4194 <_Z12MQTT_connectv>
   b4426:	f001 ffe5 	bl	b63f4 <HAL_Timer_Get_Milli_Seconds>
  if ((millis()-last)>5000) {
   b442a:	6823      	ldr	r3, [r4, #0]
   b442c:	1ac0      	subs	r0, r0, r3
   b442e:	f241 3388 	movw	r3, #5000	; 0x1388
   b4432:	4298      	cmp	r0, r3
   b4434:	d914      	bls.n	b4460 <loop+0x258>
      Serial.printf("Pinging MQTT \n");
   b4436:	f003 fa35 	bl	b78a4 <_Z16_fetch_usbserialv>
   b443a:	4947      	ldr	r1, [pc, #284]	; (b4558 <loop+0x350>)
   b443c:	f7ff fe46 	bl	b40cc <_ZN5Print6printfEPKcz>
      if(! mqtt.ping()) {
   b4440:	4846      	ldr	r0, [pc, #280]	; (b455c <loop+0x354>)
   b4442:	2101      	movs	r1, #1
   b4444:	f000 ffad 	bl	b53a2 <_ZN13Adafruit_MQTT4pingEh>
   b4448:	b938      	cbnz	r0, b445a <loop+0x252>
        Serial.printf("Disconnecting \n");
   b444a:	f003 fa2b 	bl	b78a4 <_Z16_fetch_usbserialv>
   b444e:	4944      	ldr	r1, [pc, #272]	; (b4560 <loop+0x358>)
   b4450:	f7ff fe3c 	bl	b40cc <_ZN5Print6printfEPKcz>
        mqtt.disconnect();
   b4454:	4841      	ldr	r0, [pc, #260]	; (b455c <loop+0x354>)
   b4456:	f000 fefb 	bl	b5250 <_ZN13Adafruit_MQTT10disconnectEv>
   b445a:	f001 ffcb 	bl	b63f4 <HAL_Timer_Get_Milli_Seconds>
      last = millis();
   b445e:	6020      	str	r0, [r4, #0]
  while ((subscription = mqtt.readSubscription(10000))) {
   b4460:	f8df b0f8 	ldr.w	fp, [pc, #248]	; b455c <loop+0x354>
    if (subscription == &buttonState) {
   b4464:	4d3f      	ldr	r5, [pc, #252]	; (b4564 <loop+0x35c>)
  while ((subscription = mqtt.readSubscription(10000))) {
   b4466:	f242 7110 	movw	r1, #10000	; 0x2710
   b446a:	4658      	mov	r0, fp
   b446c:	f000 ff1f 	bl	b52ae <_ZN13Adafruit_MQTT16readSubscriptionEs>
   b4470:	2800      	cmp	r0, #0
   b4472:	f000 8091 	beq.w	b4598 <loop+0x390>
    if (subscription == &buttonState) {
   b4476:	42a8      	cmp	r0, r5
   b4478:	d1f5      	bne.n	b4466 <loop+0x25e>
      value = atof((char *)buttonState.lastread);
   b447a:	1d68      	adds	r0, r5, #5
   b447c:	f005 fe3e 	bl	ba0fc <atof>
   b4480:	ec51 0b10 	vmov	r0, r1, d0
   b4484:	f005 fab6 	bl	b99f4 <__aeabi_d2iz>
   b4488:	4b37      	ldr	r3, [pc, #220]	; (b4568 <loop+0x360>)
      if(value == 1){
   b448a:	2801      	cmp	r0, #1
      value = atof((char *)buttonState.lastread);
   b448c:	4604      	mov	r4, r0
   b448e:	6018      	str	r0, [r3, #0]
      if(value == 1){
   b4490:	d121      	bne.n	b44d6 <loop+0x2ce>
      digitalWrite(ledPin, HIGH);
   b4492:	4601      	mov	r1, r0
   b4494:	2007      	movs	r0, #7
   b4496:	f003 fb98 	bl	b7bca <digitalWrite>
      digitalWrite(pumpPin, HIGH);
   b449a:	4621      	mov	r1, r4
      digitalWrite(pumpPin, LOW);
   b449c:	200b      	movs	r0, #11
   b449e:	f003 fb94 	bl	b7bca <digitalWrite>
   b44a2:	e7e0      	b.n	b4466 <loop+0x25e>
  else if (slopeQuality == AirQualitySensor::HIGH_POLLUTION) {
   b44a4:	4b31      	ldr	r3, [pc, #196]	; (b456c <loop+0x364>)
   b44a6:	681b      	ldr	r3, [r3, #0]
   b44a8:	4283      	cmp	r3, r0
   b44aa:	d103      	bne.n	b44b4 <loop+0x2ac>
    Serial.printf("High pollution!");
   b44ac:	f003 f9fa 	bl	b78a4 <_Z16_fetch_usbserialv>
   b44b0:	492f      	ldr	r1, [pc, #188]	; (b4570 <loop+0x368>)
   b44b2:	e744      	b.n	b433e <loop+0x136>
  else if (slopeQuality == AirQualitySensor::LOW_POLLUTION) {
   b44b4:	4b2f      	ldr	r3, [pc, #188]	; (b4574 <loop+0x36c>)
   b44b6:	681b      	ldr	r3, [r3, #0]
   b44b8:	4283      	cmp	r3, r0
   b44ba:	d103      	bne.n	b44c4 <loop+0x2bc>
    Serial.printf("Low pollution!");
   b44bc:	f003 f9f2 	bl	b78a4 <_Z16_fetch_usbserialv>
   b44c0:	492d      	ldr	r1, [pc, #180]	; (b4578 <loop+0x370>)
   b44c2:	e73c      	b.n	b433e <loop+0x136>
  else if (slopeQuality == AirQualitySensor::FRESH_AIR) {
   b44c4:	4b2d      	ldr	r3, [pc, #180]	; (b457c <loop+0x374>)
   b44c6:	681b      	ldr	r3, [r3, #0]
   b44c8:	4283      	cmp	r3, r0
   b44ca:	f47f af3a 	bne.w	b4342 <loop+0x13a>
    Serial.printf("Fresh air.");
   b44ce:	f003 f9e9 	bl	b78a4 <_Z16_fetch_usbserialv>
   b44d2:	492b      	ldr	r1, [pc, #172]	; (b4580 <loop+0x378>)
   b44d4:	e733      	b.n	b433e <loop+0x136>
      digitalWrite(ledPin, LOW);
   b44d6:	2100      	movs	r1, #0
   b44d8:	2007      	movs	r0, #7
   b44da:	f003 fb76 	bl	b7bca <digitalWrite>
      digitalWrite(pumpPin, LOW);
   b44de:	2100      	movs	r1, #0
   b44e0:	e7dc      	b.n	b449c <loop+0x294>
   b44e2:	bf00      	nop
   b44e4:	f3af 8000 	nop.w
   b44e8:	00000000 	.word	0x00000000
   b44ec:	40080000 	.word	0x40080000
   b44f0:	9999999a 	.word	0x9999999a
   b44f4:	3ff19999 	.word	0x3ff19999
   b44f8:	66666666 	.word	0x66666666
   b44fc:	400e6666 	.word	0x400e6666
   b4500:	3d70a3d7 	.word	0x3d70a3d7
   b4504:	3fe3d70a 	.word	0x3fe3d70a
   b4508:	eb851eb8 	.word	0xeb851eb8
   b450c:	3f9eb851 	.word	0x3f9eb851
   b4510:	2003e588 	.word	0x2003e588
   b4514:	2003e55c 	.word	0x2003e55c
   b4518:	2003e678 	.word	0x2003e678
   b451c:	48927c00 	.word	0x48927c00
   b4520:	44020000 	.word	0x44020000
   b4524:	2003e534 	.word	0x2003e534
   b4528:	000bc15d 	.word	0x000bc15d
   b452c:	2003e67c 	.word	0x2003e67c
   b4530:	000bcbb8 	.word	0x000bcbb8
   b4534:	000bc17b 	.word	0x000bc17b
   b4538:	2003e538 	.word	0x2003e538
   b453c:	2003e6a4 	.word	0x2003e6a4
   b4540:	2003e530 	.word	0x2003e530
   b4544:	2003e4b4 	.word	0x2003e4b4
   b4548:	42000000 	.word	0x42000000
   b454c:	42c80000 	.word	0x42c80000
   b4550:	2003e580 	.word	0x2003e580
   b4554:	000bc1ca 	.word	0x000bc1ca
   b4558:	000bc21c 	.word	0x000bc21c
   b455c:	2003e58c 	.word	0x2003e58c
   b4560:	000bc22b 	.word	0x000bc22b
   b4564:	2003e4f8 	.word	0x2003e4f8
   b4568:	2003e6b4 	.word	0x2003e6b4
   b456c:	000bcbc0 	.word	0x000bcbc0
   b4570:	000bc1a0 	.word	0x000bc1a0
   b4574:	000bcbbc 	.word	0x000bcbbc
   b4578:	000bc1b0 	.word	0x000bc1b0
   b457c:	000bcbc4 	.word	0x000bcbc4
   b4580:	000bc1bf 	.word	0x000bc1bf
   b4584:	2003e56c 	.word	0x2003e56c
   b4588:	2003e674 	.word	0x2003e674
   b458c:	2003e660 	.word	0x2003e660
   b4590:	2003e570 	.word	0x2003e570
   b4594:	2003e4a4 	.word	0x2003e4a4
   b4598:	f001 ff2c 	bl	b63f4 <HAL_Timer_Get_Milli_Seconds>
  if((millis()-lastTime > 30000)) {
   b459c:	4b4d      	ldr	r3, [pc, #308]	; (b46d4 <loop+0x4cc>)
   b459e:	681b      	ldr	r3, [r3, #0]
   b45a0:	1ac0      	subs	r0, r0, r3
   b45a2:	f247 5330 	movw	r3, #30000	; 0x7530
   b45a6:	4298      	cmp	r0, r3
   b45a8:	d961      	bls.n	b466e <loop+0x466>
    if(mqtt.Update()) {
   b45aa:	484b      	ldr	r0, [pc, #300]	; (b46d8 <loop+0x4d0>)
   b45ac:	f001 f943 	bl	b5836 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   b45b0:	2800      	cmp	r0, #0
   b45b2:	d058      	beq.n	b4666 <loop+0x45e>
      analogWrite(pumpPin, HIGH);
   b45b4:	2101      	movs	r1, #1
   b45b6:	200b      	movs	r0, #11
   b45b8:	f003 fb4a 	bl	b7c50 <_Z11analogWritetm>
      capRead = analogRead(soilPin);
   b45bc:	2013      	movs	r0, #19
   b45be:	f003 fb30 	bl	b7c22 <analogRead>
   b45c2:	4601      	mov	r1, r0
   b45c4:	6030      	str	r0, [r6, #0]
      soilRead.publish(capRead);
   b45c6:	4845      	ldr	r0, [pc, #276]	; (b46dc <loop+0x4d4>)
      dustRead.publish(concentration);
   b45c8:	4d45      	ldr	r5, [pc, #276]	; (b46e0 <loop+0x4d8>)
      soilRead.publish(capRead);
   b45ca:	f001 f876 	bl	b56ba <_ZN21Adafruit_MQTT_Publish7publishEi>
      tempRead.publish(temp);
   b45ce:	6838      	ldr	r0, [r7, #0]
   b45d0:	f004 ff08 	bl	b93e4 <__aeabi_f2d>
   b45d4:	ec41 0b10 	vmov	d0, r0, r1
   b45d8:	2102      	movs	r1, #2
   b45da:	4842      	ldr	r0, [pc, #264]	; (b46e4 <loop+0x4dc>)
   b45dc:	f001 f87c 	bl	b56d8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      pressureRead.publish(pressure);
   b45e0:	f8d8 0000 	ldr.w	r0, [r8]
   b45e4:	f004 fefe 	bl	b93e4 <__aeabi_f2d>
   b45e8:	ec41 0b10 	vmov	d0, r0, r1
   b45ec:	2102      	movs	r1, #2
   b45ee:	483e      	ldr	r0, [pc, #248]	; (b46e8 <loop+0x4e0>)
   b45f0:	f001 f872 	bl	b56d8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      humidityRead.publish(humidity);
   b45f4:	f8d9 0000 	ldr.w	r0, [r9]
   b45f8:	f004 fef4 	bl	b93e4 <__aeabi_f2d>
   b45fc:	ec41 0b10 	vmov	d0, r0, r1
   b4600:	2102      	movs	r1, #2
   b4602:	483a      	ldr	r0, [pc, #232]	; (b46ec <loop+0x4e4>)
   b4604:	f001 f868 	bl	b56d8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      airRead.publish(airQuality);
   b4608:	f8da 1000 	ldr.w	r1, [sl]
   b460c:	4838      	ldr	r0, [pc, #224]	; (b46f0 <loop+0x4e8>)
   b460e:	f001 f854 	bl	b56ba <_ZN21Adafruit_MQTT_Publish7publishEi>
      dustRead.publish(concentration);
   b4612:	6828      	ldr	r0, [r5, #0]
   b4614:	f004 fee6 	bl	b93e4 <__aeabi_f2d>
   b4618:	ec41 0b10 	vmov	d0, r0, r1
   b461c:	2102      	movs	r1, #2
   b461e:	4835      	ldr	r0, [pc, #212]	; (b46f4 <loop+0x4ec>)
   b4620:	f001 f85a 	bl	b56d8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      Serial.printf("Soil Read: %i Temp: %f Pressure: %f Humidity %f Air Quality: %i Dust: %f\n",capRead,temp,pressure,humidity, airQuality, concentration); 
   b4624:	f003 f93e 	bl	b78a4 <_Z16_fetch_usbserialv>
   b4628:	4604      	mov	r4, r0
   b462a:	6828      	ldr	r0, [r5, #0]
   b462c:	f004 feda 	bl	b93e4 <__aeabi_f2d>
   b4630:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b4634:	f8da 3000 	ldr.w	r3, [sl]
   b4638:	9306      	str	r3, [sp, #24]
   b463a:	f8d9 0000 	ldr.w	r0, [r9]
   b463e:	f004 fed1 	bl	b93e4 <__aeabi_f2d>
   b4642:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4646:	f8d8 0000 	ldr.w	r0, [r8]
   b464a:	f004 fecb 	bl	b93e4 <__aeabi_f2d>
   b464e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4652:	6838      	ldr	r0, [r7, #0]
   b4654:	f004 fec6 	bl	b93e4 <__aeabi_f2d>
   b4658:	e9cd 0100 	strd	r0, r1, [sp]
   b465c:	4926      	ldr	r1, [pc, #152]	; (b46f8 <loop+0x4f0>)
   b465e:	6832      	ldr	r2, [r6, #0]
   b4660:	4620      	mov	r0, r4
   b4662:	f7ff fd33 	bl	b40cc <_ZN5Print6printfEPKcz>
   b4666:	f001 fec5 	bl	b63f4 <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis();
   b466a:	4b1a      	ldr	r3, [pc, #104]	; (b46d4 <loop+0x4cc>)
   b466c:	6018      	str	r0, [r3, #0]
  if((millis()-pumpLastTime > 60000)) { //now we are watering plant automatic
   b466e:	4c23      	ldr	r4, [pc, #140]	; (b46fc <loop+0x4f4>)
   b4670:	f001 fec0 	bl	b63f4 <HAL_Timer_Get_Milli_Seconds>
   b4674:	6823      	ldr	r3, [r4, #0]
   b4676:	1ac0      	subs	r0, r0, r3
   b4678:	f64e 2360 	movw	r3, #60000	; 0xea60
   b467c:	4298      	cmp	r0, r3
   b467e:	d924      	bls.n	b46ca <loop+0x4c2>
    if(capRead > 1600){
   b4680:	6833      	ldr	r3, [r6, #0]
   b4682:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
   b4686:	dd1d      	ble.n	b46c4 <loop+0x4bc>
    digitalWrite(pumpPin, HIGH);
   b4688:	2101      	movs	r1, #1
   b468a:	200b      	movs	r0, #11
   b468c:	f003 fa9d 	bl	b7bca <digitalWrite>
    digitalWrite(ledPin, HIGH);
   b4690:	2101      	movs	r1, #1
   b4692:	2007      	movs	r0, #7
   b4694:	f003 fa99 	bl	b7bca <digitalWrite>
    Serial.printf("Watering plant\n");
   b4698:	f003 f904 	bl	b78a4 <_Z16_fetch_usbserialv>
   b469c:	4918      	ldr	r1, [pc, #96]	; (b4700 <loop+0x4f8>)
   b469e:	f7ff fd15 	bl	b40cc <_ZN5Print6printfEPKcz>
    delay(1000);
   b46a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b46a6:	f002 f959 	bl	b695c <delay>
    digitalWrite(pumpPin, LOW);
   b46aa:	2100      	movs	r1, #0
   b46ac:	200b      	movs	r0, #11
   b46ae:	f003 fa8c 	bl	b7bca <digitalWrite>
    digitalWrite(ledPin, LOW);
   b46b2:	2100      	movs	r1, #0
   b46b4:	2007      	movs	r0, #7
   b46b6:	f003 fa88 	bl	b7bca <digitalWrite>
    Serial.printf("Stop Watering plant\n");
   b46ba:	f003 f8f3 	bl	b78a4 <_Z16_fetch_usbserialv>
   b46be:	4911      	ldr	r1, [pc, #68]	; (b4704 <loop+0x4fc>)
   b46c0:	f7ff fd04 	bl	b40cc <_ZN5Print6printfEPKcz>
   b46c4:	f001 fe96 	bl	b63f4 <HAL_Timer_Get_Milli_Seconds>
    pumpLastTime = millis();
   b46c8:	6020      	str	r0, [r4, #0]
}
   b46ca:	b00d      	add	sp, #52	; 0x34
   b46cc:	ecbd 8b02 	vpop	{d8}
   b46d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46d4:	2003e584 	.word	0x2003e584
   b46d8:	2003e58c 	.word	0x2003e58c
   b46dc:	2003e698 	.word	0x2003e698
   b46e0:	2003e534 	.word	0x2003e534
   b46e4:	2003e6a8 	.word	0x2003e6a8
   b46e8:	2003e664 	.word	0x2003e664
   b46ec:	2003e574 	.word	0x2003e574
   b46f0:	2003e4a8 	.word	0x2003e4a8
   b46f4:	2003e560 	.word	0x2003e560
   b46f8:	000bc23b 	.word	0x000bc23b
   b46fc:	2003e670 	.word	0x2003e670
   b4700:	000bc28a 	.word	0x000bc28a
   b4704:	000bc285 	.word	0x000bc285

000b4708 <_GLOBAL__sub_I_display>:
   b4708:	b537      	push	{r0, r1, r2, r4, r5, lr}
Adafruit_SSD1306 display(OLED_RESET); //Create an instance of the OLED display
   b470a:	2100      	movs	r1, #0
   b470c:	4824      	ldr	r0, [pc, #144]	; (b47a0 <_GLOBAL__sub_I_display+0x98>)
TCPClient TheClient; //Create a TCP client instance for the MQTT connection
   b470e:	4d25      	ldr	r5, [pc, #148]	; (b47a4 <_GLOBAL__sub_I_display+0x9c>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   b4710:	4c25      	ldr	r4, [pc, #148]	; (b47a8 <_GLOBAL__sub_I_display+0xa0>)
Adafruit_SSD1306 display(OLED_RESET); //Create an instance of the OLED display
   b4712:	f001 fc3b 	bl	b5f8c <_ZN16Adafruit_SSD1306C1Ea>
Adafruit_BME280 bme; //Create an instance of the BME280 sensor
   b4716:	4825      	ldr	r0, [pc, #148]	; (b47ac <_GLOBAL__sub_I_display+0xa4>)
   b4718:	f000 f8a2 	bl	b4860 <_ZN15Adafruit_BME280C1Ev>
AirQualitySensor sensor(A4); //Create an instance of the Air Quality Sensor
   b471c:	210f      	movs	r1, #15
   b471e:	4824      	ldr	r0, [pc, #144]	; (b47b0 <_GLOBAL__sub_I_display+0xa8>)
   b4720:	f001 fdee 	bl	b6300 <_ZN16AirQualitySensorC1Ei>
TCPClient TheClient; //Create a TCP client instance for the MQTT connection
   b4724:	4628      	mov	r0, r5
   b4726:	f002 ffef 	bl	b7708 <_ZN9TCPClientC1Ev>
   b472a:	4b22      	ldr	r3, [pc, #136]	; (b47b4 <_GLOBAL__sub_I_display+0xac>)
   b472c:	9300      	str	r3, [sp, #0]
   b472e:	4922      	ldr	r1, [pc, #136]	; (b47b8 <_GLOBAL__sub_I_display+0xb0>)
   b4730:	4b22      	ldr	r3, [pc, #136]	; (b47bc <_GLOBAL__sub_I_display+0xb4>)
   b4732:	f240 725b 	movw	r2, #1883	; 0x75b
   b4736:	4620      	mov	r0, r4
   b4738:	f000 fcf8 	bl	b512c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   b473c:	4b20      	ldr	r3, [pc, #128]	; (b47c0 <_GLOBAL__sub_I_display+0xb8>)
   b473e:	6023      	str	r3, [r4, #0]
Adafruit_MQTT_Subscribe buttonState = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/buttonOnOff");  //Subscribe to the buttonOnOff feed
   b4740:	4621      	mov	r1, r4
   b4742:	4a20      	ldr	r2, [pc, #128]	; (b47c4 <_GLOBAL__sub_I_display+0xbc>)
   b4744:	4820      	ldr	r0, [pc, #128]	; (b47c8 <_GLOBAL__sub_I_display+0xc0>)
   b4746:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
   b474a:	2300      	movs	r3, #0
   b474c:	f000 ffe0 	bl	b5710 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish soilRead = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/moisturelevel"); //Publish to the moisturelevel feed
   b4750:	4621      	mov	r1, r4
   b4752:	4a1e      	ldr	r2, [pc, #120]	; (b47cc <_GLOBAL__sub_I_display+0xc4>)
   b4754:	481e      	ldr	r0, [pc, #120]	; (b47d0 <_GLOBAL__sub_I_display+0xc8>)
   b4756:	2300      	movs	r3, #0
   b4758:	f000 ffaa 	bl	b56b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish tempRead = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/temperature"); //Publish to the Temperature Reading feed
   b475c:	4621      	mov	r1, r4
   b475e:	4a1d      	ldr	r2, [pc, #116]	; (b47d4 <_GLOBAL__sub_I_display+0xcc>)
   b4760:	481d      	ldr	r0, [pc, #116]	; (b47d8 <_GLOBAL__sub_I_display+0xd0>)
   b4762:	2300      	movs	r3, #0
   b4764:	f000 ffa4 	bl	b56b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish pressureRead = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/pressure"); //Publish to the Pressure Reading feed
   b4768:	4621      	mov	r1, r4
   b476a:	4a1c      	ldr	r2, [pc, #112]	; (b47dc <_GLOBAL__sub_I_display+0xd4>)
   b476c:	481c      	ldr	r0, [pc, #112]	; (b47e0 <_GLOBAL__sub_I_display+0xd8>)
   b476e:	2300      	movs	r3, #0
   b4770:	f000 ff9e 	bl	b56b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish humidityRead = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/humidity"); //Publish to the Humidity Reading feed
   b4774:	4621      	mov	r1, r4
   b4776:	4a1b      	ldr	r2, [pc, #108]	; (b47e4 <_GLOBAL__sub_I_display+0xdc>)
   b4778:	481b      	ldr	r0, [pc, #108]	; (b47e8 <_GLOBAL__sub_I_display+0xe0>)
   b477a:	2300      	movs	r3, #0
   b477c:	f000 ff98 	bl	b56b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish airRead = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/air-quality-sensor");  //Publish to the AirQuality Reading feed
   b4780:	4621      	mov	r1, r4
   b4782:	4a1a      	ldr	r2, [pc, #104]	; (b47ec <_GLOBAL__sub_I_display+0xe4>)
   b4784:	481a      	ldr	r0, [pc, #104]	; (b47f0 <_GLOBAL__sub_I_display+0xe8>)
   b4786:	2300      	movs	r3, #0
   b4788:	f000 ff92 	bl	b56b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish dustRead = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/dustsensor");  ////Publish to the Dust Reading feed
   b478c:	4a19      	ldr	r2, [pc, #100]	; (b47f4 <_GLOBAL__sub_I_display+0xec>)
   b478e:	481a      	ldr	r0, [pc, #104]	; (b47f8 <_GLOBAL__sub_I_display+0xf0>)
   b4790:	2300      	movs	r3, #0
   b4792:	4621      	mov	r1, r4
   b4794:	b003      	add	sp, #12
   b4796:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
Adafruit_MQTT_Publish dustRead = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/dustsensor");  ////Publish to the Dust Reading feed
   b479a:	f000 bf89 	b.w	b56b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
   b479e:	bf00      	nop
   b47a0:	2003e538 	.word	0x2003e538
   b47a4:	2003e488 	.word	0x2003e488
   b47a8:	2003e58c 	.word	0x2003e58c
   b47ac:	2003e4b4 	.word	0x2003e4b4
   b47b0:	2003e67c 	.word	0x2003e67c
   b47b4:	000bc2b4 	.word	0x000bc2b4
   b47b8:	000bc2a4 	.word	0x000bc2a4
   b47bc:	000bc29a 	.word	0x000bc29a
   b47c0:	000bc630 	.word	0x000bc630
   b47c4:	000bc2d5 	.word	0x000bc2d5
   b47c8:	2003e4f8 	.word	0x2003e4f8
   b47cc:	000bc2f1 	.word	0x000bc2f1
   b47d0:	2003e698 	.word	0x2003e698
   b47d4:	000bc30f 	.word	0x000bc30f
   b47d8:	2003e6a8 	.word	0x2003e6a8
   b47dc:	000bc32b 	.word	0x000bc32b
   b47e0:	2003e664 	.word	0x2003e664
   b47e4:	000bc344 	.word	0x000bc344
   b47e8:	2003e574 	.word	0x2003e574
   b47ec:	000bc35d 	.word	0x000bc35d
   b47f0:	2003e4a8 	.word	0x2003e4a8
   b47f4:	000bc380 	.word	0x000bc380
   b47f8:	2003e560 	.word	0x2003e560

000b47fc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b47fc:	4770      	bx	lr

000b47fe <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b47fe:	b510      	push	{r4, lr}
  }
   b4800:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4802:	4604      	mov	r4, r0
  }
   b4804:	f7ff fc4b 	bl	b409e <_ZdlPvj>
   b4808:	4620      	mov	r0, r4
   b480a:	bd10      	pop	{r4, pc}

000b480c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b480c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b480e:	4604      	mov	r4, r0
   b4810:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4812:	7922      	ldrb	r2, [r4, #4]
   b4814:	68a3      	ldr	r3, [r4, #8]
   b4816:	b132      	cbz	r2, b4826 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4818:	b9a3      	cbnz	r3, b4844 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b481a:	490b      	ldr	r1, [pc, #44]	; (b4848 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b481c:	b002      	add	sp, #8
   b481e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4822:	f002 badf 	b.w	b6de4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4826:	4a09      	ldr	r2, [pc, #36]	; (b484c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4828:	7b26      	ldrb	r6, [r4, #12]
   b482a:	4d09      	ldr	r5, [pc, #36]	; (b4850 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b482c:	4909      	ldr	r1, [pc, #36]	; (b4854 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b482e:	7b64      	ldrb	r4, [r4, #13]
   b4830:	2e01      	cmp	r6, #1
   b4832:	bf18      	it	ne
   b4834:	4629      	movne	r1, r5
   b4836:	e9cd 1400 	strd	r1, r4, [sp]
   b483a:	4907      	ldr	r1, [pc, #28]	; (b4858 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b483c:	f7ff fc46 	bl	b40cc <_ZN5Print6printfEPKcz>
  }
   b4840:	b002      	add	sp, #8
   b4842:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4844:	4a05      	ldr	r2, [pc, #20]	; (b485c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4846:	e7ef      	b.n	b4828 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4848:	000bc3ac 	.word	0x000bc3ac
   b484c:	000bc22a 	.word	0x000bc22a
   b4850:	000bc3a8 	.word	0x000bc3a8
   b4854:	000bc3a4 	.word	0x000bc3a4
   b4858:	000bc3c2 	.word	0x000bc3c2
   b485c:	000bc39b 	.word	0x000bc39b

000b4860 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b4860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4864:	6103      	str	r3, [r0, #16]
{ }
   b4866:	4770      	bx	lr

000b4868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4868:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b486a:	4c0b      	ldr	r4, [pc, #44]	; (b4898 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b486c:	7821      	ldrb	r1, [r4, #0]
   b486e:	f3bf 8f5b 	dmb	ish
   b4872:	f011 0101 	ands.w	r1, r1, #1
   b4876:	d10b      	bne.n	b4890 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4878:	4620      	mov	r0, r4
   b487a:	9101      	str	r1, [sp, #4]
   b487c:	f7ff fc1e 	bl	b40bc <__cxa_guard_acquire>
   b4880:	9901      	ldr	r1, [sp, #4]
   b4882:	b128      	cbz	r0, b4890 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4884:	4805      	ldr	r0, [pc, #20]	; (b489c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4886:	f002 fb25 	bl	b6ed4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b488a:	4620      	mov	r0, r4
   b488c:	f7ff fc1b 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b4890:	4802      	ldr	r0, [pc, #8]	; (b489c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4892:	b002      	add	sp, #8
   b4894:	bd10      	pop	{r4, pc}
   b4896:	bf00      	nop
   b4898:	2003e6b8 	.word	0x2003e6b8
   b489c:	2003e6bc 	.word	0x2003e6bc

000b48a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b48a0:	b508      	push	{r3, lr}
        instance().endTransaction();
   b48a2:	f7ff ffe1 	bl	b4868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b48a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b48aa:	f002 bb59 	b.w	b6f60 <_ZN8SPIClass14endTransactionEv>

000b48ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b48ae:	b507      	push	{r0, r1, r2, lr}
   b48b0:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b48b2:	f7ff ffd9 	bl	b4868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b48b6:	9901      	ldr	r1, [sp, #4]
    }
   b48b8:	b003      	add	sp, #12
   b48ba:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b48be:	f002 bb69 	b.w	b6f94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b48c2 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b48c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b48c6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b48ca:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b48cc:	4605      	mov	r5, r0
   b48ce:	460f      	mov	r7, r1
    if (_sck == -1)
   b48d0:	d106      	bne.n	b48e0 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b48d2:	f7ff ffc9 	bl	b4868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b48d6:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b48d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b48dc:	f002 bc20 	b.w	b7120 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b48e0:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b48e2:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b48e4:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b48e8:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b48ec:	2100      	movs	r1, #0
   b48ee:	b280      	uxth	r0, r0
   b48f0:	f003 f96b 	bl	b7bca <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b48f4:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b48f8:	fa08 f106 	lsl.w	r1, r8, r6
   b48fc:	4039      	ands	r1, r7
   b48fe:	b280      	uxth	r0, r0
   b4900:	f003 f963 	bl	b7bca <digitalWrite>
        digitalWrite(_sck, HIGH);
   b4904:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4908:	2101      	movs	r1, #1
   b490a:	b280      	uxth	r0, r0
   b490c:	f003 f95d 	bl	b7bca <digitalWrite>
        if (digitalRead(_miso))
   b4910:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b4914:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b4916:	b280      	uxth	r0, r0
        reply <<= 1;
   b4918:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b491a:	f003 f96f 	bl	b7bfc <digitalRead>
   b491e:	b108      	cbz	r0, b4924 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b4920:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b4924:	3e01      	subs	r6, #1
   b4926:	d2df      	bcs.n	b48e8 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b4928:	4620      	mov	r0, r4
   b492a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4930 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b4930:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b4932:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4936:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b4938:	4604      	mov	r4, r0
   b493a:	460e      	mov	r6, r1
   b493c:	4615      	mov	r5, r2
    if (_cs == -1) {
   b493e:	d113      	bne.n	b4968 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4940:	7901      	ldrb	r1, [r0, #4]
   b4942:	6800      	ldr	r0, [r0, #0]
   b4944:	f002 f8d0 	bl	b6ae8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4948:	6820      	ldr	r0, [r4, #0]
   b494a:	6803      	ldr	r3, [r0, #0]
   b494c:	4631      	mov	r1, r6
   b494e:	689b      	ldr	r3, [r3, #8]
   b4950:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b4952:	6820      	ldr	r0, [r4, #0]
   b4954:	6803      	ldr	r3, [r0, #0]
   b4956:	4629      	mov	r1, r5
   b4958:	689b      	ldr	r3, [r3, #8]
   b495a:	4798      	blx	r3
        _wire -> endTransmission();
   b495c:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b495e:	b004      	add	sp, #16
   b4960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b4964:	f002 b8cb 	b.w	b6afe <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b4968:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b496c:	3301      	adds	r3, #1
   b496e:	d10c      	bne.n	b498a <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b4970:	4b16      	ldr	r3, [pc, #88]	; (b49cc <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b4972:	9300      	str	r3, [sp, #0]
   b4974:	2300      	movs	r3, #0
   b4976:	f88d 3004 	strb.w	r3, [sp, #4]
   b497a:	4b15      	ldr	r3, [pc, #84]	; (b49d0 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b497c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b497e:	4668      	mov	r0, sp
   b4980:	2301      	movs	r3, #1
   b4982:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4986:	f7ff ff92 	bl	b48ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b498a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b498e:	2100      	movs	r1, #0
   b4990:	b280      	uxth	r0, r0
   b4992:	f003 f91a 	bl	b7bca <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b4996:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b499a:	4620      	mov	r0, r4
   b499c:	f7ff ff91 	bl	b48c2 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b49a0:	4629      	mov	r1, r5
   b49a2:	4620      	mov	r0, r4
   b49a4:	f7ff ff8d 	bl	b48c2 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b49a8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b49ac:	2101      	movs	r1, #1
   b49ae:	b280      	uxth	r0, r0
   b49b0:	f003 f90b 	bl	b7bca <digitalWrite>
    if (_sck == -1)
   b49b4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b49b8:	3301      	adds	r3, #1
   b49ba:	d104      	bne.n	b49c6 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b49bc:	b004      	add	sp, #16
   b49be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b49c2:	f7ff bf6d 	b.w	b48a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b49c6:	b004      	add	sp, #16
   b49c8:	bd70      	pop	{r4, r5, r6, pc}
   b49ca:	bf00      	nop
   b49cc:	000bc3e8 	.word	0x000bc3e8
   b49d0:	0007a120 	.word	0x0007a120

000b49d4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b49d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b49d6:	00db      	lsls	r3, r3, #3
   b49d8:	f002 0207 	and.w	r2, r2, #7
   b49dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b49e0:	4313      	orrs	r3, r2
   b49e2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b49e6:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b49ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b49ee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b49f2:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b49f6:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b49fa:	f366 1347 	bfi	r3, r6, #5, #3
   b49fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b4a02:	00ed      	lsls	r5, r5, #3
   b4a04:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b4a08:	f007 0707 	and.w	r7, r7, #7
   b4a0c:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b4a10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b4a14:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b4a16:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b4a18:	431d      	orrs	r5, r3
   b4a1a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b4a1e:	f006 0207 	and.w	r2, r6, #7
   b4a22:	21f2      	movs	r1, #242	; 0xf2
   b4a24:	f7ff ff84 	bl	b4930 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b4a28:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b4a2c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4a30:	f002 0107 	and.w	r1, r2, #7
   b4a34:	009b      	lsls	r3, r3, #2
   b4a36:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b4a3a:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b4a3e:	4620      	mov	r0, r4
   b4a40:	21f5      	movs	r1, #245	; 0xf5
   b4a42:	f7ff ff75 	bl	b4930 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b4a46:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b4a4a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4a4e:	f002 0107 	and.w	r1, r2, #7
   b4a52:	009b      	lsls	r3, r3, #2
   b4a54:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4a58:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b4a5c:	4620      	mov	r0, r4
   b4a5e:	21f4      	movs	r1, #244	; 0xf4
}
   b4a60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4a64:	f7ff bf64 	b.w	b4930 <_ZN15Adafruit_BME2806write8Ehh>

000b4a68 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b4a68:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b4a6a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4a6e:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b4a70:	b085      	sub	sp, #20
   b4a72:	4604      	mov	r4, r0
   b4a74:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4a76:	d118      	bne.n	b4aaa <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4a78:	7901      	ldrb	r1, [r0, #4]
   b4a7a:	6800      	ldr	r0, [r0, #0]
   b4a7c:	f002 f834 	bl	b6ae8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4a80:	6820      	ldr	r0, [r4, #0]
   b4a82:	6803      	ldr	r3, [r0, #0]
   b4a84:	4629      	mov	r1, r5
   b4a86:	689b      	ldr	r3, [r3, #8]
   b4a88:	4798      	blx	r3
        _wire -> endTransmission();
   b4a8a:	6820      	ldr	r0, [r4, #0]
   b4a8c:	f002 f837 	bl	b6afe <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b4a90:	7921      	ldrb	r1, [r4, #4]
   b4a92:	6820      	ldr	r0, [r4, #0]
   b4a94:	2201      	movs	r2, #1
   b4a96:	f002 f824 	bl	b6ae2 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4a9a:	6820      	ldr	r0, [r4, #0]
   b4a9c:	6803      	ldr	r3, [r0, #0]
   b4a9e:	695b      	ldr	r3, [r3, #20]
   b4aa0:	4798      	blx	r3
   b4aa2:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b4aa4:	4628      	mov	r0, r5
   b4aa6:	b005      	add	sp, #20
   b4aa8:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4aaa:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4aae:	3301      	adds	r3, #1
   b4ab0:	d10c      	bne.n	b4acc <_ZN15Adafruit_BME2805read8Eh+0x64>
   b4ab2:	4b15      	ldr	r3, [pc, #84]	; (b4b08 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b4ab4:	9300      	str	r3, [sp, #0]
   b4ab6:	2300      	movs	r3, #0
   b4ab8:	f88d 3004 	strb.w	r3, [sp, #4]
   b4abc:	4b13      	ldr	r3, [pc, #76]	; (b4b0c <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b4abe:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4ac0:	4668      	mov	r0, sp
   b4ac2:	2301      	movs	r3, #1
   b4ac4:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4ac8:	f7ff fef1 	bl	b48ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4acc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4ad0:	2100      	movs	r1, #0
   b4ad2:	b280      	uxth	r0, r0
   b4ad4:	f003 f879 	bl	b7bca <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4ad8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4adc:	4620      	mov	r0, r4
   b4ade:	f7ff fef0 	bl	b48c2 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4ae2:	2100      	movs	r1, #0
   b4ae4:	4620      	mov	r0, r4
   b4ae6:	f7ff feec 	bl	b48c2 <_ZN15Adafruit_BME2807spixferEh>
   b4aea:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b4aec:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4af0:	2101      	movs	r1, #1
   b4af2:	b280      	uxth	r0, r0
   b4af4:	f003 f869 	bl	b7bca <digitalWrite>
        if (_sck == -1)
   b4af8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4afc:	3301      	adds	r3, #1
   b4afe:	d1d1      	bne.n	b4aa4 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4b00:	f7ff fece 	bl	b48a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4b04:	e7ce      	b.n	b4aa4 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b4b06:	bf00      	nop
   b4b08:	000bc3e8 	.word	0x000bc3e8
   b4b0c:	0007a120 	.word	0x0007a120

000b4b10 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b4b10:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b4b12:	21f3      	movs	r1, #243	; 0xf3
   b4b14:	f7ff ffa8 	bl	b4a68 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b4b18:	f000 0001 	and.w	r0, r0, #1
   b4b1c:	bd08      	pop	{r3, pc}
	...

000b4b20 <_ZN15Adafruit_BME2806read16Eh>:
{
   b4b20:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4b22:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4b26:	3301      	adds	r3, #1
{
   b4b28:	b085      	sub	sp, #20
   b4b2a:	4604      	mov	r4, r0
   b4b2c:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4b2e:	d11f      	bne.n	b4b70 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4b30:	7901      	ldrb	r1, [r0, #4]
   b4b32:	6800      	ldr	r0, [r0, #0]
   b4b34:	f001 ffd8 	bl	b6ae8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4b38:	6820      	ldr	r0, [r4, #0]
   b4b3a:	6803      	ldr	r3, [r0, #0]
   b4b3c:	4629      	mov	r1, r5
   b4b3e:	689b      	ldr	r3, [r3, #8]
   b4b40:	4798      	blx	r3
        _wire -> endTransmission();
   b4b42:	6820      	ldr	r0, [r4, #0]
   b4b44:	f001 ffdb 	bl	b6afe <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4b48:	7921      	ldrb	r1, [r4, #4]
   b4b4a:	6820      	ldr	r0, [r4, #0]
   b4b4c:	2202      	movs	r2, #2
   b4b4e:	f001 ffc8 	bl	b6ae2 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4b52:	6820      	ldr	r0, [r4, #0]
   b4b54:	6803      	ldr	r3, [r0, #0]
   b4b56:	695b      	ldr	r3, [r3, #20]
   b4b58:	4798      	blx	r3
   b4b5a:	4605      	mov	r5, r0
   b4b5c:	6820      	ldr	r0, [r4, #0]
   b4b5e:	6803      	ldr	r3, [r0, #0]
   b4b60:	695b      	ldr	r3, [r3, #20]
   b4b62:	4798      	blx	r3
   b4b64:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4b68:	b285      	uxth	r5, r0
}
   b4b6a:	4628      	mov	r0, r5
   b4b6c:	b005      	add	sp, #20
   b4b6e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4b70:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4b74:	3301      	adds	r3, #1
   b4b76:	d10c      	bne.n	b4b92 <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4b78:	4b18      	ldr	r3, [pc, #96]	; (b4bdc <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4b7a:	9300      	str	r3, [sp, #0]
   b4b7c:	2300      	movs	r3, #0
   b4b7e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4b82:	4b17      	ldr	r3, [pc, #92]	; (b4be0 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4b84:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4b86:	4668      	mov	r0, sp
   b4b88:	2301      	movs	r3, #1
   b4b8a:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4b8e:	f7ff fe8e 	bl	b48ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4b92:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4b96:	2100      	movs	r1, #0
   b4b98:	b280      	uxth	r0, r0
   b4b9a:	f003 f816 	bl	b7bca <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4b9e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4ba2:	4620      	mov	r0, r4
   b4ba4:	f7ff fe8d 	bl	b48c2 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4ba8:	2100      	movs	r1, #0
   b4baa:	4620      	mov	r0, r4
   b4bac:	f7ff fe89 	bl	b48c2 <_ZN15Adafruit_BME2807spixferEh>
   b4bb0:	2100      	movs	r1, #0
   b4bb2:	4605      	mov	r5, r0
   b4bb4:	4620      	mov	r0, r4
   b4bb6:	f7ff fe84 	bl	b48c2 <_ZN15Adafruit_BME2807spixferEh>
   b4bba:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4bbe:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4bc0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4bc4:	2101      	movs	r1, #1
   b4bc6:	b280      	uxth	r0, r0
   b4bc8:	f002 ffff 	bl	b7bca <digitalWrite>
        if (_sck == -1)
   b4bcc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4bd0:	3301      	adds	r3, #1
   b4bd2:	d1ca      	bne.n	b4b6a <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b4bd4:	f7ff fe64 	bl	b48a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4bd8:	e7c7      	b.n	b4b6a <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4bda:	bf00      	nop
   b4bdc:	000bc3e8 	.word	0x000bc3e8
   b4be0:	0007a120 	.word	0x0007a120

000b4be4 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4be4:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4be6:	f7ff ff9b 	bl	b4b20 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4bea:	ba40      	rev16	r0, r0
}
   b4bec:	b280      	uxth	r0, r0
   b4bee:	bd08      	pop	{r3, pc}

000b4bf0 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4bf0:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4bf2:	2188      	movs	r1, #136	; 0x88
{
   b4bf4:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4bf6:	f7ff fff5 	bl	b4be4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4bfa:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4bfc:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4bfe:	4620      	mov	r0, r4
   b4c00:	f7ff fff0 	bl	b4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4c04:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4c06:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4c08:	4620      	mov	r0, r4
   b4c0a:	f7ff ffeb 	bl	b4be4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4c0e:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4c10:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4c12:	4620      	mov	r0, r4
   b4c14:	f7ff ffe6 	bl	b4be4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4c18:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4c1a:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4c1c:	4620      	mov	r0, r4
   b4c1e:	f7ff ffe1 	bl	b4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4c22:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4c24:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4c26:	4620      	mov	r0, r4
   b4c28:	f7ff ffdc 	bl	b4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4c2c:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4c2e:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4c30:	4620      	mov	r0, r4
   b4c32:	f7ff ffd7 	bl	b4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4c36:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4c38:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4c3a:	4620      	mov	r0, r4
   b4c3c:	f7ff ffd2 	bl	b4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4c40:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4c42:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4c44:	4620      	mov	r0, r4
   b4c46:	f7ff ffcd 	bl	b4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4c4a:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4c4c:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4c4e:	4620      	mov	r0, r4
   b4c50:	f7ff ffc8 	bl	b4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4c54:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4c56:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4c58:	4620      	mov	r0, r4
   b4c5a:	f7ff ffc3 	bl	b4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4c5e:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4c60:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4c62:	4620      	mov	r0, r4
   b4c64:	f7ff ffbe 	bl	b4be4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4c68:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4c6a:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4c6c:	4620      	mov	r0, r4
   b4c6e:	f7ff fefb 	bl	b4a68 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4c72:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4c74:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4c78:	4620      	mov	r0, r4
   b4c7a:	f7ff ffb3 	bl	b4be4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4c7e:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4c80:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4c82:	4620      	mov	r0, r4
   b4c84:	f7ff fef0 	bl	b4a68 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4c88:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4c8a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4c8e:	4620      	mov	r0, r4
   b4c90:	f7ff feea 	bl	b4a68 <_ZN15Adafruit_BME2805read8Eh>
   b4c94:	21e5      	movs	r1, #229	; 0xe5
   b4c96:	4605      	mov	r5, r0
   b4c98:	4620      	mov	r0, r4
   b4c9a:	f7ff fee5 	bl	b4a68 <_ZN15Adafruit_BME2805read8Eh>
   b4c9e:	f000 030f 	and.w	r3, r0, #15
   b4ca2:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4ca6:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4ca8:	21e6      	movs	r1, #230	; 0xe6
   b4caa:	4620      	mov	r0, r4
   b4cac:	f7ff fedc 	bl	b4a68 <_ZN15Adafruit_BME2805read8Eh>
   b4cb0:	21e5      	movs	r1, #229	; 0xe5
   b4cb2:	4605      	mov	r5, r0
   b4cb4:	4620      	mov	r0, r4
   b4cb6:	f7ff fed7 	bl	b4a68 <_ZN15Adafruit_BME2805read8Eh>
   b4cba:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4cbe:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4cc2:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4cc4:	21e7      	movs	r1, #231	; 0xe7
   b4cc6:	4620      	mov	r0, r4
   b4cc8:	f7ff fece 	bl	b4a68 <_ZN15Adafruit_BME2805read8Eh>
   b4ccc:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4cd0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4cd4 <_ZN15Adafruit_BME2806read24Eh>:
{
   b4cd4:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4cd6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4cda:	3301      	adds	r3, #1
{
   b4cdc:	b085      	sub	sp, #20
   b4cde:	4604      	mov	r4, r0
   b4ce0:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4ce2:	d123      	bne.n	b4d2c <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4ce4:	7901      	ldrb	r1, [r0, #4]
   b4ce6:	6800      	ldr	r0, [r0, #0]
   b4ce8:	f001 fefe 	bl	b6ae8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4cec:	6820      	ldr	r0, [r4, #0]
   b4cee:	6803      	ldr	r3, [r0, #0]
   b4cf0:	4629      	mov	r1, r5
   b4cf2:	689b      	ldr	r3, [r3, #8]
   b4cf4:	4798      	blx	r3
        _wire -> endTransmission();
   b4cf6:	6820      	ldr	r0, [r4, #0]
   b4cf8:	f001 ff01 	bl	b6afe <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4cfc:	7921      	ldrb	r1, [r4, #4]
   b4cfe:	6820      	ldr	r0, [r4, #0]
   b4d00:	2203      	movs	r2, #3
   b4d02:	f001 feee 	bl	b6ae2 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4d06:	6820      	ldr	r0, [r4, #0]
   b4d08:	6803      	ldr	r3, [r0, #0]
   b4d0a:	695b      	ldr	r3, [r3, #20]
   b4d0c:	4798      	blx	r3
        value <<= 8;
   b4d0e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4d10:	6820      	ldr	r0, [r4, #0]
   b4d12:	6803      	ldr	r3, [r0, #0]
   b4d14:	695b      	ldr	r3, [r3, #20]
   b4d16:	4798      	blx	r3
   b4d18:	4328      	orrs	r0, r5
        value <<= 8;
   b4d1a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4d1c:	6820      	ldr	r0, [r4, #0]
   b4d1e:	6803      	ldr	r3, [r0, #0]
   b4d20:	695b      	ldr	r3, [r3, #20]
   b4d22:	4798      	blx	r3
   b4d24:	4305      	orrs	r5, r0
}
   b4d26:	4628      	mov	r0, r5
   b4d28:	b005      	add	sp, #20
   b4d2a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4d2c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4d30:	3301      	adds	r3, #1
   b4d32:	d10c      	bne.n	b4d4e <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4d34:	4b1a      	ldr	r3, [pc, #104]	; (b4da0 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4d36:	9300      	str	r3, [sp, #0]
   b4d38:	2300      	movs	r3, #0
   b4d3a:	f88d 3004 	strb.w	r3, [sp, #4]
   b4d3e:	4b19      	ldr	r3, [pc, #100]	; (b4da4 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4d40:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4d42:	4668      	mov	r0, sp
   b4d44:	2301      	movs	r3, #1
   b4d46:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4d4a:	f7ff fdb0 	bl	b48ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4d4e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4d52:	2100      	movs	r1, #0
   b4d54:	b280      	uxth	r0, r0
   b4d56:	f002 ff38 	bl	b7bca <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4d5a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4d5e:	4620      	mov	r0, r4
   b4d60:	f7ff fdaf 	bl	b48c2 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4d64:	2100      	movs	r1, #0
   b4d66:	4620      	mov	r0, r4
   b4d68:	f7ff fdab 	bl	b48c2 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4d6c:	2100      	movs	r1, #0
        value <<= 8;
   b4d6e:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4d70:	4620      	mov	r0, r4
   b4d72:	f7ff fda6 	bl	b48c2 <_ZN15Adafruit_BME2807spixferEh>
   b4d76:	4328      	orrs	r0, r5
        value <<= 8;
   b4d78:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4d7a:	2100      	movs	r1, #0
   b4d7c:	4620      	mov	r0, r4
   b4d7e:	f7ff fda0 	bl	b48c2 <_ZN15Adafruit_BME2807spixferEh>
   b4d82:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4d84:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4d88:	2101      	movs	r1, #1
   b4d8a:	b280      	uxth	r0, r0
   b4d8c:	f002 ff1d 	bl	b7bca <digitalWrite>
        if (_sck == -1)
   b4d90:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4d94:	3301      	adds	r3, #1
   b4d96:	d1c6      	bne.n	b4d26 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4d98:	f7ff fd82 	bl	b48a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4d9c:	e7c3      	b.n	b4d26 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4d9e:	bf00      	nop
   b4da0:	000bc3e8 	.word	0x000bc3e8
   b4da4:	0007a120 	.word	0x0007a120

000b4da8 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4da8:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4daa:	21fa      	movs	r1, #250	; 0xfa
{
   b4dac:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4dae:	f7ff ff91 	bl	b4cd4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4db2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4db6:	d01f      	beq.n	b4df8 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4db8:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4dba:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4e00 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4dbe:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4dc0:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4dc4:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4dc8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4dcc:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4dce:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4dd2:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4dd6:	131b      	asrs	r3, r3, #12
   b4dd8:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4dda:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4ddc:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4de0:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4de2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4de6:	3380      	adds	r3, #128	; 0x80
   b4de8:	121b      	asrs	r3, r3, #8
   b4dea:	ee07 3a90 	vmov	s15, r3
   b4dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4df2:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4df6:	bd10      	pop	{r4, pc}
        return NAN;
   b4df8:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4e04 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4dfc:	e7fb      	b.n	b4df6 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4dfe:	bf00      	nop
   b4e00:	42c80000 	.word	0x42c80000
   b4e04:	7fc00000 	.word	0x7fc00000

000b4e08 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4e08:	b538      	push	{r3, r4, r5, lr}
   b4e0a:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4e0c:	f7ff ffcc 	bl	b4da8 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4e10:	21fd      	movs	r1, #253	; 0xfd
   b4e12:	4620      	mov	r0, r4
   b4e14:	f7ff fe84 	bl	b4b20 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4e18:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4e1c:	d038      	beq.n	b4e90 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4e1e:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4e20:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4e24:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4e28:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4e2c:	0509      	lsls	r1, r1, #20
   b4e2e:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4e32:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4e36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4e3a:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4e3c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4e40:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4e44:	436b      	muls	r3, r5
   b4e46:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4e48:	4369      	muls	r1, r5
   b4e4a:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4e4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4e50:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4e52:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4e54:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4e58:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4e5c:	434b      	muls	r3, r1
   b4e5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4e62:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4e64:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4e66:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4e68:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4e6c:	4352      	muls	r2, r2
   b4e6e:	11d2      	asrs	r2, r2, #7
   b4e70:	434a      	muls	r2, r1
   b4e72:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4e76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4e7a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4e7e:	bfa8      	it	ge
   b4e80:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4e84:	131b      	asrs	r3, r3, #12
   b4e86:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4e8a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4e8e:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4e90:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4e98 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4e94:	e7fb      	b.n	b4e8e <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4e96:	bf00      	nop
   b4e98:	7fc00000 	.word	0x7fc00000

000b4e9c <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b4e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4ea0:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b4ea2:	f7ff ff81 	bl	b4da8 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b4ea6:	21f7      	movs	r1, #247	; 0xf7
   b4ea8:	4628      	mov	r0, r5
   b4eaa:	f7ff ff13 	bl	b4cd4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b4eae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4eb2:	f000 80b6 	beq.w	b5022 <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b4eb6:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4eb8:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b4ebc:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b4ec0:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b4ec4:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4ec8:	17dc      	asrs	r4, r3, #31
   b4eca:	fb03 f20e 	mul.w	r2, r3, lr
   b4ece:	fb01 2204 	mla	r2, r1, r4, r2
   b4ed2:	fba3 3401 	umull	r3, r4, r3, r1
   b4ed6:	4422      	add	r2, r4
   b4ed8:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4eda:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4ede:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4ee0:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4ee4:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4ee8:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4eec:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4ef0:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b4ef4:	fb03 f608 	mul.w	r6, r3, r8
   b4ef8:	fb07 660c 	mla	r6, r7, ip, r6
   b4efc:	fba3 3c07 	umull	r3, ip, r3, r7
   b4f00:	4466      	add	r6, ip
   b4f02:	0a1b      	lsrs	r3, r3, #8
   b4f04:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b4f08:	191b      	adds	r3, r3, r4
   b4f0a:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4f0e:	8b6e      	ldrh	r6, [r5, #26]
   b4f10:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b4f14:	fba3 3406 	umull	r3, r4, r3, r6
   b4f18:	fb06 4402 	mla	r4, r6, r2, r4
   b4f1c:	17e3      	asrs	r3, r4, #31
   b4f1e:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b4f20:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4f24:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b4f28:	d07e      	beq.n	b5028 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4f2a:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b4f2e:	fb04 f608 	mul.w	r6, r4, r8
   b4f32:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b4f36:	fb07 6609 	mla	r6, r7, r9, r6
   b4f3a:	fba4 4707 	umull	r4, r7, r4, r7
   b4f3e:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4f40:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b4f44:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b4f48:	fb07 fe0e 	mul.w	lr, r7, lr
   b4f4c:	fb01 ee08 	mla	lr, r1, r8, lr
   b4f50:	fba7 7101 	umull	r7, r1, r7, r1
   b4f54:	4471      	add	r1, lr
   b4f56:	0449      	lsls	r1, r1, #17
   b4f58:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b4f5c:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4f5e:	047f      	lsls	r7, r7, #17
   b4f60:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b4f62:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4f66:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4f6a:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4f6e:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b4f72:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b4f76:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b4f7a:	07e4      	lsls	r4, r4, #31
   b4f7c:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4f7e:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b4f82:	f640 4135 	movw	r1, #3125	; 0xc35
   b4f86:	eb60 0606 	sbc.w	r6, r0, r6
   b4f8a:	fba4 0401 	umull	r0, r4, r4, r1
   b4f8e:	fb01 4106 	mla	r1, r1, r6, r4
   b4f92:	f004 fed5 	bl	b9d40 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4f96:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4f9a:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4f9e:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b4fa2:	0b43      	lsrs	r3, r0, #13
   b4fa4:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b4fa8:	fb02 f70c 	mul.w	r7, r2, ip
   b4fac:	17d4      	asrs	r4, r2, #31
   b4fae:	fb03 7704 	mla	r7, r3, r4, r7
   b4fb2:	fba2 2403 	umull	r2, r4, r2, r3
   b4fb6:	443c      	add	r4, r7
   b4fb8:	fb02 f70c 	mul.w	r7, r2, ip
   b4fbc:	fb03 7704 	mla	r7, r3, r4, r7
   b4fc0:	fba2 2303 	umull	r2, r3, r2, r3
   b4fc4:	441f      	add	r7, r3
   b4fc6:	0e53      	lsrs	r3, r2, #25
   b4fc8:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4fcc:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4fce:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b4fd2:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4fd6:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4fd8:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4fdc:	fb02 4100 	mla	r1, r2, r0, r4
   b4fe0:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4fe4:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4fe8:	4431      	add	r1, r6
   b4fea:	0cc0      	lsrs	r0, r0, #19
   b4fec:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4ff0:	1818      	adds	r0, r3, r0
   b4ff2:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b4ff6:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b4ffa:	0a00      	lsrs	r0, r0, #8
   b4ffc:	012d      	lsls	r5, r5, #4
   b4ffe:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b5002:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b5006:	0124      	lsls	r4, r4, #4
   b5008:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b500a:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b500e:	f004 fe59 	bl	b9cc4 <__aeabi_l2f>
   b5012:	ed9f 0a07 	vldr	s0, [pc, #28]	; b5030 <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b5016:	ee07 0a90 	vmov	s15, r0
   b501a:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b501e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b5022:	ed9f 0a04 	vldr	s0, [pc, #16]	; b5034 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b5026:	e7fa      	b.n	b501e <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b5028:	ed9f 0a03 	vldr	s0, [pc, #12]	; b5038 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b502c:	e7f7      	b.n	b501e <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b502e:	bf00      	nop
   b5030:	3b800000 	.word	0x3b800000
   b5034:	7fc00000 	.word	0x7fc00000
   b5038:	00000000 	.word	0x00000000

000b503c <_ZN15Adafruit_BME2804initEv>:
{
   b503c:	b530      	push	{r4, r5, lr}
   b503e:	4604      	mov	r4, r0
    if (_cs == -1) {
   b5040:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b5044:	1c42      	adds	r2, r0, #1
{
   b5046:	b085      	sub	sp, #20
    if (_cs == -1) {
   b5048:	d119      	bne.n	b507e <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b504a:	6820      	ldr	r0, [r4, #0]
   b504c:	f001 fd1a 	bl	b6a84 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b5050:	21d0      	movs	r1, #208	; 0xd0
   b5052:	4620      	mov	r0, r4
   b5054:	f7ff fd08 	bl	b4a68 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b5058:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b505a:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b505c:	d145      	bne.n	b50ea <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b505e:	4620      	mov	r0, r4
   b5060:	22b6      	movs	r2, #182	; 0xb6
   b5062:	21e0      	movs	r1, #224	; 0xe0
   b5064:	f7ff fc64 	bl	b4930 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b5068:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b506c:	f001 fc76 	bl	b695c <delay>
    while (isReadingCalibration())
   b5070:	4620      	mov	r0, r4
   b5072:	f7ff fd4d 	bl	b4b10 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b5076:	4605      	mov	r5, r0
   b5078:	b328      	cbz	r0, b50c6 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b507a:	2064      	movs	r0, #100	; 0x64
   b507c:	e7f6      	b.n	b506c <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b507e:	2101      	movs	r1, #1
   b5080:	b280      	uxth	r0, r0
   b5082:	f002 fda2 	bl	b7bca <digitalWrite>
        pinMode(_cs, OUTPUT);
   b5086:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b508a:	2101      	movs	r1, #1
   b508c:	b280      	uxth	r0, r0
   b508e:	f002 fd8b 	bl	b7ba8 <pinMode>
        if (_sck == -1) {
   b5092:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b5096:	1c43      	adds	r3, r0, #1
   b5098:	d104      	bne.n	b50a4 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b509a:	f7ff fbe5 	bl	b4868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b509e:	f001 ff23 	bl	b6ee8 <_ZN8SPIClass5beginEv>
    }
   b50a2:	e7d5      	b.n	b5050 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b50a4:	2101      	movs	r1, #1
   b50a6:	b280      	uxth	r0, r0
   b50a8:	f002 fd7e 	bl	b7ba8 <pinMode>
            pinMode(_mosi, OUTPUT);
   b50ac:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b50b0:	2101      	movs	r1, #1
   b50b2:	b280      	uxth	r0, r0
   b50b4:	f002 fd78 	bl	b7ba8 <pinMode>
            pinMode(_miso, INPUT);
   b50b8:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b50bc:	2100      	movs	r1, #0
   b50be:	b280      	uxth	r0, r0
   b50c0:	f002 fd72 	bl	b7ba8 <pinMode>
   b50c4:	e7c4      	b.n	b5050 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b50c6:	4620      	mov	r0, r4
   b50c8:	f7ff fd92 	bl	b4bf0 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b50cc:	2305      	movs	r3, #5
   b50ce:	9300      	str	r3, [sp, #0]
   b50d0:	461a      	mov	r2, r3
   b50d2:	2103      	movs	r1, #3
   b50d4:	4620      	mov	r0, r4
   b50d6:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b50da:	f7ff fc7b 	bl	b49d4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b50de:	2064      	movs	r0, #100	; 0x64
   b50e0:	f001 fc3c 	bl	b695c <delay>
    return true;
   b50e4:	2001      	movs	r0, #1
}
   b50e6:	b005      	add	sp, #20
   b50e8:	bd30      	pop	{r4, r5, pc}
        return false;
   b50ea:	2000      	movs	r0, #0
   b50ec:	e7fb      	b.n	b50e6 <_ZN15Adafruit_BME2804initEv+0xaa>

000b50ee <_ZN15Adafruit_BME2805beginEh>:
{
   b50ee:	b510      	push	{r4, lr}
	_i2caddr = addr;
   b50f0:	7101      	strb	r1, [r0, #4]
{
   b50f2:	4604      	mov	r4, r0
	_wire = &Wire;
   b50f4:	f002 fe12 	bl	b7d1c <_Z19__fetch_global_Wirev>
   b50f8:	6020      	str	r0, [r4, #0]
	return init();
   b50fa:	4620      	mov	r0, r4
}
   b50fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return init();
   b5100:	f7ff bf9c 	b.w	b503c <_ZN15Adafruit_BME2804initEv>

000b5104 <_ZL11stringprintPhPKct.constprop.0>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   b5104:	b513      	push	{r0, r1, r4, lr}
   b5106:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   b5108:	4608      	mov	r0, r1
   b510a:	9101      	str	r1, [sp, #4]
   b510c:	f005 f87e 	bl	ba20c <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   b5110:	f3c0 2307 	ubfx	r3, r0, #8, #8
   b5114:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   b5116:	7060      	strb	r0, [r4, #1]
   b5118:	1ca3      	adds	r3, r4, #2
  strncpy((char *)p, s, len);
   b511a:	b284      	uxth	r4, r0
   b511c:	9901      	ldr	r1, [sp, #4]
   b511e:	4622      	mov	r2, r4
   b5120:	4618      	mov	r0, r3
   b5122:	f005 f8b1 	bl	ba288 <strncpy>
  return p+len;
}
   b5126:	4420      	add	r0, r4
   b5128:	b002      	add	sp, #8
   b512a:	bd10      	pop	{r4, pc}

000b512c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   b512c:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   b512e:	8102      	strh	r2, [r0, #8]
  clientid = "";
   b5130:	4a0a      	ldr	r2, [pc, #40]	; (b515c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   b5132:	4d0b      	ldr	r5, [pc, #44]	; (b5160 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   b5134:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   b5138:	9b03      	ldr	r3, [sp, #12]
   b513a:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   b513c:	2300      	movs	r3, #0
  servername = server;
   b513e:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   b5142:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   b5146:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   b514a:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   b514e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   b5152:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   b5154:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   b5158:	bd30      	pop	{r4, r5, pc}
   b515a:	bf00      	nop
   b515c:	000bc22a 	.word	0x000bc22a
   b5160:	000bc5e4 	.word	0x000bc5e4

000b5164 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b5164:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5168:	4616      	mov	r6, r2
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   b516a:	6802      	ldr	r2, [r0, #0]
   b516c:	b21b      	sxth	r3, r3
   b516e:	6997      	ldr	r7, [r2, #24]
   b5170:	9301      	str	r3, [sp, #4]
   b5172:	2201      	movs	r2, #1
uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b5174:	4605      	mov	r5, r0
   b5176:	460c      	mov	r4, r1
  rlen = readPacket(pbuff, 1, timeout);
   b5178:	47b8      	blx	r7
  if (rlen != 1) return 0;
   b517a:	b2c7      	uxtb	r7, r0
   b517c:	2f01      	cmp	r7, #1
   b517e:	9b01      	ldr	r3, [sp, #4]
   b5180:	d003      	beq.n	b518a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x26>
   b5182:	2000      	movs	r0, #0
    rlen = readPacket(pbuff, value, timeout);
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
}
   b5184:	b003      	add	sp, #12
   b5186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuff++;
   b518a:	f104 0801 	add.w	r8, r4, #1
  uint32_t multiplier = 1;
   b518e:	f104 0a05 	add.w	sl, r4, #5
  uint32_t value = 0;
   b5192:	f04f 0900 	mov.w	r9, #0
    rlen = readPacket(pbuff, 1, timeout);
   b5196:	682a      	ldr	r2, [r5, #0]
   b5198:	9301      	str	r3, [sp, #4]
   b519a:	f8d2 b018 	ldr.w	fp, [r2, #24]
   b519e:	4641      	mov	r1, r8
   b51a0:	2201      	movs	r2, #1
   b51a2:	4628      	mov	r0, r5
   b51a4:	47d8      	blx	fp
    if (rlen != 1) return 0;
   b51a6:	b2c0      	uxtb	r0, r0
   b51a8:	2801      	cmp	r0, #1
   b51aa:	d1ea      	bne.n	b5182 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   b51ac:	f818 2b01 	ldrb.w	r2, [r8], #1
    uint32_t intermediate = encodedByte & 0x7F;
   b51b0:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    if (multiplier > (128UL*128UL*128UL)) {
   b51b4:	45c2      	cmp	sl, r8
    value += intermediate;
   b51b6:	fb01 9907 	mla	r9, r1, r7, r9
    multiplier *= 128;
   b51ba:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   b51be:	d0e0      	beq.n	b5182 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
  } while (encodedByte & 0x80);
   b51c0:	f012 0f80 	tst.w	r2, #128	; 0x80
   b51c4:	9b01      	ldr	r3, [sp, #4]
   b51c6:	d1e6      	bne.n	b5196 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x32>
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b51c8:	eba8 0404 	sub.w	r4, r8, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b51cc:	b2a7      	uxth	r7, r4
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b51ce:	1b34      	subs	r4, r6, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b51d0:	682a      	ldr	r2, [r5, #0]
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b51d2:	3c01      	subs	r4, #1
   b51d4:	454c      	cmp	r4, r9
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b51d6:	f8d2 a018 	ldr.w	sl, [r2, #24]
   b51da:	bf3d      	ittte	cc
   b51dc:	f106 32ff 	addcc.w	r2, r6, #4294967295	; 0xffffffff
   b51e0:	1bd2      	subcc	r2, r2, r7
   b51e2:	b292      	uxthcc	r2, r2
    rlen = readPacket(pbuff, value, timeout);
   b51e4:	fa1f f289 	uxthcs.w	r2, r9
   b51e8:	4641      	mov	r1, r8
   b51ea:	4628      	mov	r0, r5
   b51ec:	47d0      	blx	sl
   b51ee:	b2c0      	uxtb	r0, r0
  return ((pbuff - buffer)+rlen);
   b51f0:	4438      	add	r0, r7
   b51f2:	b280      	uxth	r0, r0
   b51f4:	e7c6      	b.n	b5184 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x20>
	...

000b51f8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b51f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      ERROR_PRINTLN(F("Dropped a packet"));
   b51fc:	f8df 8030 	ldr.w	r8, [pc, #48]	; b5230 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x38>
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b5200:	4605      	mov	r5, r0
   b5202:	460c      	mov	r4, r1
   b5204:	4616      	mov	r6, r2
   b5206:	461f      	mov	r7, r3
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b5208:	463b      	mov	r3, r7
   b520a:	2296      	movs	r2, #150	; 0x96
   b520c:	4621      	mov	r1, r4
   b520e:	4628      	mov	r0, r5
   b5210:	f7ff ffa8 	bl	b5164 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   b5214:	b148      	cbz	r0, b522a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
    if ((buffer[0] >> 4) == waitforpackettype) {
   b5216:	7823      	ldrb	r3, [r4, #0]
   b5218:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   b521c:	d005      	beq.n	b522a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
      ERROR_PRINTLN(F("Dropped a packet"));
   b521e:	f002 fb41 	bl	b78a4 <_Z16_fetch_usbserialv>
   b5222:	4641      	mov	r1, r8
   b5224:	f001 fdf1 	bl	b6e0a <_ZN5Print7printlnEPKc>
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b5228:	e7ee      	b.n	b5208 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x10>
}
   b522a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b522e:	bf00      	nop
   b5230:	000bc3f4 	.word	0x000bc3f4

000b5234 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   switch (code) {
   b5234:	3102      	adds	r1, #2
   b5236:	b2c9      	uxtb	r1, r1
   b5238:	2909      	cmp	r1, #9
   b523a:	bf9a      	itte	ls
   b523c:	4b02      	ldrls	r3, [pc, #8]	; (b5248 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   b523e:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   b5242:	4802      	ldrhi	r0, [pc, #8]	; (b524c <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   b5244:	4770      	bx	lr
   b5246:	bf00      	nop
   b5248:	000bc600 	.word	0x000bc600
   b524c:	000bc405 	.word	0x000bc405

000b5250 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   b5250:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   b5252:	23e0      	movs	r3, #224	; 0xe0
   b5254:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  uint8_t len = disconnectPacket(buffer);
   b5258:	4601      	mov	r1, r0
  packet[1] = 0;
   b525a:	2300      	movs	r3, #0
   b525c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
  if (! sendPacket(buffer, len))
   b5260:	f851 3b22 	ldr.w	r3, [r1], #34
bool Adafruit_MQTT::disconnect() {
   b5264:	4604      	mov	r4, r0
  if (! sendPacket(buffer, len))
   b5266:	695b      	ldr	r3, [r3, #20]
   b5268:	2202      	movs	r2, #2
   b526a:	4798      	blx	r3
  return disconnectServer();
   b526c:	6823      	ldr	r3, [r4, #0]
   b526e:	4620      	mov	r0, r4
   b5270:	691b      	ldr	r3, [r3, #16]
}
   b5272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return disconnectServer();
   b5276:	4718      	bx	r3

000b5278 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b5278:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   b527c:	b530      	push	{r4, r5, lr}
   b527e:	4613      	mov	r3, r2
   b5280:	f100 04d0 	add.w	r4, r0, #208	; 0xd0
    if (subscriptions[i] == sub) {
   b5284:	f853 5b04 	ldr.w	r5, [r3], #4
   b5288:	428d      	cmp	r5, r1
   b528a:	d009      	beq.n	b52a0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x28>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b528c:	42a3      	cmp	r3, r4
   b528e:	d1f9      	bne.n	b5284 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   b5290:	2300      	movs	r3, #0
      if (subscriptions[i] == 0) {
   b5292:	f852 4b04 	ldr.w	r4, [r2], #4
   b5296:	b92c      	cbnz	r4, b52a4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2c>
        subscriptions[i] = sub;
   b5298:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   b529c:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
      return true;
   b52a0:	2001      	movs	r0, #1
   b52a2:	e003      	b.n	b52ac <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b52a4:	3301      	adds	r3, #1
   b52a6:	2b05      	cmp	r3, #5
   b52a8:	d1f3      	bne.n	b5292 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
  return false;
   b52aa:	2000      	movs	r0, #0
}
   b52ac:	bd30      	pop	{r4, r5, pc}

000b52ae <_ZN13Adafruit_MQTT16readSubscriptionEs>:
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b52ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b52b2:	f100 0922 	add.w	r9, r0, #34	; 0x22
   b52b6:	b28b      	uxth	r3, r1
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b52b8:	b085      	sub	sp, #20
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b52ba:	2296      	movs	r2, #150	; 0x96
   b52bc:	4649      	mov	r1, r9
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b52be:	4605      	mov	r5, r0
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b52c0:	f7ff ff50 	bl	b5164 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   b52c4:	4606      	mov	r6, r0
   b52c6:	b1f0      	cbz	r0, b5306 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x58>
  topiclen = buffer[3];
   b52c8:	f895 7025 	ldrb.w	r7, [r5, #37]	; 0x25
   b52cc:	9700      	str	r7, [sp, #0]
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b52ce:	f105 0abc 	add.w	sl, r5, #188	; 0xbc
  topiclen = buffer[3];
   b52d2:	f04f 0800 	mov.w	r8, #0
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   b52d6:	f105 0b26 	add.w	fp, r5, #38	; 0x26
    if (subscriptions[i]) {
   b52da:	f85a 4b04 	ldr.w	r4, [sl], #4
   b52de:	b16c      	cbz	r4, b52fc <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strlen(subscriptions[i]->topic) != topiclen)
   b52e0:	6821      	ldr	r1, [r4, #0]
   b52e2:	9101      	str	r1, [sp, #4]
   b52e4:	4608      	mov	r0, r1
   b52e6:	f004 ff91 	bl	ba20c <strlen>
   b52ea:	42b8      	cmp	r0, r7
   b52ec:	d106      	bne.n	b52fc <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   b52ee:	9901      	ldr	r1, [sp, #4]
   b52f0:	463a      	mov	r2, r7
   b52f2:	4658      	mov	r0, fp
   b52f4:	f004 ff92 	bl	ba21c <strncasecmp>
   b52f8:	2800      	cmp	r0, #0
   b52fa:	d048      	beq.n	b538e <_ZN13Adafruit_MQTT16readSubscriptionEs+0xe0>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b52fc:	f108 0801 	add.w	r8, r8, #1
   b5300:	f1b8 0f05 	cmp.w	r8, #5
   b5304:	d1e9      	bne.n	b52da <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2c>
    return NULL;  // No data available, just quit.
   b5306:	2000      	movs	r0, #0
   b5308:	e03e      	b.n	b5388 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xda>
    packetid = buffer[topiclen+4];
   b530a:	19ea      	adds	r2, r5, r7
   b530c:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
    packetid |= buffer[topiclen+5];
   b5310:	f892 a027 	ldrb.w	sl, [r2, #39]	; 0x27
   b5314:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   b5318:	2214      	movs	r2, #20
   b531a:	2100      	movs	r1, #0
   b531c:	1d60      	adds	r0, r4, #5
   b531e:	f004 ff2c 	bl	ba17a <memset>
  datalen = len - topiclen - packet_id_len - 4;
   b5322:	9b00      	ldr	r3, [sp, #0]
   b5324:	f5c3 447f 	rsb	r4, r3, #65280	; 0xff00
   b5328:	34fc      	adds	r4, #252	; 0xfc
   b532a:	4426      	add	r6, r4
   b532c:	eb05 0888 	add.w	r8, r5, r8, lsl #2
   b5330:	eba6 060b 	sub.w	r6, r6, fp
   b5334:	b2b6      	uxth	r6, r6
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   b5336:	2e15      	cmp	r6, #21
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   b5338:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
   b533c:	f107 0104 	add.w	r1, r7, #4
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   b5340:	bf28      	it	cs
   b5342:	2613      	movcs	r6, #19
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   b5344:	4459      	add	r1, fp
   b5346:	4632      	mov	r2, r6
   b5348:	4449      	add	r1, r9
   b534a:	3005      	adds	r0, #5
   b534c:	f004 fefb 	bl	ba146 <memmove>
  subscriptions[i]->datalen = datalen;
   b5350:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
   b5354:	835e      	strh	r6, [r3, #26]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   b5356:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   b535a:	f003 0306 	and.w	r3, r3, #6
   b535e:	2b02      	cmp	r3, #2
   b5360:	d110      	bne.n	b5384 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xd6>
  packet[1] = 2;
   b5362:	f88d 300d 	strb.w	r3, [sp, #13]
  packet[2] = packetid >> 8;
   b5366:	ea4f 231a 	mov.w	r3, sl, lsr #8
   b536a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (!sendPacket(ackpacket, len))
   b536e:	682b      	ldr	r3, [r5, #0]
  packet[3] = packetid;
   b5370:	f88d a00f 	strb.w	sl, [sp, #15]
  packet[0] = MQTT_CTRL_PUBACK << 4;
   b5374:	2240      	movs	r2, #64	; 0x40
   b5376:	f88d 200c 	strb.w	r2, [sp, #12]
    if (!sendPacket(ackpacket, len))
   b537a:	695b      	ldr	r3, [r3, #20]
   b537c:	2204      	movs	r2, #4
   b537e:	a903      	add	r1, sp, #12
   b5380:	4628      	mov	r0, r5
   b5382:	4798      	blx	r3
  return subscriptions[i];
   b5384:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
}
   b5388:	b005      	add	sp, #20
   b538a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((buffer[0] & 0x6) == 0x2) {
   b538e:	f895 b022 	ldrb.w	fp, [r5, #34]	; 0x22
   b5392:	f00b 0b06 	and.w	fp, fp, #6
   b5396:	f1bb 0f02 	cmp.w	fp, #2
   b539a:	d0b6      	beq.n	b530a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x5c>
  uint16_t packetid=0;
   b539c:	4682      	mov	sl, r0
  uint8_t packet_id_len = 0;
   b539e:	4683      	mov	fp, r0
   b53a0:	e7ba      	b.n	b5318 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x6a>

000b53a2 <_ZN13Adafruit_MQTT4pingEh>:
bool Adafruit_MQTT::ping(uint8_t num) {
   b53a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b53a6:	4604      	mov	r4, r0
   b53a8:	460d      	mov	r5, r1
   b53aa:	f04f 0800 	mov.w	r8, #0
    uint8_t len = pingPacket(buffer);
   b53ae:	f100 0722 	add.w	r7, r0, #34	; 0x22
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   b53b2:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  while (num--) {
   b53b6:	b1e5      	cbz	r5, b53f2 <_ZN13Adafruit_MQTT4pingEh+0x50>
    if (!sendPacket(buffer, len))
   b53b8:	6823      	ldr	r3, [r4, #0]
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   b53ba:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   b53be:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
    if (!sendPacket(buffer, len))
   b53c2:	695b      	ldr	r3, [r3, #20]
   b53c4:	2202      	movs	r2, #2
   b53c6:	4639      	mov	r1, r7
   b53c8:	4620      	mov	r0, r4
   b53ca:	4798      	blx	r3
   b53cc:	4606      	mov	r6, r0
   b53ce:	b168      	cbz	r0, b53ec <_ZN13Adafruit_MQTT4pingEh+0x4a>
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   b53d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b53d4:	220d      	movs	r2, #13
   b53d6:	4639      	mov	r1, r7
   b53d8:	4620      	mov	r0, r4
   b53da:	f7ff ff0d 	bl	b51f8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   b53de:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b53e2:	2bd0      	cmp	r3, #208	; 0xd0
   b53e4:	d102      	bne.n	b53ec <_ZN13Adafruit_MQTT4pingEh+0x4a>
}
   b53e6:	4630      	mov	r0, r6
   b53e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b53ec:	3d01      	subs	r5, #1
   b53ee:	b2ed      	uxtb	r5, r5
   b53f0:	e7e1      	b.n	b53b6 <_ZN13Adafruit_MQTT4pingEh+0x14>
  return false;
   b53f2:	462e      	mov	r6, r5
   b53f4:	e7f7      	b.n	b53e6 <_ZN13Adafruit_MQTT4pingEh+0x44>
	...

000b53f8 <_ZN13Adafruit_MQTT13connectPacketEPh>:
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b53f8:	b538      	push	{r3, r4, r5, lr}
   b53fa:	4605      	mov	r5, r0
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   b53fc:	4608      	mov	r0, r1
   b53fe:	2310      	movs	r3, #16
   b5400:	f800 3b02 	strb.w	r3, [r0], #2
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b5404:	460c      	mov	r4, r1
    p = stringprint(p, "MQTT");
   b5406:	4929      	ldr	r1, [pc, #164]	; (b54ac <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   b5408:	f7ff fe7c 	bl	b5104 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = MQTT_PROTOCOL_LEVEL;
   b540c:	2304      	movs	r3, #4
   b540e:	7003      	strb	r3, [r0, #0]
  p[0] = MQTT_CONN_CLEANSESSION;
   b5410:	2302      	movs	r3, #2
   b5412:	7043      	strb	r3, [r0, #1]
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b5414:	69ab      	ldr	r3, [r5, #24]
   b5416:	b18b      	cbz	r3, b543c <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
   b5418:	781b      	ldrb	r3, [r3, #0]
   b541a:	b17b      	cbz	r3, b543c <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
    p[0] |= MQTT_CONN_WILLFLAG;
   b541c:	2306      	movs	r3, #6
   b541e:	7043      	strb	r3, [r0, #1]
    if(will_qos == 1)
   b5420:	f895 3020 	ldrb.w	r3, [r5, #32]
   b5424:	2b01      	cmp	r3, #1
   b5426:	d139      	bne.n	b549c <_ZN13Adafruit_MQTT13connectPacketEPh+0xa4>
      p[0] |= MQTT_CONN_WILLQOS_1;
   b5428:	230e      	movs	r3, #14
      p[0] |= MQTT_CONN_WILLQOS_2;
   b542a:	7043      	strb	r3, [r0, #1]
    if(will_retain == 1)
   b542c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   b5430:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   b5432:	bf02      	ittt	eq
   b5434:	7843      	ldrbeq	r3, [r0, #1]
   b5436:	f043 0320 	orreq.w	r3, r3, #32
   b543a:	7043      	strbeq	r3, [r0, #1]
  if (pgm_read_byte(username) != 0)
   b543c:	692b      	ldr	r3, [r5, #16]
   b543e:	781b      	ldrb	r3, [r3, #0]
   b5440:	b11b      	cbz	r3, b544a <_ZN13Adafruit_MQTT13connectPacketEPh+0x52>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   b5442:	7843      	ldrb	r3, [r0, #1]
   b5444:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b5448:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   b544a:	696b      	ldr	r3, [r5, #20]
   b544c:	781b      	ldrb	r3, [r3, #0]
   b544e:	b11b      	cbz	r3, b5458 <_ZN13Adafruit_MQTT13connectPacketEPh+0x60>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   b5450:	7843      	ldrb	r3, [r0, #1]
   b5452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   b5456:	7043      	strb	r3, [r0, #1]
  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   b5458:	2301      	movs	r3, #1
   b545a:	7083      	strb	r3, [r0, #2]
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   b545c:	232c      	movs	r3, #44	; 0x2c
   b545e:	70c3      	strb	r3, [r0, #3]
    if (pgm_read_byte(clientid) != 0) {
   b5460:	68e9      	ldr	r1, [r5, #12]
   b5462:	780b      	ldrb	r3, [r1, #0]
   b5464:	b1f3      	cbz	r3, b54a4 <_ZN13Adafruit_MQTT13connectPacketEPh+0xac>
      p = stringprint(p, clientid);
   b5466:	3004      	adds	r0, #4
   b5468:	f7ff fe4c 	bl	b5104 <_ZL11stringprintPhPKct.constprop.0>
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b546c:	69a9      	ldr	r1, [r5, #24]
   b546e:	b131      	cbz	r1, b547e <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
   b5470:	780b      	ldrb	r3, [r1, #0]
   b5472:	b123      	cbz	r3, b547e <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
    p = stringprint(p, will_topic);
   b5474:	f7ff fe46 	bl	b5104 <_ZL11stringprintPhPKct.constprop.0>
    p = stringprint(p, will_payload);
   b5478:	69e9      	ldr	r1, [r5, #28]
   b547a:	f7ff fe43 	bl	b5104 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(username) != 0) {
   b547e:	6929      	ldr	r1, [r5, #16]
   b5480:	780b      	ldrb	r3, [r1, #0]
   b5482:	b10b      	cbz	r3, b5488 <_ZN13Adafruit_MQTT13connectPacketEPh+0x90>
    p = stringprint(p, username);
   b5484:	f7ff fe3e 	bl	b5104 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(password) != 0) {
   b5488:	6969      	ldr	r1, [r5, #20]
   b548a:	780b      	ldrb	r3, [r1, #0]
   b548c:	b10b      	cbz	r3, b5492 <_ZN13Adafruit_MQTT13connectPacketEPh+0x9a>
    p = stringprint(p, password);
   b548e:	f7ff fe39 	bl	b5104 <_ZL11stringprintPhPKct.constprop.0>
  len = p - packet;
   b5492:	1b00      	subs	r0, r0, r4
  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   b5494:	b2c0      	uxtb	r0, r0
   b5496:	1e83      	subs	r3, r0, #2
   b5498:	7063      	strb	r3, [r4, #1]
}
   b549a:	bd38      	pop	{r3, r4, r5, pc}
    else if(will_qos == 2)
   b549c:	2b02      	cmp	r3, #2
   b549e:	d1c5      	bne.n	b542c <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_2;
   b54a0:	231e      	movs	r3, #30
   b54a2:	e7c2      	b.n	b542a <_ZN13Adafruit_MQTT13connectPacketEPh+0x32>
      p[0] = 0x0;
   b54a4:	7103      	strb	r3, [r0, #4]
      p[0] = 0x0;
   b54a6:	7143      	strb	r3, [r0, #5]
      p++;
   b54a8:	3006      	adds	r0, #6
   b54aa:	e7df      	b.n	b546c <_ZN13Adafruit_MQTT13connectPacketEPh+0x74>
   b54ac:	000bc413 	.word	0x000bc413

000b54b0 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b54b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b54b4:	4605      	mov	r5, r0
  len += strlen(topic); // topic length
   b54b6:	4610      	mov	r0, r2
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b54b8:	460e      	mov	r6, r1
   b54ba:	4698      	mov	r8, r3
  len += strlen(topic); // topic length
   b54bc:	9201      	str	r2, [sp, #4]
   b54be:	f004 fea5 	bl	ba20c <strlen>
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b54c2:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b54c6:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
  if(qos > 0) { 
   b54ca:	9901      	ldr	r1, [sp, #4]
  len += strlen(topic); // topic length
   b54cc:	b284      	uxth	r4, r0
  if(qos > 0) { 
   b54ce:	f1b9 0f00 	cmp.w	r9, #0
   b54d2:	d135      	bne.n	b5540 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x90>
  len += strlen(topic); // topic length
   b54d4:	3402      	adds	r4, #2
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b54d6:	ea4f 0349 	mov.w	r3, r9, lsl #1
   b54da:	4630      	mov	r0, r6
    len += 2; // qos packet id
   b54dc:	b2a4      	uxth	r4, r4
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b54de:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  len += bLen; // payload length
   b54e2:	443c      	add	r4, r7
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b54e4:	f800 3b01 	strb.w	r3, [r0], #1
  len += bLen; // payload length
   b54e8:	b2a4      	uxth	r4, r4
    uint8_t encodedByte = len % 128;
   b54ea:	4622      	mov	r2, r4
   b54ec:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    if ( len > 0 ) {
   b54f0:	2a7f      	cmp	r2, #127	; 0x7f
      encodedByte |= 0x80;
   b54f2:	bf88      	it	hi
   b54f4:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
  } while ( len > 0 );
   b54f8:	2a7f      	cmp	r2, #127	; 0x7f
    p[0] = encodedByte;
   b54fa:	f800 3b01 	strb.w	r3, [r0], #1
    len /= 128;
   b54fe:	ea4f 14d4 	mov.w	r4, r4, lsr #7
  } while ( len > 0 );
   b5502:	d8f2      	bhi.n	b54ea <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3a>
  p = stringprint(p, topic);
   b5504:	f7ff fdfe 	bl	b5104 <_ZL11stringprintPhPKct.constprop.0>
   b5508:	4603      	mov	r3, r0
  if(qos > 0) {
   b550a:	f1b9 0f00 	cmp.w	r9, #0
   b550e:	d00c      	beq.n	b552a <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x7a>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   b5510:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b5514:	0a12      	lsrs	r2, r2, #8
   b5516:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   b5518:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b551c:	7042      	strb	r2, [r0, #1]
    packet_id_counter++;
   b551e:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b5522:	3201      	adds	r2, #1
    p+=2;
   b5524:	3302      	adds	r3, #2
    packet_id_counter++;
   b5526:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  memmove(p, data, bLen);
   b552a:	463a      	mov	r2, r7
   b552c:	4641      	mov	r1, r8
   b552e:	4618      	mov	r0, r3
   b5530:	f004 fe09 	bl	ba146 <memmove>
  p+= bLen;
   b5534:	4438      	add	r0, r7
  len = p - packet;
   b5536:	1b80      	subs	r0, r0, r6
}
   b5538:	b280      	uxth	r0, r0
   b553a:	b003      	add	sp, #12
   b553c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    len += 2; // qos packet id
   b5540:	3404      	adds	r4, #4
   b5542:	e7c8      	b.n	b54d6 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>

000b5544 <_ZN13Adafruit_MQTT7publishEPKcPhth>:
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b5544:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5546:	f89d 6018 	ldrb.w	r6, [sp, #24]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b554a:	f100 0522 	add.w	r5, r0, #34	; 0x22
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b554e:	4604      	mov	r4, r0
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b5550:	e9cd 3600 	strd	r3, r6, [sp]
   b5554:	4613      	mov	r3, r2
   b5556:	460a      	mov	r2, r1
   b5558:	4629      	mov	r1, r5
   b555a:	f7ff ffa9 	bl	b54b0 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   b555e:	6823      	ldr	r3, [r4, #0]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b5560:	4602      	mov	r2, r0
  if (!sendPacket(buffer, len))
   b5562:	695b      	ldr	r3, [r3, #20]
   b5564:	4629      	mov	r1, r5
   b5566:	4620      	mov	r0, r4
   b5568:	4798      	blx	r3
   b556a:	b910      	cbnz	r0, b5572 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2e>
    return false;
   b556c:	2000      	movs	r0, #0
}
   b556e:	b002      	add	sp, #8
   b5570:	bd70      	pop	{r4, r5, r6, pc}
  if (qos > 0) {
   b5572:	2e00      	cmp	r6, #0
   b5574:	d0fb      	beq.n	b556e <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   b5576:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b557a:	2296      	movs	r2, #150	; 0x96
   b557c:	4629      	mov	r1, r5
   b557e:	4620      	mov	r0, r4
   b5580:	f7ff fdf0 	bl	b5164 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    if (len != 4)
   b5584:	2804      	cmp	r0, #4
   b5586:	d1f1      	bne.n	b556c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   b5588:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b558c:	091b      	lsrs	r3, r3, #4
   b558e:	2b04      	cmp	r3, #4
   b5590:	d1ec      	bne.n	b556c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    packnum |= buffer[3];
   b5592:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if (packnum != packet_id_counter)
   b5594:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   b5598:	ba5b      	rev16	r3, r3
    packnum++;
   b559a:	3301      	adds	r3, #1
    if (packnum != packet_id_counter)
   b559c:	b29b      	uxth	r3, r3
   b559e:	1ac3      	subs	r3, r0, r3
   b55a0:	4258      	negs	r0, r3
   b55a2:	4158      	adcs	r0, r3
   b55a4:	e7e3      	b.n	b556e <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>

000b55a6 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b55a6:	b530      	push	{r4, r5, lr}
   b55a8:	b085      	sub	sp, #20
   b55aa:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b55ac:	4610      	mov	r0, r2
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b55ae:	461d      	mov	r5, r3
   b55b0:	9103      	str	r1, [sp, #12]
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b55b2:	9202      	str	r2, [sp, #8]
   b55b4:	f004 fe2a 	bl	ba20c <strlen>
   b55b8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b55bc:	b283      	uxth	r3, r0
   b55be:	9500      	str	r5, [sp, #0]
   b55c0:	4620      	mov	r0, r4
   b55c2:	f7ff ffbf 	bl	b5544 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   b55c6:	b005      	add	sp, #20
   b55c8:	bd30      	pop	{r4, r5, pc}

000b55ca <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
                                       uint8_t qos) {
   b55ca:	b538      	push	{r3, r4, r5, lr}
   b55cc:	461d      	mov	r5, r3
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   b55ce:	2382      	movs	r3, #130	; 0x82
   b55d0:	700b      	strb	r3, [r1, #0]
  p[0] = (packet_id_counter >> 8) & 0xFF;
   b55d2:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b55d6:	0a1b      	lsrs	r3, r3, #8
   b55d8:	708b      	strb	r3, [r1, #2]
  p[1] = packet_id_counter & 0xFF;
   b55da:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b55de:	70cb      	strb	r3, [r1, #3]
  packet_id_counter++;
   b55e0:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
                                       uint8_t qos) {
   b55e4:	460c      	mov	r4, r1
  packet_id_counter++;
   b55e6:	3301      	adds	r3, #1
   b55e8:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  p = stringprint(p, topic);
   b55ec:	4611      	mov	r1, r2
   b55ee:	1d20      	adds	r0, r4, #4
   b55f0:	f7ff fd88 	bl	b5104 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = qos;
   b55f4:	f800 5b01 	strb.w	r5, [r0], #1
  len = p - packet;
   b55f8:	1b00      	subs	r0, r0, r4
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   b55fa:	b2c0      	uxtb	r0, r0
   b55fc:	1e83      	subs	r3, r0, #2
   b55fe:	7063      	strb	r3, [r4, #1]
}
   b5600:	bd38      	pop	{r3, r4, r5, pc}

000b5602 <_ZN13Adafruit_MQTT7connectEv>:
int8_t Adafruit_MQTT::connect() {
   b5602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!connectServer())
   b5606:	6803      	ldr	r3, [r0, #0]
   b5608:	68db      	ldr	r3, [r3, #12]
int8_t Adafruit_MQTT::connect() {
   b560a:	4604      	mov	r4, r0
  if (!connectServer())
   b560c:	4798      	blx	r3
   b560e:	2800      	cmp	r0, #0
   b5610:	d04b      	beq.n	b56aa <_ZN13Adafruit_MQTT7connectEv+0xa8>
  uint8_t len = connectPacket(buffer);
   b5612:	f104 0522 	add.w	r5, r4, #34	; 0x22
   b5616:	4629      	mov	r1, r5
   b5618:	4620      	mov	r0, r4
   b561a:	f7ff feed 	bl	b53f8 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   b561e:	6823      	ldr	r3, [r4, #0]
   b5620:	b282      	uxth	r2, r0
   b5622:	695b      	ldr	r3, [r3, #20]
   b5624:	4629      	mov	r1, r5
   b5626:	4620      	mov	r0, r4
   b5628:	4798      	blx	r3
   b562a:	2800      	cmp	r0, #0
   b562c:	d03d      	beq.n	b56aa <_ZN13Adafruit_MQTT7connectEv+0xa8>
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   b562e:	f241 7370 	movw	r3, #6000	; 0x1770
   b5632:	2296      	movs	r2, #150	; 0x96
   b5634:	4629      	mov	r1, r5
   b5636:	4620      	mov	r0, r4
   b5638:	f7ff fd94 	bl	b5164 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   b563c:	b2c0      	uxtb	r0, r0
   b563e:	2804      	cmp	r0, #4
   b5640:	d133      	bne.n	b56aa <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   b5642:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b5644:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   b5648:	d12f      	bne.n	b56aa <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if (buffer[3] != 0)
   b564a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   b564e:	b110      	cbz	r0, b5656 <_ZN13Adafruit_MQTT7connectEv+0x54>
    return buffer[3];
   b5650:	b240      	sxtb	r0, r0
}
   b5652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5656:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
   b565a:	f104 08d0 	add.w	r8, r4, #208	; 0xd0
    if (subscriptions[i] == 0) continue;
   b565e:	f857 3b04 	ldr.w	r3, [r7], #4
   b5662:	b1f3      	cbz	r3, b56a2 <_ZN13Adafruit_MQTT7connectEv+0xa0>
   b5664:	2603      	movs	r6, #3
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   b5666:	f857 2c04 	ldr.w	r2, [r7, #-4]
   b566a:	4629      	mov	r1, r5
   b566c:	7913      	ldrb	r3, [r2, #4]
   b566e:	6812      	ldr	r2, [r2, #0]
   b5670:	4620      	mov	r0, r4
   b5672:	f7ff ffaa 	bl	b55ca <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   b5676:	6823      	ldr	r3, [r4, #0]
   b5678:	b282      	uxth	r2, r0
   b567a:	695b      	ldr	r3, [r3, #20]
   b567c:	4629      	mov	r1, r5
   b567e:	4620      	mov	r0, r4
   b5680:	4798      	blx	r3
   b5682:	b190      	cbz	r0, b56aa <_ZN13Adafruit_MQTT7connectEv+0xa8>
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   b5684:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b5688:	2209      	movs	r2, #9
   b568a:	4629      	mov	r1, r5
   b568c:	4620      	mov	r0, r4
   b568e:	f7ff fdb3 	bl	b51f8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   b5692:	b930      	cbnz	r0, b56a2 <_ZN13Adafruit_MQTT7connectEv+0xa0>
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   b5694:	3e01      	subs	r6, #1
   b5696:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b569a:	d1e4      	bne.n	b5666 <_ZN13Adafruit_MQTT7connectEv+0x64>
    if (! success) return -2; // failed to sub for some reason
   b569c:	f06f 0001 	mvn.w	r0, #1
   b56a0:	e7d7      	b.n	b5652 <_ZN13Adafruit_MQTT7connectEv+0x50>
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   b56a2:	45b8      	cmp	r8, r7
   b56a4:	d1db      	bne.n	b565e <_ZN13Adafruit_MQTT7connectEv+0x5c>
  return 0;
   b56a6:	2000      	movs	r0, #0
   b56a8:	e7d3      	b.n	b5652 <_ZN13Adafruit_MQTT7connectEv+0x50>
    return -1;
   b56aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b56ae:	e7d0      	b.n	b5652 <_ZN13Adafruit_MQTT7connectEv+0x50>

000b56b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   b56b0:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   b56b2:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   b56b6:	7203      	strb	r3, [r0, #8]
}
   b56b8:	bd10      	pop	{r4, pc}

000b56ba <_ZN21Adafruit_MQTT_Publish7publishEi>:

bool Adafruit_MQTT_Publish::publish(int i) {
   b56ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b56bc:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   b56be:	220a      	movs	r2, #10
bool Adafruit_MQTT_Publish::publish(int i) {
   b56c0:	4608      	mov	r0, r1
  ltoa(i, payload, 10);
   b56c2:	a901      	add	r1, sp, #4
   b56c4:	f002 f952 	bl	b796c <ltoa>
  return mqtt->publish(topic, payload, qos);
   b56c8:	e9d4 0100 	ldrd	r0, r1, [r4]
   b56cc:	7a23      	ldrb	r3, [r4, #8]
   b56ce:	aa01      	add	r2, sp, #4
   b56d0:	f7ff ff69 	bl	b55a6 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   b56d4:	b004      	add	sp, #16
   b56d6:	bd10      	pop	{r4, pc}

000b56d8 <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   b56d8:	b5d0      	push	{r4, r6, r7, lr}
   b56da:	ec57 6b10 	vmov	r6, r7, d0
   b56de:	b090      	sub	sp, #64	; 0x40
   b56e0:	4604      	mov	r4, r0
   b56e2:	460b      	mov	r3, r1
  sprintf(fmt, "%%%d.%df", width, prec);
   b56e4:	2200      	movs	r2, #0
   b56e6:	4909      	ldr	r1, [pc, #36]	; (b570c <_ZN21Adafruit_MQTT_Publish7publishEdh+0x34>)
   b56e8:	4668      	mov	r0, sp
   b56ea:	f001 f907 	bl	b68fc <sprintf>
  sprintf(sout, fmt, val);
   b56ee:	4632      	mov	r2, r6
   b56f0:	463b      	mov	r3, r7
   b56f2:	4669      	mov	r1, sp
   b56f4:	a805      	add	r0, sp, #20
   b56f6:	f001 f901 	bl	b68fc <sprintf>
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   b56fa:	e9d4 0100 	ldrd	r0, r1, [r4]
   b56fe:	7a23      	ldrb	r3, [r4, #8]
   b5700:	aa05      	add	r2, sp, #20
   b5702:	f7ff ff50 	bl	b55a6 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   b5706:	b010      	add	sp, #64	; 0x40
   b5708:	bdd0      	pop	{r4, r6, r7, pc}
   b570a:	bf00      	nop
   b570c:	000bc418 	.word	0x000bc418

000b5710 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   b5710:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   b5712:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   b5714:	2300      	movs	r3, #0
  callback_uint32t = 0;
  callback_buffer = 0;
  callback_double = 0;
   b5716:	e9c0 3308 	strd	r3, r3, [r0, #32]
  callback_io = 0;
   b571a:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  mqtt = mqttserver;
   b571e:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   b5720:	6002      	str	r2, [r0, #0]
  datalen = 0;
   b5722:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   b5724:	61c3      	str	r3, [r0, #28]
  io_feed = 0;
   b5726:	6303      	str	r3, [r0, #48]	; 0x30
}
   b5728:	bd10      	pop	{r4, pc}

000b572a <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   b572a:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   b572c:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b5730:	6803      	ldr	r3, [r0, #0]
   b5732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5734:	4798      	blx	r3
}
   b5736:	3800      	subs	r0, #0
   b5738:	bf18      	it	ne
   b573a:	2001      	movne	r0, #1
   b573c:	bd08      	pop	{r3, pc}

000b573e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   b573e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5740:	4606      	mov	r6, r0
   b5742:	460f      	mov	r7, r1
   b5744:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   b5746:	b1c4      	cbz	r4, b577a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   b5748:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b574c:	6803      	ldr	r3, [r0, #0]
   b574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5750:	4798      	blx	r3
   b5752:	b908      	cbnz	r0, b5758 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   b5754:	2000      	movs	r0, #0
    }
  }
  return true;
}
   b5756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   b5758:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   b575c:	2cfa      	cmp	r4, #250	; 0xfa
   b575e:	6803      	ldr	r3, [r0, #0]
   b5760:	4625      	mov	r5, r4
   b5762:	bfa8      	it	ge
   b5764:	25fa      	movge	r5, #250	; 0xfa
   b5766:	68db      	ldr	r3, [r3, #12]
   b5768:	462a      	mov	r2, r5
   b576a:	4639      	mov	r1, r7
   b576c:	4798      	blx	r3
   b576e:	b283      	uxth	r3, r0
      len -= ret;
   b5770:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   b5772:	429d      	cmp	r5, r3
      len -= ret;
   b5774:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   b5776:	d0e6      	beq.n	b5746 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   b5778:	e7ec      	b.n	b5754 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   b577a:	2001      	movs	r0, #1
   b577c:	e7eb      	b.n	b5756 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000b577e <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   b577e:	4770      	bx	lr

000b5780 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   b5780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5784:	4606      	mov	r6, r0
   b5786:	4688      	mov	r8, r1
   b5788:	4691      	mov	r9, r2
   b578a:	461f      	mov	r7, r3
   b578c:	461d      	mov	r5, r3
  uint16_t len = 0;
   b578e:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   b5790:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b5794:	6803      	ldr	r3, [r0, #0]
   b5796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5798:	4798      	blx	r3
   b579a:	b1d0      	cbz	r0, b57d2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   b579c:	2d00      	cmp	r5, #0
   b579e:	db18      	blt.n	b57d2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   b57a0:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b57a4:	6803      	ldr	r3, [r0, #0]
   b57a6:	691b      	ldr	r3, [r3, #16]
   b57a8:	4798      	blx	r3
   b57aa:	b160      	cbz	r0, b57c6 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   b57ac:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b57b0:	6803      	ldr	r3, [r0, #0]
   b57b2:	695b      	ldr	r3, [r3, #20]
   b57b4:	4798      	blx	r3
   b57b6:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   b57ba:	3401      	adds	r4, #1
   b57bc:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   b57be:	454c      	cmp	r4, r9
   b57c0:	d007      	beq.n	b57d2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   b57c2:	463d      	mov	r5, r7
   b57c4:	e7ec      	b.n	b57a0 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b57c6:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b57c8:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b57ca:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b57cc:	f001 f8c6 	bl	b695c <delay>
  while (client->connected() && (timeout >= 0)) {
   b57d0:	e7de      	b.n	b5790 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   b57d2:	4620      	mov	r0, r4
   b57d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b57d8 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   b57d8:	b570      	push	{r4, r5, r6, lr}
   b57da:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   b57dc:	f100 0522 	add.w	r5, r0, #34	; 0x22
   b57e0:	2296      	movs	r2, #150	; 0x96
   b57e2:	2100      	movs	r1, #0
   b57e4:	4628      	mov	r0, r5
   b57e6:	f004 fcc8 	bl	ba17a <memset>
  strcpy((char *)buffer, servername);
   b57ea:	6861      	ldr	r1, [r4, #4]
   b57ec:	4628      	mov	r0, r5
   b57ee:	f004 fd05 	bl	ba1fc <strcpy>
  int r = client->connect((char *)buffer, portnum);
   b57f2:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b57f6:	8922      	ldrh	r2, [r4, #8]
   b57f8:	6803      	ldr	r3, [r0, #0]
   b57fa:	4629      	mov	r1, r5
   b57fc:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   b57fe:	2300      	movs	r3, #0
   b5800:	47b0      	blx	r6
}
   b5802:	3800      	subs	r0, #0
   b5804:	bf18      	it	ne
   b5806:	2001      	movne	r0, #1
   b5808:	bd70      	pop	{r4, r5, r6, pc}

000b580a <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   b580a:	b510      	push	{r4, lr}
   b580c:	21d4      	movs	r1, #212	; 0xd4
   b580e:	4604      	mov	r4, r0
   b5810:	f7fe fc45 	bl	b409e <_ZdlPvj>
   b5814:	4620      	mov	r0, r4
   b5816:	bd10      	pop	{r4, pc}

000b5818 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   b5818:	b510      	push	{r4, lr}
   b581a:	4604      	mov	r4, r0
  if (client->connected()) {
   b581c:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b5820:	6803      	ldr	r3, [r0, #0]
   b5822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5824:	4798      	blx	r3
   b5826:	b120      	cbz	r0, b5832 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   b5828:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b582c:	6803      	ldr	r3, [r0, #0]
   b582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5830:	4798      	blx	r3
}
   b5832:	2001      	movs	r0, #1
   b5834:	bd10      	pop	{r4, pc}

000b5836 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
{
   b5836:	b570      	push	{r4, r5, r6, lr}
    if (!connected())
   b5838:	6803      	ldr	r3, [r0, #0]
   b583a:	689b      	ldr	r3, [r3, #8]
{
   b583c:	4604      	mov	r4, r0
    if (!connected())
   b583e:	4798      	blx	r3
   b5840:	b9c8      	cbnz	r0, b5876 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b5842:	4620      	mov	r0, r4
   b5844:	f7ff fedd 	bl	b5602 <_ZN13Adafruit_MQTT7connectEv>
   b5848:	2504      	movs	r5, #4
   b584a:	b170      	cbz	r0, b586a <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   b584c:	3d01      	subs	r5, #1
   b584e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5852:	d00a      	beq.n	b586a <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
            disconnect();
   b5854:	4620      	mov	r0, r4
   b5856:	f7ff fcfb 	bl	b5250 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   b585a:	f241 3088 	movw	r0, #5000	; 0x1388
   b585e:	f001 f87d 	bl	b695c <delay>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b5862:	4620      	mov	r0, r4
   b5864:	f7ff fecd 	bl	b5602 <_ZN13Adafruit_MQTT7connectEv>
   b5868:	e7ef      	b.n	b584a <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
        if( connected() )
   b586a:	6823      	ldr	r3, [r4, #0]
   b586c:	4620      	mov	r0, r4
   b586e:	689b      	ldr	r3, [r3, #8]
}
   b5870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if( connected() )
   b5874:	4718      	bx	r3
}
   b5876:	bd70      	pop	{r4, r5, r6, pc}

000b5878 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b5878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b587c:	b085      	sub	sp, #20
   b587e:	461f      	mov	r7, r3
   b5880:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5884:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5888:	eba8 0902 	sub.w	r9, r8, r2
   b588c:	eba7 0a01 	sub.w	sl, r7, r1
   b5890:	f1b9 0f00 	cmp.w	r9, #0
   b5894:	bfb8      	it	lt
   b5896:	f1c9 0900 	rsblt	r9, r9, #0
   b589a:	f1ba 0f00 	cmp.w	sl, #0
   b589e:	bfb8      	it	lt
   b58a0:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b58a4:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b58a6:	4683      	mov	fp, r0
   b58a8:	460c      	mov	r4, r1
   b58aa:	4615      	mov	r5, r2
  if (steep) {
   b58ac:	dd04      	ble.n	b58b8 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b58ae:	463a      	mov	r2, r7
    swap(x0, y0);
   b58b0:	462c      	mov	r4, r5
    swap(x1, y1);
   b58b2:	4647      	mov	r7, r8
    swap(x0, y0);
   b58b4:	460d      	mov	r5, r1
    swap(x1, y1);
   b58b6:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b58b8:	42bc      	cmp	r4, r7
   b58ba:	dd05      	ble.n	b58c8 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b58bc:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b58be:	4645      	mov	r5, r8
   b58c0:	4690      	mov	r8, r2
  if (x0 > x1) {
   b58c2:	4622      	mov	r2, r4
   b58c4:	463c      	mov	r4, r7
   b58c6:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b58c8:	1b3e      	subs	r6, r7, r4
   b58ca:	b2b2      	uxth	r2, r6
   b58cc:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b58ce:	eba8 0205 	sub.w	r2, r8, r5
   b58d2:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b58d6:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b58da:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b58de:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b58e2:	4545      	cmp	r5, r8
   b58e4:	bfb4      	ite	lt
   b58e6:	2201      	movlt	r2, #1
   b58e8:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b58ec:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b58ee:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b58f0:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b58f2:	42bc      	cmp	r4, r7
   b58f4:	dc1c      	bgt.n	b5930 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b58f6:	f8db 2000 	ldr.w	r2, [fp]
   b58fa:	9303      	str	r3, [sp, #12]
    if (steep) {
   b58fc:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b58fe:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b5902:	bfc7      	ittee	gt
   b5904:	4629      	movgt	r1, r5
   b5906:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b5908:	462a      	movle	r2, r5
   b590a:	4621      	movle	r1, r4
   b590c:	4658      	mov	r0, fp
   b590e:	47c0      	blx	r8
    }
    err -= dy;
   b5910:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b5912:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b5914:	1ab6      	subs	r6, r6, r2
   b5916:	b2b1      	uxth	r1, r6
   b5918:	b236      	sxth	r6, r6
    if (err < 0) {
   b591a:	2e00      	cmp	r6, #0
   b591c:	da05      	bge.n	b592a <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b591e:	9a02      	ldr	r2, [sp, #8]
   b5920:	4415      	add	r5, r2
      err += dx;
   b5922:	9a00      	ldr	r2, [sp, #0]
   b5924:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b5926:	b22d      	sxth	r5, r5
      err += dx;
   b5928:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b592a:	3401      	adds	r4, #1
   b592c:	b224      	sxth	r4, r4
   b592e:	e7e0      	b.n	b58f2 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b5930:	b005      	add	sp, #20
   b5932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5936 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b5936:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b593a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b593e:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b5940:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b5944:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b5948:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b594a:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b594c:	4616      	mov	r6, r2
   b594e:	468a      	mov	sl, r1
   b5950:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b5952:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b5954:	6823      	ldr	r3, [r4, #0]
   b5956:	f8cd 8000 	str.w	r8, [sp]
   b595a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b595e:	4432      	add	r2, r6
   b5960:	69df      	ldr	r7, [r3, #28]
   b5962:	4651      	mov	r1, sl
   b5964:	462b      	mov	r3, r5
   b5966:	4620      	mov	r0, r4
   b5968:	b212      	sxth	r2, r2
   b596a:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b596c:	6823      	ldr	r3, [r4, #0]
   b596e:	f8cd 8000 	str.w	r8, [sp]
   b5972:	699f      	ldr	r7, [r3, #24]
   b5974:	4632      	mov	r2, r6
   b5976:	464b      	mov	r3, r9
   b5978:	4651      	mov	r1, sl
   b597a:	4620      	mov	r0, r4
   b597c:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b597e:	1e6b      	subs	r3, r5, #1
   b5980:	eb03 010a 	add.w	r1, r3, sl
   b5984:	6823      	ldr	r3, [r4, #0]
   b5986:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b598a:	699d      	ldr	r5, [r3, #24]
   b598c:	4632      	mov	r2, r6
   b598e:	464b      	mov	r3, r9
   b5990:	b209      	sxth	r1, r1
   b5992:	4620      	mov	r0, r4
   b5994:	46ac      	mov	ip, r5
}
   b5996:	b002      	add	sp, #8
   b5998:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b599c:	4760      	bx	ip

000b599e <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b599e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b59a0:	3b01      	subs	r3, #1
   b59a2:	4413      	add	r3, r2
   b59a4:	6804      	ldr	r4, [r0, #0]
   b59a6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b59aa:	9501      	str	r5, [sp, #4]
   b59ac:	b21b      	sxth	r3, r3
   b59ae:	9300      	str	r3, [sp, #0]
   b59b0:	6964      	ldr	r4, [r4, #20]
   b59b2:	460b      	mov	r3, r1
   b59b4:	47a0      	blx	r4
}
   b59b6:	b003      	add	sp, #12
   b59b8:	bd30      	pop	{r4, r5, pc}

000b59ba <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b59ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b59bc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b59c0:	6804      	ldr	r4, [r0, #0]
   b59c2:	e9cd 2500 	strd	r2, r5, [sp]
   b59c6:	3b01      	subs	r3, #1
   b59c8:	440b      	add	r3, r1
   b59ca:	6964      	ldr	r4, [r4, #20]
   b59cc:	b21b      	sxth	r3, r3
   b59ce:	47a0      	blx	r4
}
   b59d0:	b003      	add	sp, #12
   b59d2:	bd30      	pop	{r4, r5, pc}

000b59d4 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b59d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b59d8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b59dc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b59e0:	4605      	mov	r5, r0
   b59e2:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b59e4:	460c      	mov	r4, r1
   b59e6:	18ce      	adds	r6, r1, r3
   b59e8:	42b4      	cmp	r4, r6
   b59ea:	da0b      	bge.n	b5a04 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b59ec:	682b      	ldr	r3, [r5, #0]
   b59ee:	f8cd 8000 	str.w	r8, [sp]
   b59f2:	699f      	ldr	r7, [r3, #24]
   b59f4:	4621      	mov	r1, r4
   b59f6:	464b      	mov	r3, r9
   b59f8:	4652      	mov	r2, sl
   b59fa:	4628      	mov	r0, r5
   b59fc:	3401      	adds	r4, #1
   b59fe:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b5a00:	b224      	sxth	r4, r4
   b5a02:	e7f1      	b.n	b59e8 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b5a04:	b002      	add	sp, #8
   b5a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5a0a <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b5a0a:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5a0c:	6802      	ldr	r2, [r0, #0]
   b5a0e:	9101      	str	r1, [sp, #4]
   b5a10:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5a14:	9100      	str	r1, [sp, #0]
   b5a16:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b5a18:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5a1c:	2200      	movs	r2, #0
   b5a1e:	4611      	mov	r1, r2
   b5a20:	47a0      	blx	r4
}
   b5a22:	b002      	add	sp, #8
   b5a24:	bd10      	pop	{r4, pc}

000b5a26 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b5a26:	4770      	bx	lr

000b5a28 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5a28:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b5a2a:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5a2c:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b5a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b5a32:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b5a34:	4d05      	ldr	r5, [pc, #20]	; (b5a4c <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b5a36:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b5a38:	2201      	movs	r2, #1
   b5a3a:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5a3c:	6005      	str	r5, [r0, #0]
   b5a3e:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b5a40:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b5a42:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b5a44:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b5a46:	7682      	strb	r2, [r0, #26]
}
   b5a48:	bd30      	pop	{r4, r5, pc}
   b5a4a:	bf00      	nop
   b5a4c:	000bcb50 	.word	0x000bcb50

000b5a50 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a54:	ed2d 8b02 	vpush	{d8}
   b5a58:	b08d      	sub	sp, #52	; 0x34
   b5a5a:	4607      	mov	r7, r0
   b5a5c:	9104      	str	r1, [sp, #16]
   b5a5e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b5a62:	9105      	str	r1, [sp, #20]
   b5a64:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b5a68:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b5a6a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b5a6e:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5a70:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b5a74:	4281      	cmp	r1, r0
   b5a76:	dd52      	ble.n	b5b1e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b5a78:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b5a7c:	4291      	cmp	r1, r2
   b5a7e:	dd4e      	ble.n	b5b1e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b5a80:	2106      	movs	r1, #6
   b5a82:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b5a86:	2c00      	cmp	r4, #0
   b5a88:	dd49      	ble.n	b5b1e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b5a8a:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b5a8e:	2c00      	cmp	r4, #0
   b5a90:	dd45      	ble.n	b5b1e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b5a92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5a96:	930b      	str	r3, [sp, #44]	; 0x2c
   b5a98:	b293      	uxth	r3, r2
   b5a9a:	9307      	str	r3, [sp, #28]
   b5a9c:	3308      	adds	r3, #8
   b5a9e:	b29b      	uxth	r3, r3
   b5aa0:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b5aa2:	2400      	movs	r4, #0
   b5aa4:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b5aa6:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b5aa8:	bf1c      	itt	ne
   b5aaa:	4b2c      	ldrne	r3, [pc, #176]	; (b5b5c <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b5aac:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b5aae:	9e07      	ldr	r6, [sp, #28]
   b5ab0:	bf16      	itet	ne
   b5ab2:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5ab4:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b5ab6:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b5ab8:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5aba:	9a04      	ldr	r2, [sp, #16]
   b5abc:	b2ab      	uxth	r3, r5
   b5abe:	930a      	str	r3, [sp, #40]	; 0x28
   b5ac0:	fb04 f305 	mul.w	r3, r4, r5
   b5ac4:	fa13 f382 	uxtah	r3, r3, r2
   b5ac8:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b5aca:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5ace:	ee08 3a10 	vmov	s16, r3
   b5ad2:	46b0      	mov	r8, r6
   b5ad4:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b5ad8:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b5adc:	9b03      	ldr	r3, [sp, #12]
   b5ade:	07db      	lsls	r3, r3, #31
   b5ae0:	d52f      	bpl.n	b5b42 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b5ae2:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5ae4:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5ae6:	d11f      	bne.n	b5b28 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b5ae8:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5aec:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b5aee:	b232      	sxth	r2, r6
   b5af0:	4651      	mov	r1, sl
   b5af2:	4638      	mov	r0, r7
   b5af4:	47d8      	blx	fp
      line >>= 1;
   b5af6:	9b03      	ldr	r3, [sp, #12]
   b5af8:	085b      	lsrs	r3, r3, #1
   b5afa:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b5afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5afe:	3601      	adds	r6, #1
   b5b00:	4498      	add	r8, r3
   b5b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5b04:	b2b6      	uxth	r6, r6
   b5b06:	42b3      	cmp	r3, r6
   b5b08:	fa1f f888 	uxth.w	r8, r8
   b5b0c:	d1e6      	bne.n	b5adc <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b5b0e:	9b08      	ldr	r3, [sp, #32]
   b5b10:	3b01      	subs	r3, #1
   b5b12:	3401      	adds	r4, #1
   b5b14:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5b18:	b264      	sxtb	r4, r4
   b5b1a:	9308      	str	r3, [sp, #32]
   b5b1c:	d1c3      	bne.n	b5aa6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b5b1e:	b00d      	add	sp, #52	; 0x34
   b5b20:	ecbd 8b02 	vpop	{d8}
   b5b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b5b28:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5b2a:	e9cd 9200 	strd	r9, r2, [sp]
   b5b2e:	ee18 1a10 	vmov	r1, s16
   b5b32:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b5b36:	fa0f f288 	sxth.w	r2, r8
   b5b3a:	464b      	mov	r3, r9
   b5b3c:	4638      	mov	r0, r7
   b5b3e:	47d8      	blx	fp
   b5b40:	e7d9      	b.n	b5af6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b5b42:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b5b46:	4293      	cmp	r3, r2
   b5b48:	d0d5      	beq.n	b5af6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b5b4a:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5b4c:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5b4e:	d103      	bne.n	b5b58 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5b50:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5b54:	9b06      	ldr	r3, [sp, #24]
   b5b56:	e7ca      	b.n	b5aee <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5b58:	9a06      	ldr	r2, [sp, #24]
   b5b5a:	e7e6      	b.n	b5b2a <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5b5c:	000bc64c 	.word	0x000bc64c

000b5b60 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5b60:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b5b62:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5b64:	b085      	sub	sp, #20
   b5b66:	4604      	mov	r4, r0
  if (c == '\n') {
   b5b68:	d107      	bne.n	b5b7a <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b5b6a:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5b6c:	8a63      	ldrh	r3, [r4, #18]
   b5b6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b5b72:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5b74:	2300      	movs	r3, #0
   b5b76:	8223      	strh	r3, [r4, #16]
   b5b78:	e021      	b.n	b5bbe <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b5b7a:	290d      	cmp	r1, #13
   b5b7c:	d01f      	beq.n	b5bbe <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b5b7e:	7e03      	ldrb	r3, [r0, #24]
   b5b80:	9302      	str	r3, [sp, #8]
   b5b82:	8ac3      	ldrh	r3, [r0, #22]
   b5b84:	9301      	str	r3, [sp, #4]
   b5b86:	8a83      	ldrh	r3, [r0, #20]
   b5b88:	9300      	str	r3, [sp, #0]
   b5b8a:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b5b8e:	460b      	mov	r3, r1
   b5b90:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5b94:	f7ff ff5c 	bl	b5a50 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5b98:	7e20      	ldrb	r0, [r4, #24]
   b5b9a:	8a23      	ldrh	r3, [r4, #16]
   b5b9c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5ba0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5ba4:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b5ba6:	b21b      	sxth	r3, r3
   b5ba8:	4602      	mov	r2, r0
   b5baa:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5bac:	b139      	cbz	r1, b5bbe <_ZN12Adafruit_GFX5writeEh+0x5e>
   b5bae:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b5bb2:	f06f 0505 	mvn.w	r5, #5
   b5bb6:	fb05 1100 	mla	r1, r5, r0, r1
   b5bba:	428b      	cmp	r3, r1
   b5bbc:	dcd6      	bgt.n	b5b6c <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b5bbe:	2001      	movs	r0, #1
   b5bc0:	b005      	add	sp, #20
   b5bc2:	bd30      	pop	{r4, r5, pc}

000b5bc4 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b5bc4:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b5bc6:	8242      	strh	r2, [r0, #18]
}
   b5bc8:	4770      	bx	lr

000b5bca <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b5bca:	2901      	cmp	r1, #1
   b5bcc:	bf38      	it	cc
   b5bce:	2101      	movcc	r1, #1
   b5bd0:	7601      	strb	r1, [r0, #24]
}
   b5bd2:	4770      	bx	lr

000b5bd4 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b5bd4:	82c1      	strh	r1, [r0, #22]
   b5bd6:	8281      	strh	r1, [r0, #20]
}
   b5bd8:	4770      	bx	lr

000b5bda <_ZN12Adafruit_GFX11getRotationEv>:
}
   b5bda:	7e40      	ldrb	r0, [r0, #25]
   b5bdc:	4770      	bx	lr

000b5bde <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b5bde:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b5be2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b5be6:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   b5be8:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   b5bea:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5bee:	bf59      	ittee	pl
   b5bf0:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b5bf2:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   b5bf4:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b5bf6:	81c3      	strhmi	r3, [r0, #14]
}
   b5bf8:	4770      	bx	lr

000b5bfa <_ZN12Adafruit_GFX5widthEv>:
}
   b5bfa:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b5bfe:	4770      	bx	lr

000b5c00 <_ZN12Adafruit_GFX6heightEv>:
}
   b5c00:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5c04:	4770      	bx	lr
	...

000b5c08 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5c08:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b5c0a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5c0c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5c10:	2d02      	cmp	r5, #2
   b5c12:	d069      	beq.n	b5ce8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b5c14:	2d03      	cmp	r5, #3
   b5c16:	f000 8099 	beq.w	b5d4c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b5c1a:	2d01      	cmp	r5, #1
   b5c1c:	d16c      	bne.n	b5cf8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b5c1e:	8905      	ldrh	r5, [r0, #8]
   b5c20:	43d2      	mvns	r2, r2
   b5c22:	442a      	add	r2, r5
   b5c24:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b5c26:	2a00      	cmp	r2, #0
   b5c28:	db5d      	blt.n	b5ce6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5c2a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b5c2e:	4295      	cmp	r5, r2
   b5c30:	dd59      	ble.n	b5ce6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b5c32:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b5c34:	bfbe      	ittt	lt
   b5c36:	185b      	addlt	r3, r3, r1
   b5c38:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5c3a:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b5c3c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5c40:	18cd      	adds	r5, r1, r3
   b5c42:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5c44:	bfc4      	itt	gt
   b5c46:	1a43      	subgt	r3, r0, r1
   b5c48:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b5c4a:	2b00      	cmp	r3, #0
   b5c4c:	dd4b      	ble.n	b5ce6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b5c4e:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b5c52:	f8df c120 	ldr.w	ip, [pc, #288]	; b5d74 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b5c56:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b5c5a:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b5c5e:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5c60:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b5c64:	d01a      	beq.n	b5c9c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b5c66:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b5c6a:	4e40      	ldr	r6, [pc, #256]	; (b5d6c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b5c6c:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b5c6e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5c70:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5c72:	bf3f      	itttt	cc
   b5c74:	eba5 0e03 	subcc.w	lr, r5, r3
   b5c78:	26ff      	movcc	r6, #255	; 0xff
   b5c7a:	fa46 f60e 	asrcc.w	r6, r6, lr
   b5c7e:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b5c80:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b5c84:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5c86:	bf0c      	ite	eq
   b5c88:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b5c8a:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b5c8c:	42ab      	cmp	r3, r5
   b5c8e:	f80c 6002 	strb.w	r6, [ip, r2]
   b5c92:	d328      	bcc.n	b5ce6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b5c94:	3908      	subs	r1, #8
   b5c96:	440b      	add	r3, r1
   b5c98:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b5c9a:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b5c9c:	2b07      	cmp	r3, #7
   b5c9e:	d919      	bls.n	b5cd4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5ca0:	2c01      	cmp	r4, #1
   b5ca2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b5ca6:	bf18      	it	ne
   b5ca8:	2500      	movne	r5, #0
   b5caa:	b2ed      	uxtb	r5, r5
   b5cac:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5cb0:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b5cb2:	3a08      	subs	r2, #8
   b5cb4:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b5cb6:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5cb8:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5cbc:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5cc0:	d8f7      	bhi.n	b5cb2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b5cc2:	f1a3 0208 	sub.w	r2, r3, #8
   b5cc6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b5cca:	3201      	adds	r2, #1
   b5ccc:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5cd0:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b5cd4:	b13b      	cbz	r3, b5ce6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b5cd6:	4a26      	ldr	r2, [pc, #152]	; (b5d70 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b5cd8:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b5cda:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5cdc:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5cde:	bf0c      	ite	eq
   b5ce0:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b5ce2:	4393      	bicne	r3, r2
   b5ce4:	7003      	strb	r3, [r0, #0]
}
   b5ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5ce8:	8945      	ldrh	r5, [r0, #10]
   b5cea:	43d2      	mvns	r2, r2
   b5cec:	442a      	add	r2, r5
      x -= (w-1);
   b5cee:	18cd      	adds	r5, r1, r3
   b5cf0:	8901      	ldrh	r1, [r0, #8]
   b5cf2:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b5cf4:	b212      	sxth	r2, r2
      x -= (w-1);
   b5cf6:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b5cf8:	2a00      	cmp	r2, #0
   b5cfa:	dbf4      	blt.n	b5ce6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5cfc:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5d00:	4295      	cmp	r5, r2
   b5d02:	ddf0      	ble.n	b5ce6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b5d04:	2900      	cmp	r1, #0
    w += x;
   b5d06:	bfbe      	ittt	lt
   b5d08:	185b      	addlt	r3, r3, r1
   b5d0a:	b21b      	sxthlt	r3, r3
    x = 0;
   b5d0c:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b5d0e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5d12:	18ce      	adds	r6, r1, r3
   b5d14:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5d16:	bfc4      	itt	gt
   b5d18:	1a6b      	subgt	r3, r5, r1
   b5d1a:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5d1c:	2b00      	cmp	r3, #0
   b5d1e:	dde2      	ble.n	b5ce6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5d20:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b5d22:	2580      	movs	r5, #128	; 0x80
   b5d24:	fb10 1105 	smlabb	r1, r0, r5, r1
   b5d28:	4812      	ldr	r0, [pc, #72]	; (b5d74 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b5d2a:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b5d2c:	f002 0007 	and.w	r0, r2, #7
   b5d30:	2201      	movs	r2, #1
   b5d32:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b5d34:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b5d36:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b5d38:	440b      	add	r3, r1
   b5d3a:	d10c      	bne.n	b5d56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b5d3c:	428b      	cmp	r3, r1
   b5d3e:	d0d2      	beq.n	b5ce6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5d40:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5d44:	4310      	orrs	r0, r2
   b5d46:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5d4a:	e7f7      	b.n	b5d3c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b5d4c:	18cd      	adds	r5, r1, r3
   b5d4e:	8941      	ldrh	r1, [r0, #10]
   b5d50:	1b49      	subs	r1, r1, r5
   b5d52:	b209      	sxth	r1, r1
      break;
   b5d54:	e767      	b.n	b5c26 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b5d56:	43d2      	mvns	r2, r2
   b5d58:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b5d5a:	428b      	cmp	r3, r1
   b5d5c:	d0c3      	beq.n	b5ce6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5d5e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5d62:	4010      	ands	r0, r2
   b5d64:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5d68:	e7f7      	b.n	b5d5a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b5d6a:	bf00      	nop
   b5d6c:	2003dea0 	.word	0x2003dea0
   b5d70:	2003de98 	.word	0x2003de98
   b5d74:	2003dea8 	.word	0x2003dea8

000b5d78 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5d78:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b5d7a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5d7c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5d80:	2d02      	cmp	r5, #2
   b5d82:	d034      	beq.n	b5dee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b5d84:	2d03      	cmp	r5, #3
   b5d86:	f000 809b 	beq.w	b5ec0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b5d8a:	2d01      	cmp	r5, #1
   b5d8c:	d137      	bne.n	b5dfe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b5d8e:	18d5      	adds	r5, r2, r3
   b5d90:	8902      	ldrh	r2, [r0, #8]
   b5d92:	1b52      	subs	r2, r2, r5
   b5d94:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b5d96:	2900      	cmp	r1, #0
   b5d98:	f2c0 8091 	blt.w	b5ebe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5d9c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5da0:	428d      	cmp	r5, r1
   b5da2:	f340 808c 	ble.w	b5ebe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b5da6:	2a00      	cmp	r2, #0
    w += x;
   b5da8:	bfbe      	ittt	lt
   b5daa:	189b      	addlt	r3, r3, r2
   b5dac:	b21b      	sxthlt	r3, r3
    x = 0;
   b5dae:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b5db0:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5db4:	18d6      	adds	r6, r2, r3
   b5db6:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5db8:	bfc4      	itt	gt
   b5dba:	1aab      	subgt	r3, r5, r2
   b5dbc:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5dbe:	2b00      	cmp	r3, #0
   b5dc0:	dd7d      	ble.n	b5ebe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5dc2:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b5dc4:	2580      	movs	r5, #128	; 0x80
   b5dc6:	fb10 2205 	smlabb	r2, r0, r5, r2
   b5dca:	4845      	ldr	r0, [pc, #276]	; (b5ee0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b5dcc:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b5dce:	f001 0007 	and.w	r0, r1, #7
   b5dd2:	2101      	movs	r1, #1
   b5dd4:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b5dd6:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b5dd8:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b5dda:	4413      	add	r3, r2
   b5ddc:	d175      	bne.n	b5eca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b5dde:	429a      	cmp	r2, r3
   b5de0:	d06d      	beq.n	b5ebe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5de2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5de6:	4308      	orrs	r0, r1
   b5de8:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5dec:	e7f7      	b.n	b5dde <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b5dee:	8905      	ldrh	r5, [r0, #8]
   b5df0:	43c9      	mvns	r1, r1
   b5df2:	4429      	add	r1, r5
      y -= (h-1);
   b5df4:	18d5      	adds	r5, r2, r3
   b5df6:	8942      	ldrh	r2, [r0, #10]
   b5df8:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b5dfa:	b209      	sxth	r1, r1
      y -= (h-1);
   b5dfc:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b5dfe:	2900      	cmp	r1, #0
   b5e00:	db5d      	blt.n	b5ebe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5e02:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b5e06:	428d      	cmp	r5, r1
   b5e08:	dd59      	ble.n	b5ebe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b5e0a:	2a00      	cmp	r2, #0
    __h += __y;
   b5e0c:	bfbe      	ittt	lt
   b5e0e:	189b      	addlt	r3, r3, r2
   b5e10:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5e12:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b5e14:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5e18:	18d5      	adds	r5, r2, r3
   b5e1a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5e1c:	bfc4      	itt	gt
   b5e1e:	1a83      	subgt	r3, r0, r2
   b5e20:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b5e22:	2b00      	cmp	r3, #0
   b5e24:	dd4b      	ble.n	b5ebe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b5e26:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b5e2a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b5ee0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b5e2e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b5e32:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b5e36:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5e38:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b5e3c:	d01a      	beq.n	b5e74 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b5e3e:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b5e42:	4e28      	ldr	r6, [pc, #160]	; (b5ee4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5e44:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b5e46:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5e48:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5e4a:	bf3f      	itttt	cc
   b5e4c:	eba5 0e03 	subcc.w	lr, r5, r3
   b5e50:	26ff      	movcc	r6, #255	; 0xff
   b5e52:	fa46 f60e 	asrcc.w	r6, r6, lr
   b5e56:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b5e58:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b5e5c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5e5e:	bf0c      	ite	eq
   b5e60:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b5e62:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b5e64:	42ab      	cmp	r3, r5
   b5e66:	f80c 6001 	strb.w	r6, [ip, r1]
   b5e6a:	d328      	bcc.n	b5ebe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b5e6c:	3a08      	subs	r2, #8
   b5e6e:	4413      	add	r3, r2
   b5e70:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b5e72:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b5e74:	2b07      	cmp	r3, #7
   b5e76:	d919      	bls.n	b5eac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5e78:	2c01      	cmp	r4, #1
   b5e7a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b5e7e:	bf18      	it	ne
   b5e80:	2500      	movne	r5, #0
   b5e82:	b2ed      	uxtb	r5, r5
   b5e84:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5e88:	461a      	mov	r2, r3
      h -= 8;
   b5e8a:	3a08      	subs	r2, #8
   b5e8c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b5e8e:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5e90:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5e94:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5e98:	d8f7      	bhi.n	b5e8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b5e9a:	f1a3 0208 	sub.w	r2, r3, #8
   b5e9e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b5ea2:	3201      	adds	r2, #1
   b5ea4:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5ea8:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b5eac:	b13b      	cbz	r3, b5ebe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b5eae:	4a0e      	ldr	r2, [pc, #56]	; (b5ee8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b5eb0:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b5eb2:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5eb4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5eb6:	bf0c      	ite	eq
   b5eb8:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b5eba:	4393      	bicne	r3, r2
   b5ebc:	7003      	strb	r3, [r0, #0]
}
   b5ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5ec0:	8945      	ldrh	r5, [r0, #10]
   b5ec2:	43c9      	mvns	r1, r1
   b5ec4:	4429      	add	r1, r5
   b5ec6:	b209      	sxth	r1, r1
      break;
   b5ec8:	e765      	b.n	b5d96 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b5eca:	43c9      	mvns	r1, r1
   b5ecc:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b5ece:	429a      	cmp	r2, r3
   b5ed0:	d0f5      	beq.n	b5ebe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5ed2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5ed6:	4008      	ands	r0, r1
   b5ed8:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5edc:	e7f7      	b.n	b5ece <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b5ede:	bf00      	nop
   b5ee0:	2003dea8 	.word	0x2003dea8
   b5ee4:	2003dea0 	.word	0x2003dea0
   b5ee8:	2003de98 	.word	0x2003de98

000b5eec <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b5eec:	4770      	bx	lr
	...

000b5ef0 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5ef2:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5ef4:	4606      	mov	r6, r0
   b5ef6:	4614      	mov	r4, r2
   b5ef8:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5efa:	db2d      	blt.n	b5f58 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5efc:	f7ff fe7d 	bl	b5bfa <_ZN12Adafruit_GFX5widthEv>
   b5f00:	42a8      	cmp	r0, r5
   b5f02:	dd29      	ble.n	b5f58 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5f04:	2c00      	cmp	r4, #0
   b5f06:	db27      	blt.n	b5f58 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5f08:	4630      	mov	r0, r6
   b5f0a:	f7ff fe79 	bl	b5c00 <_ZN12Adafruit_GFX6heightEv>
   b5f0e:	42a0      	cmp	r0, r4
   b5f10:	dd22      	ble.n	b5f58 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b5f12:	4630      	mov	r0, r6
   b5f14:	f7ff fe61 	bl	b5bda <_ZN12Adafruit_GFX11getRotationEv>
   b5f18:	2802      	cmp	r0, #2
   b5f1a:	d01e      	beq.n	b5f5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b5f1c:	2803      	cmp	r0, #3
   b5f1e:	d025      	beq.n	b5f6c <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b5f20:	2801      	cmp	r0, #1
   b5f22:	d104      	bne.n	b5f2e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b5f24:	8933      	ldrh	r3, [r6, #8]
   b5f26:	43e2      	mvns	r2, r4
   b5f28:	441a      	add	r2, r3
    break;
   b5f2a:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b5f2c:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5f2e:	2c00      	cmp	r4, #0
   b5f30:	4622      	mov	r2, r4
   b5f32:	bfb8      	it	lt
   b5f34:	1de2      	addlt	r2, r4, #7
   b5f36:	10d2      	asrs	r2, r2, #3
   b5f38:	2180      	movs	r1, #128	; 0x80
   b5f3a:	fb12 5501 	smlabb	r5, r2, r1, r5
   b5f3e:	490e      	ldr	r1, [pc, #56]	; (b5f78 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5f40:	2201      	movs	r2, #1
   b5f42:	f004 0407 	and.w	r4, r4, #7
   b5f46:	574b      	ldrsb	r3, [r1, r5]
   b5f48:	fa02 f404 	lsl.w	r4, r2, r4
   b5f4c:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b5f4e:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5f50:	bf0c      	ite	eq
   b5f52:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b5f54:	43a3      	bicne	r3, r4
   b5f56:	554b      	strb	r3, [r1, r5]
}
   b5f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b5f5a:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b5f5c:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b5f5e:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b5f60:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b5f62:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b5f64:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b5f66:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b5f68:	b224      	sxth	r4, r4
    break;
   b5f6a:	e7e0      	b.n	b5f2e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b5f6c:	8973      	ldrh	r3, [r6, #10]
   b5f6e:	3b01      	subs	r3, #1
   b5f70:	1b5b      	subs	r3, r3, r5
    break;
   b5f72:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b5f74:	b21c      	sxth	r4, r3
    break;
   b5f76:	e7da      	b.n	b5f2e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b5f78:	2003dea8 	.word	0x2003dea8

000b5f7c <_ZN16Adafruit_SSD1306D0Ev>:
   b5f7c:	b510      	push	{r4, lr}
   b5f7e:	2124      	movs	r1, #36	; 0x24
   b5f80:	4604      	mov	r4, r0
   b5f82:	f7fe f88c 	bl	b409e <_ZdlPvj>
   b5f86:	4620      	mov	r0, r4
   b5f88:	bd10      	pop	{r4, pc}
	...

000b5f8c <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5f8c:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5f8e:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5f90:	4604      	mov	r4, r0
   b5f92:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5f94:	2180      	movs	r1, #128	; 0x80
   b5f96:	f7ff fd47 	bl	b5a28 <_ZN12Adafruit_GFXC1Ess>
   b5f9a:	4b06      	ldr	r3, [pc, #24]	; (b5fb4 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b5f9c:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b5f9e:	23ff      	movs	r3, #255	; 0xff
   b5fa0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b5fa4:	7763      	strb	r3, [r4, #29]
   b5fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5faa:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b5fac:	f884 5020 	strb.w	r5, [r4, #32]
}
   b5fb0:	4620      	mov	r0, r4
   b5fb2:	bd38      	pop	{r3, r4, r5, pc}
   b5fb4:	000bcb88 	.word	0x000bcb88

000b5fb8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b5fb8:	4802      	ldr	r0, [pc, #8]	; (b5fc4 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b5fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5fbe:	2100      	movs	r1, #0
   b5fc0:	f004 b8db 	b.w	ba17a <memset>
   b5fc4:	2003dea8 	.word	0x2003dea8

000b5fc8 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b5fc8:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b5fca:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b5fce:	b143      	cbz	r3, b5fe2 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b5fd0:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
   b5fd2:	f7fe fc49 	bl	b4868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5fd6:	9901      	ldr	r1, [sp, #4]
}
   b5fd8:	b003      	add	sp, #12
   b5fda:	f85d eb04 	ldr.w	lr, [sp], #4
   b5fde:	f001 b89f 	b.w	b7120 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5fe2:	460b      	mov	r3, r1
   b5fe4:	7f81      	ldrb	r1, [r0, #30]
   b5fe6:	7f40      	ldrb	r0, [r0, #29]
   b5fe8:	2201      	movs	r2, #1
}
   b5fea:	b003      	add	sp, #12
   b5fec:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5ff0:	f001 be54 	b.w	b7c9c <shiftOut>

000b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5ff4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b5ff6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5ffa:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5ffc:	4604      	mov	r4, r0
   b5ffe:	460d      	mov	r5, r1
  if (sid != -1)
   b6000:	d01d      	beq.n	b603e <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b6002:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b6006:	2101      	movs	r1, #1
   b6008:	b280      	uxth	r0, r0
   b600a:	f001 fdde 	bl	b7bca <digitalWrite>
    digitalWrite(dc, LOW);
   b600e:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b6012:	2100      	movs	r1, #0
   b6014:	b280      	uxth	r0, r0
   b6016:	f001 fdd8 	bl	b7bca <digitalWrite>
    digitalWrite(cs, LOW);
   b601a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b601e:	2100      	movs	r1, #0
   b6020:	b280      	uxth	r0, r0
   b6022:	f001 fdd2 	bl	b7bca <digitalWrite>
    fastSPIwrite(c);
   b6026:	4629      	mov	r1, r5
   b6028:	4620      	mov	r0, r4
   b602a:	f7ff ffcd 	bl	b5fc8 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b602e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b6032:	2101      	movs	r1, #1
}
   b6034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b6038:	b280      	uxth	r0, r0
   b603a:	f001 bdc6 	b.w	b7bca <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b603e:	f001 fe6d 	bl	b7d1c <_Z19__fetch_global_Wirev>
   b6042:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b6046:	f000 fd53 	bl	b6af0 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b604a:	f001 fe67 	bl	b7d1c <_Z19__fetch_global_Wirev>
   b604e:	6803      	ldr	r3, [r0, #0]
   b6050:	2100      	movs	r1, #0
   b6052:	689b      	ldr	r3, [r3, #8]
   b6054:	4798      	blx	r3
    Wire.write(c);
   b6056:	f001 fe61 	bl	b7d1c <_Z19__fetch_global_Wirev>
   b605a:	6803      	ldr	r3, [r0, #0]
   b605c:	4629      	mov	r1, r5
   b605e:	689b      	ldr	r3, [r3, #8]
   b6060:	4798      	blx	r3
    Wire.endTransmission();
   b6062:	f001 fe5b 	bl	b7d1c <_Z19__fetch_global_Wirev>
}
   b6066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b606a:	f000 bd48 	b.w	b6afe <_ZN7TwoWire15endTransmissionEv>
	...

000b6070 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b6070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b6072:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b6074:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b6076:	f7ff ffbd 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b607a:	2100      	movs	r1, #0
   b607c:	4620      	mov	r0, r4
   b607e:	f7ff ffb9 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b6082:	217f      	movs	r1, #127	; 0x7f
   b6084:	4620      	mov	r0, r4
   b6086:	f7ff ffb5 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b608a:	2122      	movs	r1, #34	; 0x22
   b608c:	4620      	mov	r0, r4
   b608e:	f7ff ffb1 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b6092:	2100      	movs	r1, #0
   b6094:	4620      	mov	r0, r4
   b6096:	f7ff ffad 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b609a:	2107      	movs	r1, #7
   b609c:	4620      	mov	r0, r4
   b609e:	f7ff ffa9 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b60a2:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b60a6:	4f29      	ldr	r7, [pc, #164]	; (b614c <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b60a8:	3301      	adds	r3, #1
   b60aa:	d02a      	beq.n	b6102 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b60ac:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b60b0:	2101      	movs	r1, #1
   b60b2:	b280      	uxth	r0, r0
   b60b4:	f001 fd89 	bl	b7bca <digitalWrite>
    digitalWrite(dc, HIGH);
   b60b8:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b60bc:	2101      	movs	r1, #1
   b60be:	b280      	uxth	r0, r0
   b60c0:	f001 fd83 	bl	b7bca <digitalWrite>
    digitalWrite(cs, LOW);
   b60c4:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b60c8:	2100      	movs	r1, #0
   b60ca:	b280      	uxth	r0, r0
   b60cc:	f001 fd7d 	bl	b7bca <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b60d0:	2001      	movs	r0, #1
   b60d2:	f000 f987 	bl	b63e4 <HAL_Delay_Microseconds>
   b60d6:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b60da:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b60dc:	f817 1b01 	ldrb.w	r1, [r7], #1
   b60e0:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b60e2:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b60e4:	f7ff ff70 	bl	b5fc8 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b60e8:	2d00      	cmp	r5, #0
   b60ea:	d1f6      	bne.n	b60da <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b60ec:	2001      	movs	r0, #1
   b60ee:	f000 f979 	bl	b63e4 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b60f2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b60f6:	2101      	movs	r1, #1
}
   b60f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b60fc:	b280      	uxth	r0, r0
   b60fe:	f001 bd64 	b.w	b7bca <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b6102:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b6104:	f001 fe0a 	bl	b7d1c <_Z19__fetch_global_Wirev>
   b6108:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b610c:	f000 fcf0 	bl	b6af0 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b6110:	f001 fe04 	bl	b7d1c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b6114:	6803      	ldr	r3, [r0, #0]
   b6116:	2140      	movs	r1, #64	; 0x40
   b6118:	689b      	ldr	r3, [r3, #8]
   b611a:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b611c:	f105 0610 	add.w	r6, r5, #16
   b6120:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b6122:	f001 fdfb 	bl	b7d1c <_Z19__fetch_global_Wirev>
   b6126:	6803      	ldr	r3, [r0, #0]
   b6128:	5d79      	ldrb	r1, [r7, r5]
   b612a:	689b      	ldr	r3, [r3, #8]
   b612c:	4798      	blx	r3
		i++;
   b612e:	1c6b      	adds	r3, r5, #1
   b6130:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b6132:	42ae      	cmp	r6, r5
   b6134:	d1f5      	bne.n	b6122 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b6136:	f001 fdf1 	bl	b7d1c <_Z19__fetch_global_Wirev>
   b613a:	f000 fce0 	bl	b6afe <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b613e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6142:	d100      	bne.n	b6146 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b6144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6146:	4635      	mov	r5, r6
   b6148:	e7dc      	b.n	b6104 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b614a:	bf00      	nop
   b614c:	2003dea8 	.word	0x2003dea8

000b6150 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b6150:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b6152:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b6156:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b6158:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b615a:	4604      	mov	r4, r0
   b615c:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b615e:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b6160:	f000 80c9 	beq.w	b62f6 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b6164:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b6168:	2101      	movs	r1, #1
   b616a:	b280      	uxth	r0, r0
   b616c:	f001 fd1c 	bl	b7ba8 <pinMode>
    pinMode(cs, OUTPUT);
   b6170:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b6174:	2101      	movs	r1, #1
   b6176:	b280      	uxth	r0, r0
   b6178:	f001 fd16 	bl	b7ba8 <pinMode>
    if (!hwSPI){
   b617c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b6180:	2b00      	cmp	r3, #0
   b6182:	f000 80a6 	beq.w	b62d2 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b6186:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b618a:	2101      	movs	r1, #1
   b618c:	b280      	uxth	r0, r0
   b618e:	f001 fd1c 	bl	b7bca <digitalWrite>
        instance().setBitOrder(order);
   b6192:	f7fe fb69 	bl	b4868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6196:	2101      	movs	r1, #1
   b6198:	f000 feba 	bl	b6f10 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b619c:	f7fe fb64 	bl	b4868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b61a0:	2110      	movs	r1, #16
   b61a2:	f000 ff97 	bl	b70d4 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b61a6:	f7fe fb5f 	bl	b4868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b61aa:	2100      	movs	r1, #0
   b61ac:	f000 fec4 	bl	b6f38 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b61b0:	f7fe fb5a 	bl	b4868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b61b4:	f000 fe98 	bl	b6ee8 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b61b8:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b61bc:	2101      	movs	r1, #1
   b61be:	b280      	uxth	r0, r0
   b61c0:	f001 fcf2 	bl	b7ba8 <pinMode>
  digitalWrite(rst, HIGH);
   b61c4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b61c8:	2101      	movs	r1, #1
   b61ca:	b280      	uxth	r0, r0
   b61cc:	f001 fcfd 	bl	b7bca <digitalWrite>
  delay(1);
   b61d0:	2001      	movs	r0, #1
   b61d2:	f000 fbc3 	bl	b695c <delay>
  digitalWrite(rst, LOW);
   b61d6:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b61da:	2100      	movs	r1, #0
   b61dc:	b280      	uxth	r0, r0
   b61de:	f001 fcf4 	bl	b7bca <digitalWrite>
  delay(10);
   b61e2:	200a      	movs	r0, #10
   b61e4:	f000 fbba 	bl	b695c <delay>
  digitalWrite(rst, HIGH);
   b61e8:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b61ec:	2101      	movs	r1, #1
   b61ee:	b280      	uxth	r0, r0
   b61f0:	f001 fceb 	bl	b7bca <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b61f4:	4620      	mov	r0, r4
   b61f6:	21ae      	movs	r1, #174	; 0xae
   b61f8:	f7ff fefc 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b61fc:	4620      	mov	r0, r4
   b61fe:	21d5      	movs	r1, #213	; 0xd5
   b6200:	f7ff fef8 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b6204:	4620      	mov	r0, r4
   b6206:	2180      	movs	r1, #128	; 0x80
   b6208:	f7ff fef4 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b620c:	4620      	mov	r0, r4
   b620e:	21a8      	movs	r1, #168	; 0xa8
   b6210:	f7ff fef0 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b6214:	4620      	mov	r0, r4
   b6216:	213f      	movs	r1, #63	; 0x3f
   b6218:	f7ff feec 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b621c:	4620      	mov	r0, r4
   b621e:	21d3      	movs	r1, #211	; 0xd3
   b6220:	f7ff fee8 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b6224:	4620      	mov	r0, r4
   b6226:	2100      	movs	r1, #0
   b6228:	f7ff fee4 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b622c:	4620      	mov	r0, r4
   b622e:	2140      	movs	r1, #64	; 0x40
   b6230:	f7ff fee0 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b6234:	218d      	movs	r1, #141	; 0x8d
   b6236:	4620      	mov	r0, r4
   b6238:	f7ff fedc 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b623c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b623e:	bf0c      	ite	eq
   b6240:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b6242:	2114      	movne	r1, #20
   b6244:	4620      	mov	r0, r4
   b6246:	f7ff fed5 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b624a:	4620      	mov	r0, r4
   b624c:	2120      	movs	r1, #32
   b624e:	f7ff fed1 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b6252:	4620      	mov	r0, r4
   b6254:	2100      	movs	r1, #0
   b6256:	f7ff fecd 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b625a:	4620      	mov	r0, r4
   b625c:	21a1      	movs	r1, #161	; 0xa1
   b625e:	f7ff fec9 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b6262:	4620      	mov	r0, r4
   b6264:	21c8      	movs	r1, #200	; 0xc8
   b6266:	f7ff fec5 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b626a:	4620      	mov	r0, r4
   b626c:	21da      	movs	r1, #218	; 0xda
   b626e:	f7ff fec1 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b6272:	4620      	mov	r0, r4
   b6274:	2112      	movs	r1, #18
   b6276:	f7ff febd 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b627a:	2181      	movs	r1, #129	; 0x81
   b627c:	4620      	mov	r0, r4
   b627e:	f7ff feb9 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b6282:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b6284:	bf0c      	ite	eq
   b6286:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b6288:	21cf      	movne	r1, #207	; 0xcf
   b628a:	4620      	mov	r0, r4
   b628c:	f7ff feb2 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b6290:	21d9      	movs	r1, #217	; 0xd9
   b6292:	4620      	mov	r0, r4
   b6294:	f7ff feae 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b6298:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b629a:	bf0c      	ite	eq
   b629c:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b629e:	21f1      	movne	r1, #241	; 0xf1
   b62a0:	4620      	mov	r0, r4
   b62a2:	f7ff fea7 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b62a6:	4620      	mov	r0, r4
   b62a8:	21db      	movs	r1, #219	; 0xdb
   b62aa:	f7ff fea3 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b62ae:	4620      	mov	r0, r4
   b62b0:	2140      	movs	r1, #64	; 0x40
   b62b2:	f7ff fe9f 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b62b6:	4620      	mov	r0, r4
   b62b8:	21a4      	movs	r1, #164	; 0xa4
   b62ba:	f7ff fe9b 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b62be:	4620      	mov	r0, r4
   b62c0:	21a6      	movs	r1, #166	; 0xa6
   b62c2:	f7ff fe97 	bl	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b62c6:	4620      	mov	r0, r4
   b62c8:	21af      	movs	r1, #175	; 0xaf
}
   b62ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b62ce:	f7ff be91 	b.w	b5ff4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b62d2:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b62d6:	2101      	movs	r1, #1
   b62d8:	b280      	uxth	r0, r0
   b62da:	f001 fc65 	bl	b7ba8 <pinMode>
    	pinMode(sclk, OUTPUT);
   b62de:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b62e2:	2101      	movs	r1, #1
   b62e4:	b280      	uxth	r0, r0
   b62e6:	f001 fc5f 	bl	b7ba8 <pinMode>
    if (hwSPI){
   b62ea:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b62ee:	2b00      	cmp	r3, #0
   b62f0:	f43f af62 	beq.w	b61b8 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b62f4:	e747      	b.n	b6186 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b62f6:	f001 fd11 	bl	b7d1c <_Z19__fetch_global_Wirev>
   b62fa:	f000 fbc3 	bl	b6a84 <_ZN7TwoWire5beginEv>
   b62fe:	e75b      	b.n	b61b8 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b6300 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   b6300:	2200      	movs	r2, #0
   b6302:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b6306:	6001      	str	r1, [r0, #0]
    // do nothing
}
   b6308:	4770      	bx	lr

000b630a <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   b630a:	b510      	push	{r4, lr}
   b630c:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   b630e:	8800      	ldrh	r0, [r0, #0]
   b6310:	f001 fc87 	bl	b7c22 <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   b6314:	f240 3312 	movw	r3, #786	; 0x312
   b6318:	f1a0 020b 	sub.w	r2, r0, #11
   b631c:	429a      	cmp	r2, r3
   b631e:	d807      	bhi.n	b6330 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
        _lastVoltage = _currentVoltage;
   b6320:	e9c4 0001 	strd	r0, r0, [r4, #4]

        _standardVoltage = initVoltage;
   b6324:	60e0      	str	r0, [r4, #12]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6326:	f000 f865 	bl	b63f4 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   b632a:	61a0      	str	r0, [r4, #24]

        return true;
   b632c:	2001      	movs	r0, #1
    }
    else {
        return false;
    }
}
   b632e:	bd10      	pop	{r4, pc}
        return false;
   b6330:	2000      	movs	r0, #0
   b6332:	e7fc      	b.n	b632e <_ZN16AirQualitySensor4initEv+0x24>

000b6334 <_ZN16AirQualitySensor8getValueEv>:
    return -1;
}

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}
   b6334:	6880      	ldr	r0, [r0, #8]
   b6336:	4770      	bx	lr

000b6338 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

void AirQualitySensor::updateStandardVoltage(void) {
   b6338:	b510      	push	{r4, lr}
   b633a:	4604      	mov	r4, r0
   b633c:	f000 f85a 	bl	b63f4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   b6340:	69a3      	ldr	r3, [r4, #24]
   b6342:	1ac0      	subs	r0, r0, r3
   b6344:	4b07      	ldr	r3, [pc, #28]	; (b6364 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   b6346:	4298      	cmp	r0, r3
   b6348:	d90a      	bls.n	b6360 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   b634a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b634e:	fb93 f3f2 	sdiv	r3, r3, r2
   b6352:	60e3      	str	r3, [r4, #12]
   b6354:	f000 f84e 	bl	b63f4 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   b6358:	2300      	movs	r3, #0
        _volSumCount = 0;
   b635a:	e9c4 3304 	strd	r3, r3, [r4, #16]
        _lastStdVolUpdated = millis();
   b635e:	61a0      	str	r0, [r4, #24]
    }
}
   b6360:	bd10      	pop	{r4, pc}
   b6362:	bf00      	nop
   b6364:	0007a120 	.word	0x0007a120

000b6368 <_ZN16AirQualitySensor5slopeEv>:
int AirQualitySensor::slope(void) {
   b6368:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   b636a:	6883      	ldr	r3, [r0, #8]
   b636c:	6043      	str	r3, [r0, #4]
int AirQualitySensor::slope(void) {
   b636e:	4604      	mov	r4, r0
    _currentVoltage = analogRead(_pin);
   b6370:	8800      	ldrh	r0, [r0, #0]
   b6372:	f001 fc56 	bl	b7c22 <analogRead>
    _voltageSum += _currentVoltage;
   b6376:	6923      	ldr	r3, [r4, #16]
    _currentVoltage = analogRead(_pin);
   b6378:	60a0      	str	r0, [r4, #8]
    _voltageSum += _currentVoltage;
   b637a:	4418      	add	r0, r3
    _volSumCount += 1;
   b637c:	6963      	ldr	r3, [r4, #20]
    _voltageSum += _currentVoltage;
   b637e:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   b6380:	3301      	adds	r3, #1
   b6382:	6163      	str	r3, [r4, #20]
    updateStandardVoltage();
   b6384:	4620      	mov	r0, r4
   b6386:	f7ff ffd7 	bl	b6338 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   b638a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   b638e:	1a51      	subs	r1, r2, r1
   b6390:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   b6394:	dc10      	bgt.n	b63b8 <_ZN16AirQualitySensor5slopeEv+0x50>
   b6396:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   b639a:	dc0d      	bgt.n	b63b8 <_ZN16AirQualitySensor5slopeEv+0x50>
             || _currentVoltage - _standardVoltage > 150) {
   b639c:	68e3      	ldr	r3, [r4, #12]
   b639e:	1ad3      	subs	r3, r2, r3
   b63a0:	2b96      	cmp	r3, #150	; 0x96
   b63a2:	dc0b      	bgt.n	b63bc <_ZN16AirQualitySensor5slopeEv+0x54>
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   b63a4:	29c8      	cmp	r1, #200	; 0xc8
   b63a6:	dd02      	ble.n	b63ae <_ZN16AirQualitySensor5slopeEv+0x46>
   b63a8:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   b63ac:	d108      	bne.n	b63c0 <_ZN16AirQualitySensor5slopeEv+0x58>
        return AirQualitySensor::FRESH_AIR;
   b63ae:	2b32      	cmp	r3, #50	; 0x32
   b63b0:	bfcc      	ite	gt
   b63b2:	2002      	movgt	r0, #2
   b63b4:	2003      	movle	r0, #3
}
   b63b6:	bd10      	pop	{r4, pc}
        return AirQualitySensor::FORCE_SIGNAL;
   b63b8:	2000      	movs	r0, #0
   b63ba:	e7fc      	b.n	b63b6 <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::HIGH_POLLUTION;
   b63bc:	2001      	movs	r0, #1
   b63be:	e7fa      	b.n	b63b6 <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::LOW_POLLUTION;
   b63c0:	2002      	movs	r0, #2
   b63c2:	e7f8      	b.n	b63b6 <_ZN16AirQualitySensor5slopeEv+0x4e>

000b63c4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b63c4:	b508      	push	{r3, lr}
   b63c6:	4b02      	ldr	r3, [pc, #8]	; (b63d0 <os_mutex_recursive_create+0xc>)
   b63c8:	681b      	ldr	r3, [r3, #0]
   b63ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b63cc:	9301      	str	r3, [sp, #4]
   b63ce:	bd08      	pop	{r3, pc}
   b63d0:	00030248 	.word	0x00030248

000b63d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b63d4:	b508      	push	{r3, lr}
   b63d6:	4b02      	ldr	r3, [pc, #8]	; (b63e0 <HAL_RNG_GetRandomNumber+0xc>)
   b63d8:	681b      	ldr	r3, [r3, #0]
   b63da:	685b      	ldr	r3, [r3, #4]
   b63dc:	9301      	str	r3, [sp, #4]
   b63de:	bd08      	pop	{r3, pc}
   b63e0:	00030218 	.word	0x00030218

000b63e4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b63e4:	b508      	push	{r3, lr}
   b63e6:	4b02      	ldr	r3, [pc, #8]	; (b63f0 <HAL_Delay_Microseconds+0xc>)
   b63e8:	681b      	ldr	r3, [r3, #0]
   b63ea:	68db      	ldr	r3, [r3, #12]
   b63ec:	9301      	str	r3, [sp, #4]
   b63ee:	bd08      	pop	{r3, pc}
   b63f0:	00030218 	.word	0x00030218

000b63f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b63f4:	b508      	push	{r3, lr}
   b63f6:	4b02      	ldr	r3, [pc, #8]	; (b6400 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b63f8:	681b      	ldr	r3, [r3, #0]
   b63fa:	695b      	ldr	r3, [r3, #20]
   b63fc:	9301      	str	r3, [sp, #4]
   b63fe:	bd08      	pop	{r3, pc}
   b6400:	00030218 	.word	0x00030218

000b6404 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6404:	b508      	push	{r3, lr}
   b6406:	4b02      	ldr	r3, [pc, #8]	; (b6410 <HAL_Validate_Pin_Function+0xc>)
   b6408:	681b      	ldr	r3, [r3, #0]
   b640a:	685b      	ldr	r3, [r3, #4]
   b640c:	9301      	str	r3, [sp, #4]
   b640e:	bd08      	pop	{r3, pc}
   b6410:	0003022c 	.word	0x0003022c

000b6414 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6414:	b508      	push	{r3, lr}
   b6416:	4b02      	ldr	r3, [pc, #8]	; (b6420 <HAL_Pin_Mode+0xc>)
   b6418:	681b      	ldr	r3, [r3, #0]
   b641a:	689b      	ldr	r3, [r3, #8]
   b641c:	9301      	str	r3, [sp, #4]
   b641e:	bd08      	pop	{r3, pc}
   b6420:	0003022c 	.word	0x0003022c

000b6424 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6424:	b508      	push	{r3, lr}
   b6426:	4b02      	ldr	r3, [pc, #8]	; (b6430 <HAL_Get_Pin_Mode+0xc>)
   b6428:	681b      	ldr	r3, [r3, #0]
   b642a:	68db      	ldr	r3, [r3, #12]
   b642c:	9301      	str	r3, [sp, #4]
   b642e:	bd08      	pop	{r3, pc}
   b6430:	0003022c 	.word	0x0003022c

000b6434 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6434:	b508      	push	{r3, lr}
   b6436:	4b02      	ldr	r3, [pc, #8]	; (b6440 <HAL_GPIO_Write+0xc>)
   b6438:	681b      	ldr	r3, [r3, #0]
   b643a:	691b      	ldr	r3, [r3, #16]
   b643c:	9301      	str	r3, [sp, #4]
   b643e:	bd08      	pop	{r3, pc}
   b6440:	0003022c 	.word	0x0003022c

000b6444 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6444:	b508      	push	{r3, lr}
   b6446:	4b02      	ldr	r3, [pc, #8]	; (b6450 <HAL_GPIO_Read+0xc>)
   b6448:	681b      	ldr	r3, [r3, #0]
   b644a:	695b      	ldr	r3, [r3, #20]
   b644c:	9301      	str	r3, [sp, #4]
   b644e:	bd08      	pop	{r3, pc}
   b6450:	0003022c 	.word	0x0003022c

000b6454 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b6454:	b508      	push	{r3, lr}
   b6456:	4b02      	ldr	r3, [pc, #8]	; (b6460 <HAL_DAC_Write+0xc>)
   b6458:	681b      	ldr	r3, [r3, #0]
   b645a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b645c:	9301      	str	r3, [sp, #4]
   b645e:	bd08      	pop	{r3, pc}
   b6460:	0003022c 	.word	0x0003022c

000b6464 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6464:	b508      	push	{r3, lr}
   b6466:	4b02      	ldr	r3, [pc, #8]	; (b6470 <hal_adc_read+0xc>)
   b6468:	681b      	ldr	r3, [r3, #0]
   b646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b646c:	9301      	str	r3, [sp, #4]
   b646e:	bd08      	pop	{r3, pc}
   b6470:	0003022c 	.word	0x0003022c

000b6474 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b6474:	b508      	push	{r3, lr}
   b6476:	4b02      	ldr	r3, [pc, #8]	; (b6480 <HAL_Pulse_In+0xc>)
   b6478:	681b      	ldr	r3, [r3, #0]
   b647a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b647c:	9301      	str	r3, [sp, #4]
   b647e:	bd08      	pop	{r3, pc}
   b6480:	0003022c 	.word	0x0003022c

000b6484 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b6484:	b508      	push	{r3, lr}
   b6486:	4b02      	ldr	r3, [pc, #8]	; (b6490 <hal_pwm_write_ext+0xc>)
   b6488:	681b      	ldr	r3, [r3, #0]
   b648a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b648c:	9301      	str	r3, [sp, #4]
   b648e:	bd08      	pop	{r3, pc}
   b6490:	0003022c 	.word	0x0003022c

000b6494 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6494:	b508      	push	{r3, lr}
   b6496:	4b02      	ldr	r3, [pc, #8]	; (b64a0 <hal_i2c_begin+0xc>)
   b6498:	681b      	ldr	r3, [r3, #0]
   b649a:	68db      	ldr	r3, [r3, #12]
   b649c:	9301      	str	r3, [sp, #4]
   b649e:	bd08      	pop	{r3, pc}
   b64a0:	00030228 	.word	0x00030228

000b64a4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b64a4:	b508      	push	{r3, lr}
   b64a6:	4b02      	ldr	r3, [pc, #8]	; (b64b0 <hal_i2c_begin_transmission+0xc>)
   b64a8:	681b      	ldr	r3, [r3, #0]
   b64aa:	699b      	ldr	r3, [r3, #24]
   b64ac:	9301      	str	r3, [sp, #4]
   b64ae:	bd08      	pop	{r3, pc}
   b64b0:	00030228 	.word	0x00030228

000b64b4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b64b4:	b508      	push	{r3, lr}
   b64b6:	4b02      	ldr	r3, [pc, #8]	; (b64c0 <hal_i2c_end_transmission+0xc>)
   b64b8:	681b      	ldr	r3, [r3, #0]
   b64ba:	69db      	ldr	r3, [r3, #28]
   b64bc:	9301      	str	r3, [sp, #4]
   b64be:	bd08      	pop	{r3, pc}
   b64c0:	00030228 	.word	0x00030228

000b64c4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b64c4:	b508      	push	{r3, lr}
   b64c6:	4b02      	ldr	r3, [pc, #8]	; (b64d0 <hal_i2c_write+0xc>)
   b64c8:	681b      	ldr	r3, [r3, #0]
   b64ca:	6a1b      	ldr	r3, [r3, #32]
   b64cc:	9301      	str	r3, [sp, #4]
   b64ce:	bd08      	pop	{r3, pc}
   b64d0:	00030228 	.word	0x00030228

000b64d4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b64d4:	b508      	push	{r3, lr}
   b64d6:	4b02      	ldr	r3, [pc, #8]	; (b64e0 <hal_i2c_available+0xc>)
   b64d8:	681b      	ldr	r3, [r3, #0]
   b64da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b64dc:	9301      	str	r3, [sp, #4]
   b64de:	bd08      	pop	{r3, pc}
   b64e0:	00030228 	.word	0x00030228

000b64e4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b64e4:	b508      	push	{r3, lr}
   b64e6:	4b02      	ldr	r3, [pc, #8]	; (b64f0 <hal_i2c_read+0xc>)
   b64e8:	681b      	ldr	r3, [r3, #0]
   b64ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b64ec:	9301      	str	r3, [sp, #4]
   b64ee:	bd08      	pop	{r3, pc}
   b64f0:	00030228 	.word	0x00030228

000b64f4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b64f4:	b508      	push	{r3, lr}
   b64f6:	4b02      	ldr	r3, [pc, #8]	; (b6500 <hal_i2c_peek+0xc>)
   b64f8:	681b      	ldr	r3, [r3, #0]
   b64fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b64fc:	9301      	str	r3, [sp, #4]
   b64fe:	bd08      	pop	{r3, pc}
   b6500:	00030228 	.word	0x00030228

000b6504 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6504:	b508      	push	{r3, lr}
   b6506:	4b02      	ldr	r3, [pc, #8]	; (b6510 <hal_i2c_flush+0xc>)
   b6508:	681b      	ldr	r3, [r3, #0]
   b650a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b650c:	9301      	str	r3, [sp, #4]
   b650e:	bd08      	pop	{r3, pc}
   b6510:	00030228 	.word	0x00030228

000b6514 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6514:	b508      	push	{r3, lr}
   b6516:	4b02      	ldr	r3, [pc, #8]	; (b6520 <hal_i2c_is_enabled+0xc>)
   b6518:	681b      	ldr	r3, [r3, #0]
   b651a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b651c:	9301      	str	r3, [sp, #4]
   b651e:	bd08      	pop	{r3, pc}
   b6520:	00030228 	.word	0x00030228

000b6524 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6524:	b508      	push	{r3, lr}
   b6526:	4b02      	ldr	r3, [pc, #8]	; (b6530 <hal_i2c_init+0xc>)
   b6528:	681b      	ldr	r3, [r3, #0]
   b652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b652c:	9301      	str	r3, [sp, #4]
   b652e:	bd08      	pop	{r3, pc}
   b6530:	00030228 	.word	0x00030228

000b6534 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6534:	b508      	push	{r3, lr}
   b6536:	4b02      	ldr	r3, [pc, #8]	; (b6540 <hal_i2c_request_ex+0xc>)
   b6538:	681b      	ldr	r3, [r3, #0]
   b653a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b653c:	9301      	str	r3, [sp, #4]
   b653e:	bd08      	pop	{r3, pc}
   b6540:	00030228 	.word	0x00030228

000b6544 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6544:	b508      	push	{r3, lr}
   b6546:	4b02      	ldr	r3, [pc, #8]	; (b6550 <if_index_to_name+0xc>)
   b6548:	681b      	ldr	r3, [r3, #0]
   b654a:	695b      	ldr	r3, [r3, #20]
   b654c:	9301      	str	r3, [sp, #4]
   b654e:	bd08      	pop	{r3, pc}
   b6550:	0003026c 	.word	0x0003026c

000b6554 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6554:	b508      	push	{r3, lr}
   b6556:	4b02      	ldr	r3, [pc, #8]	; (b6560 <inet_inet_ntop+0xc>)
   b6558:	681b      	ldr	r3, [r3, #0]
   b655a:	695b      	ldr	r3, [r3, #20]
   b655c:	9301      	str	r3, [sp, #4]
   b655e:	bd08      	pop	{r3, pc}
   b6560:	00030264 	.word	0x00030264

000b6564 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6564:	b508      	push	{r3, lr}
   b6566:	4b02      	ldr	r3, [pc, #8]	; (b6570 <inet_htonl+0xc>)
   b6568:	681b      	ldr	r3, [r3, #0]
   b656a:	6a1b      	ldr	r3, [r3, #32]
   b656c:	9301      	str	r3, [sp, #4]
   b656e:	bd08      	pop	{r3, pc}
   b6570:	00030264 	.word	0x00030264

000b6574 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6574:	b508      	push	{r3, lr}
   b6576:	4b02      	ldr	r3, [pc, #8]	; (b6580 <inet_htons+0xc>)
   b6578:	681b      	ldr	r3, [r3, #0]
   b657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b657c:	9301      	str	r3, [sp, #4]
   b657e:	bd08      	pop	{r3, pc}
   b6580:	00030264 	.word	0x00030264

000b6584 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6584:	b508      	push	{r3, lr}
   b6586:	4b02      	ldr	r3, [pc, #8]	; (b6590 <netdb_freeaddrinfo+0xc>)
   b6588:	681b      	ldr	r3, [r3, #0]
   b658a:	689b      	ldr	r3, [r3, #8]
   b658c:	9301      	str	r3, [sp, #4]
   b658e:	bd08      	pop	{r3, pc}
   b6590:	00030268 	.word	0x00030268

000b6594 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6594:	b508      	push	{r3, lr}
   b6596:	4b02      	ldr	r3, [pc, #8]	; (b65a0 <netdb_getaddrinfo+0xc>)
   b6598:	681b      	ldr	r3, [r3, #0]
   b659a:	68db      	ldr	r3, [r3, #12]
   b659c:	9301      	str	r3, [sp, #4]
   b659e:	bd08      	pop	{r3, pc}
   b65a0:	00030268 	.word	0x00030268

000b65a4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b65a4:	b508      	push	{r3, lr}
   b65a6:	4b02      	ldr	r3, [pc, #8]	; (b65b0 <sock_setsockopt+0xc>)
   b65a8:	681b      	ldr	r3, [r3, #0]
   b65aa:	699b      	ldr	r3, [r3, #24]
   b65ac:	9301      	str	r3, [sp, #4]
   b65ae:	bd08      	pop	{r3, pc}
   b65b0:	00030238 	.word	0x00030238

000b65b4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b65b4:	b508      	push	{r3, lr}
   b65b6:	4b02      	ldr	r3, [pc, #8]	; (b65c0 <sock_close+0xc>)
   b65b8:	681b      	ldr	r3, [r3, #0]
   b65ba:	69db      	ldr	r3, [r3, #28]
   b65bc:	9301      	str	r3, [sp, #4]
   b65be:	bd08      	pop	{r3, pc}
   b65c0:	00030238 	.word	0x00030238

000b65c4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b65c4:	b508      	push	{r3, lr}
   b65c6:	4b02      	ldr	r3, [pc, #8]	; (b65d0 <sock_connect+0xc>)
   b65c8:	681b      	ldr	r3, [r3, #0]
   b65ca:	6a1b      	ldr	r3, [r3, #32]
   b65cc:	9301      	str	r3, [sp, #4]
   b65ce:	bd08      	pop	{r3, pc}
   b65d0:	00030238 	.word	0x00030238

000b65d4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b65d4:	b508      	push	{r3, lr}
   b65d6:	4b02      	ldr	r3, [pc, #8]	; (b65e0 <sock_recv+0xc>)
   b65d8:	681b      	ldr	r3, [r3, #0]
   b65da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b65dc:	9301      	str	r3, [sp, #4]
   b65de:	bd08      	pop	{r3, pc}
   b65e0:	00030238 	.word	0x00030238

000b65e4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b65e4:	b508      	push	{r3, lr}
   b65e6:	4b02      	ldr	r3, [pc, #8]	; (b65f0 <sock_send+0xc>)
   b65e8:	681b      	ldr	r3, [r3, #0]
   b65ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65ec:	9301      	str	r3, [sp, #4]
   b65ee:	bd08      	pop	{r3, pc}
   b65f0:	00030238 	.word	0x00030238

000b65f4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b65f4:	b508      	push	{r3, lr}
   b65f6:	4b02      	ldr	r3, [pc, #8]	; (b6600 <sock_socket+0xc>)
   b65f8:	681b      	ldr	r3, [r3, #0]
   b65fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b65fc:	9301      	str	r3, [sp, #4]
   b65fe:	bd08      	pop	{r3, pc}
   b6600:	00030238 	.word	0x00030238

000b6604 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6604:	b508      	push	{r3, lr}
   b6606:	4b02      	ldr	r3, [pc, #8]	; (b6610 <hal_spi_begin+0xc>)
   b6608:	681b      	ldr	r3, [r3, #0]
   b660a:	681b      	ldr	r3, [r3, #0]
   b660c:	9301      	str	r3, [sp, #4]
   b660e:	bd08      	pop	{r3, pc}
   b6610:	00030230 	.word	0x00030230

000b6614 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b6614:	b508      	push	{r3, lr}
   b6616:	4b02      	ldr	r3, [pc, #8]	; (b6620 <hal_spi_set_bit_order+0xc>)
   b6618:	681b      	ldr	r3, [r3, #0]
   b661a:	689b      	ldr	r3, [r3, #8]
   b661c:	9301      	str	r3, [sp, #4]
   b661e:	bd08      	pop	{r3, pc}
   b6620:	00030230 	.word	0x00030230

000b6624 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b6624:	b508      	push	{r3, lr}
   b6626:	4b02      	ldr	r3, [pc, #8]	; (b6630 <hal_spi_set_data_mode+0xc>)
   b6628:	681b      	ldr	r3, [r3, #0]
   b662a:	68db      	ldr	r3, [r3, #12]
   b662c:	9301      	str	r3, [sp, #4]
   b662e:	bd08      	pop	{r3, pc}
   b6630:	00030230 	.word	0x00030230

000b6634 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b6634:	b508      	push	{r3, lr}
   b6636:	4b02      	ldr	r3, [pc, #8]	; (b6640 <hal_spi_set_clock_divider+0xc>)
   b6638:	681b      	ldr	r3, [r3, #0]
   b663a:	691b      	ldr	r3, [r3, #16]
   b663c:	9301      	str	r3, [sp, #4]
   b663e:	bd08      	pop	{r3, pc}
   b6640:	00030230 	.word	0x00030230

000b6644 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6644:	b508      	push	{r3, lr}
   b6646:	4b02      	ldr	r3, [pc, #8]	; (b6650 <hal_spi_transfer+0xc>)
   b6648:	681b      	ldr	r3, [r3, #0]
   b664a:	695b      	ldr	r3, [r3, #20]
   b664c:	9301      	str	r3, [sp, #4]
   b664e:	bd08      	pop	{r3, pc}
   b6650:	00030230 	.word	0x00030230

000b6654 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6654:	b508      	push	{r3, lr}
   b6656:	4b02      	ldr	r3, [pc, #8]	; (b6660 <hal_spi_init+0xc>)
   b6658:	681b      	ldr	r3, [r3, #0]
   b665a:	69db      	ldr	r3, [r3, #28]
   b665c:	9301      	str	r3, [sp, #4]
   b665e:	bd08      	pop	{r3, pc}
   b6660:	00030230 	.word	0x00030230

000b6664 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6664:	b508      	push	{r3, lr}
   b6666:	4b02      	ldr	r3, [pc, #8]	; (b6670 <hal_spi_is_enabled+0xc>)
   b6668:	681b      	ldr	r3, [r3, #0]
   b666a:	6a1b      	ldr	r3, [r3, #32]
   b666c:	9301      	str	r3, [sp, #4]
   b666e:	bd08      	pop	{r3, pc}
   b6670:	00030230 	.word	0x00030230

000b6674 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6674:	b508      	push	{r3, lr}
   b6676:	4b02      	ldr	r3, [pc, #8]	; (b6680 <hal_spi_info+0xc>)
   b6678:	681b      	ldr	r3, [r3, #0]
   b667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b667c:	9301      	str	r3, [sp, #4]
   b667e:	bd08      	pop	{r3, pc}
   b6680:	00030230 	.word	0x00030230

000b6684 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6684:	b508      	push	{r3, lr}
   b6686:	4b02      	ldr	r3, [pc, #8]	; (b6690 <hal_spi_set_settings+0xc>)
   b6688:	681b      	ldr	r3, [r3, #0]
   b668a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b668c:	9301      	str	r3, [sp, #4]
   b668e:	bd08      	pop	{r3, pc}
   b6690:	00030230 	.word	0x00030230

000b6694 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6694:	b508      	push	{r3, lr}
   b6696:	4b02      	ldr	r3, [pc, #8]	; (b66a0 <hal_spi_acquire+0xc>)
   b6698:	681b      	ldr	r3, [r3, #0]
   b669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b669c:	9301      	str	r3, [sp, #4]
   b669e:	bd08      	pop	{r3, pc}
   b66a0:	00030230 	.word	0x00030230

000b66a4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b66a4:	b508      	push	{r3, lr}
   b66a6:	4b02      	ldr	r3, [pc, #8]	; (b66b0 <hal_spi_release+0xc>)
   b66a8:	681b      	ldr	r3, [r3, #0]
   b66aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b66ac:	9301      	str	r3, [sp, #4]
   b66ae:	bd08      	pop	{r3, pc}
   b66b0:	00030230 	.word	0x00030230

000b66b4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b66b4:	b508      	push	{r3, lr}
   b66b6:	4b02      	ldr	r3, [pc, #8]	; (b66c0 <hal_usart_write+0xc>)
   b66b8:	681b      	ldr	r3, [r3, #0]
   b66ba:	68db      	ldr	r3, [r3, #12]
   b66bc:	9301      	str	r3, [sp, #4]
   b66be:	bd08      	pop	{r3, pc}
   b66c0:	0003023c 	.word	0x0003023c

000b66c4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b66c4:	b508      	push	{r3, lr}
   b66c6:	4b02      	ldr	r3, [pc, #8]	; (b66d0 <hal_usart_available+0xc>)
   b66c8:	681b      	ldr	r3, [r3, #0]
   b66ca:	691b      	ldr	r3, [r3, #16]
   b66cc:	9301      	str	r3, [sp, #4]
   b66ce:	bd08      	pop	{r3, pc}
   b66d0:	0003023c 	.word	0x0003023c

000b66d4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b66d4:	b508      	push	{r3, lr}
   b66d6:	4b02      	ldr	r3, [pc, #8]	; (b66e0 <hal_usart_read+0xc>)
   b66d8:	681b      	ldr	r3, [r3, #0]
   b66da:	695b      	ldr	r3, [r3, #20]
   b66dc:	9301      	str	r3, [sp, #4]
   b66de:	bd08      	pop	{r3, pc}
   b66e0:	0003023c 	.word	0x0003023c

000b66e4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b66e4:	b508      	push	{r3, lr}
   b66e6:	4b02      	ldr	r3, [pc, #8]	; (b66f0 <hal_usart_peek+0xc>)
   b66e8:	681b      	ldr	r3, [r3, #0]
   b66ea:	699b      	ldr	r3, [r3, #24]
   b66ec:	9301      	str	r3, [sp, #4]
   b66ee:	bd08      	pop	{r3, pc}
   b66f0:	0003023c 	.word	0x0003023c

000b66f4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b66f4:	b508      	push	{r3, lr}
   b66f6:	4b02      	ldr	r3, [pc, #8]	; (b6700 <hal_usart_flush+0xc>)
   b66f8:	681b      	ldr	r3, [r3, #0]
   b66fa:	69db      	ldr	r3, [r3, #28]
   b66fc:	9301      	str	r3, [sp, #4]
   b66fe:	bd08      	pop	{r3, pc}
   b6700:	0003023c 	.word	0x0003023c

000b6704 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6704:	b508      	push	{r3, lr}
   b6706:	4b02      	ldr	r3, [pc, #8]	; (b6710 <hal_usart_is_enabled+0xc>)
   b6708:	681b      	ldr	r3, [r3, #0]
   b670a:	6a1b      	ldr	r3, [r3, #32]
   b670c:	9301      	str	r3, [sp, #4]
   b670e:	bd08      	pop	{r3, pc}
   b6710:	0003023c 	.word	0x0003023c

000b6714 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6714:	b508      	push	{r3, lr}
   b6716:	4b02      	ldr	r3, [pc, #8]	; (b6720 <hal_usart_available_data_for_write+0xc>)
   b6718:	681b      	ldr	r3, [r3, #0]
   b671a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b671c:	9301      	str	r3, [sp, #4]
   b671e:	bd08      	pop	{r3, pc}
   b6720:	0003023c 	.word	0x0003023c

000b6724 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6724:	b508      	push	{r3, lr}
   b6726:	4b02      	ldr	r3, [pc, #8]	; (b6730 <hal_usart_init_ex+0xc>)
   b6728:	681b      	ldr	r3, [r3, #0]
   b672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b672c:	9301      	str	r3, [sp, #4]
   b672e:	bd08      	pop	{r3, pc}
   b6730:	0003023c 	.word	0x0003023c

000b6734 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6734:	b508      	push	{r3, lr}
   b6736:	4b02      	ldr	r3, [pc, #8]	; (b6740 <HAL_USB_USART_Init+0xc>)
   b6738:	681b      	ldr	r3, [r3, #0]
   b673a:	681b      	ldr	r3, [r3, #0]
   b673c:	9301      	str	r3, [sp, #4]
   b673e:	bd08      	pop	{r3, pc}
   b6740:	0003024c 	.word	0x0003024c

000b6744 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6744:	b508      	push	{r3, lr}
   b6746:	4b02      	ldr	r3, [pc, #8]	; (b6750 <HAL_USB_USART_Begin+0xc>)
   b6748:	681b      	ldr	r3, [r3, #0]
   b674a:	685b      	ldr	r3, [r3, #4]
   b674c:	9301      	str	r3, [sp, #4]
   b674e:	bd08      	pop	{r3, pc}
   b6750:	0003024c 	.word	0x0003024c

000b6754 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6754:	b508      	push	{r3, lr}
   b6756:	4b02      	ldr	r3, [pc, #8]	; (b6760 <HAL_USB_USART_Available_Data+0xc>)
   b6758:	681b      	ldr	r3, [r3, #0]
   b675a:	691b      	ldr	r3, [r3, #16]
   b675c:	9301      	str	r3, [sp, #4]
   b675e:	bd08      	pop	{r3, pc}
   b6760:	0003024c 	.word	0x0003024c

000b6764 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6764:	b508      	push	{r3, lr}
   b6766:	4b02      	ldr	r3, [pc, #8]	; (b6770 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6768:	681b      	ldr	r3, [r3, #0]
   b676a:	695b      	ldr	r3, [r3, #20]
   b676c:	9301      	str	r3, [sp, #4]
   b676e:	bd08      	pop	{r3, pc}
   b6770:	0003024c 	.word	0x0003024c

000b6774 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6774:	b508      	push	{r3, lr}
   b6776:	4b02      	ldr	r3, [pc, #8]	; (b6780 <HAL_USB_USART_Receive_Data+0xc>)
   b6778:	681b      	ldr	r3, [r3, #0]
   b677a:	699b      	ldr	r3, [r3, #24]
   b677c:	9301      	str	r3, [sp, #4]
   b677e:	bd08      	pop	{r3, pc}
   b6780:	0003024c 	.word	0x0003024c

000b6784 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6784:	b508      	push	{r3, lr}
   b6786:	4b02      	ldr	r3, [pc, #8]	; (b6790 <HAL_USB_USART_Send_Data+0xc>)
   b6788:	681b      	ldr	r3, [r3, #0]
   b678a:	69db      	ldr	r3, [r3, #28]
   b678c:	9301      	str	r3, [sp, #4]
   b678e:	bd08      	pop	{r3, pc}
   b6790:	0003024c 	.word	0x0003024c

000b6794 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6794:	b508      	push	{r3, lr}
   b6796:	4b02      	ldr	r3, [pc, #8]	; (b67a0 <HAL_USB_USART_Flush_Data+0xc>)
   b6798:	681b      	ldr	r3, [r3, #0]
   b679a:	6a1b      	ldr	r3, [r3, #32]
   b679c:	9301      	str	r3, [sp, #4]
   b679e:	bd08      	pop	{r3, pc}
   b67a0:	0003024c 	.word	0x0003024c

000b67a4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b67a4:	b508      	push	{r3, lr}
   b67a6:	4b02      	ldr	r3, [pc, #8]	; (b67b0 <panic_+0xc>)
   b67a8:	681b      	ldr	r3, [r3, #0]
   b67aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b67ac:	9301      	str	r3, [sp, #4]
   b67ae:	bd08      	pop	{r3, pc}
   b67b0:	00030260 	.word	0x00030260

000b67b4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b67b4:	b508      	push	{r3, lr}
   b67b6:	4b02      	ldr	r3, [pc, #8]	; (b67c0 <log_message+0xc>)
   b67b8:	681b      	ldr	r3, [r3, #0]
   b67ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b67bc:	9301      	str	r3, [sp, #4]
   b67be:	bd08      	pop	{r3, pc}
   b67c0:	00030260 	.word	0x00030260

000b67c4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b67c4:	b508      	push	{r3, lr}
   b67c6:	4b02      	ldr	r3, [pc, #8]	; (b67d0 <set_system_mode+0xc>)
   b67c8:	681b      	ldr	r3, [r3, #0]
   b67ca:	685b      	ldr	r3, [r3, #4]
   b67cc:	9301      	str	r3, [sp, #4]
   b67ce:	bd08      	pop	{r3, pc}
   b67d0:	00030220 	.word	0x00030220

000b67d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b67d4:	b508      	push	{r3, lr}
   b67d6:	4b02      	ldr	r3, [pc, #8]	; (b67e0 <system_delay_ms+0xc>)
   b67d8:	681b      	ldr	r3, [r3, #0]
   b67da:	695b      	ldr	r3, [r3, #20]
   b67dc:	9301      	str	r3, [sp, #4]
   b67de:	bd08      	pop	{r3, pc}
   b67e0:	00030220 	.word	0x00030220

000b67e4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b67e4:	b508      	push	{r3, lr}
   b67e6:	4b03      	ldr	r3, [pc, #12]	; (b67f4 <system_ctrl_set_app_request_handler+0x10>)
   b67e8:	681b      	ldr	r3, [r3, #0]
   b67ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b67ee:	9301      	str	r3, [sp, #4]
   b67f0:	bd08      	pop	{r3, pc}
   b67f2:	0000      	.short	0x0000
   b67f4:	00030220 	.word	0x00030220

000b67f8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b67f8:	b508      	push	{r3, lr}
   b67fa:	4b03      	ldr	r3, [pc, #12]	; (b6808 <system_ctrl_set_result+0x10>)
   b67fc:	681b      	ldr	r3, [r3, #0]
   b67fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6802:	9301      	str	r3, [sp, #4]
   b6804:	bd08      	pop	{r3, pc}
   b6806:	0000      	.short	0x0000
   b6808:	00030220 	.word	0x00030220

000b680c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b680c:	b508      	push	{r3, lr}
   b680e:	4b02      	ldr	r3, [pc, #8]	; (b6818 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6810:	681b      	ldr	r3, [r3, #0]
   b6812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6814:	9301      	str	r3, [sp, #4]
   b6816:	bd08      	pop	{r3, pc}
   b6818:	00030244 	.word	0x00030244

000b681c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b681c:	b508      	push	{r3, lr}
   b681e:	4b02      	ldr	r3, [pc, #8]	; (b6828 <network_connect+0xc>)
   b6820:	681b      	ldr	r3, [r3, #0]
   b6822:	685b      	ldr	r3, [r3, #4]
   b6824:	9301      	str	r3, [sp, #4]
   b6826:	bd08      	pop	{r3, pc}
   b6828:	00030240 	.word	0x00030240

000b682c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b682c:	b508      	push	{r3, lr}
   b682e:	4b02      	ldr	r3, [pc, #8]	; (b6838 <network_connecting+0xc>)
   b6830:	681b      	ldr	r3, [r3, #0]
   b6832:	689b      	ldr	r3, [r3, #8]
   b6834:	9301      	str	r3, [sp, #4]
   b6836:	bd08      	pop	{r3, pc}
   b6838:	00030240 	.word	0x00030240

000b683c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b683c:	b508      	push	{r3, lr}
   b683e:	4b02      	ldr	r3, [pc, #8]	; (b6848 <network_disconnect+0xc>)
   b6840:	681b      	ldr	r3, [r3, #0]
   b6842:	68db      	ldr	r3, [r3, #12]
   b6844:	9301      	str	r3, [sp, #4]
   b6846:	bd08      	pop	{r3, pc}
   b6848:	00030240 	.word	0x00030240

000b684c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b684c:	b508      	push	{r3, lr}
   b684e:	4b02      	ldr	r3, [pc, #8]	; (b6858 <network_ready+0xc>)
   b6850:	681b      	ldr	r3, [r3, #0]
   b6852:	691b      	ldr	r3, [r3, #16]
   b6854:	9301      	str	r3, [sp, #4]
   b6856:	bd08      	pop	{r3, pc}
   b6858:	00030240 	.word	0x00030240

000b685c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b685c:	b508      	push	{r3, lr}
   b685e:	4b02      	ldr	r3, [pc, #8]	; (b6868 <network_on+0xc>)
   b6860:	681b      	ldr	r3, [r3, #0]
   b6862:	695b      	ldr	r3, [r3, #20]
   b6864:	9301      	str	r3, [sp, #4]
   b6866:	bd08      	pop	{r3, pc}
   b6868:	00030240 	.word	0x00030240

000b686c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b686c:	b508      	push	{r3, lr}
   b686e:	4b02      	ldr	r3, [pc, #8]	; (b6878 <network_off+0xc>)
   b6870:	681b      	ldr	r3, [r3, #0]
   b6872:	699b      	ldr	r3, [r3, #24]
   b6874:	9301      	str	r3, [sp, #4]
   b6876:	bd08      	pop	{r3, pc}
   b6878:	00030240 	.word	0x00030240

000b687c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b687c:	b508      	push	{r3, lr}
   b687e:	4b02      	ldr	r3, [pc, #8]	; (b6888 <network_listen+0xc>)
   b6880:	681b      	ldr	r3, [r3, #0]
   b6882:	69db      	ldr	r3, [r3, #28]
   b6884:	9301      	str	r3, [sp, #4]
   b6886:	bd08      	pop	{r3, pc}
   b6888:	00030240 	.word	0x00030240

000b688c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b688c:	b508      	push	{r3, lr}
   b688e:	4b02      	ldr	r3, [pc, #8]	; (b6898 <network_listening+0xc>)
   b6890:	681b      	ldr	r3, [r3, #0]
   b6892:	6a1b      	ldr	r3, [r3, #32]
   b6894:	9301      	str	r3, [sp, #4]
   b6896:	bd08      	pop	{r3, pc}
   b6898:	00030240 	.word	0x00030240

000b689c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b689c:	b508      	push	{r3, lr}
   b689e:	4b02      	ldr	r3, [pc, #8]	; (b68a8 <network_set_listen_timeout+0xc>)
   b68a0:	681b      	ldr	r3, [r3, #0]
   b68a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b68a4:	9301      	str	r3, [sp, #4]
   b68a6:	bd08      	pop	{r3, pc}
   b68a8:	00030240 	.word	0x00030240

000b68ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b68ac:	b508      	push	{r3, lr}
   b68ae:	4b02      	ldr	r3, [pc, #8]	; (b68b8 <network_get_listen_timeout+0xc>)
   b68b0:	681b      	ldr	r3, [r3, #0]
   b68b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b68b4:	9301      	str	r3, [sp, #4]
   b68b6:	bd08      	pop	{r3, pc}
   b68b8:	00030240 	.word	0x00030240

000b68bc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b68bc:	b508      	push	{r3, lr}
   b68be:	4b02      	ldr	r3, [pc, #8]	; (b68c8 <network_is_on+0xc>)
   b68c0:	681b      	ldr	r3, [r3, #0]
   b68c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b68c4:	9301      	str	r3, [sp, #4]
   b68c6:	bd08      	pop	{r3, pc}
   b68c8:	00030240 	.word	0x00030240

000b68cc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b68cc:	b508      	push	{r3, lr}
   b68ce:	4b02      	ldr	r3, [pc, #8]	; (b68d8 <network_is_off+0xc>)
   b68d0:	681b      	ldr	r3, [r3, #0]
   b68d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b68d4:	9301      	str	r3, [sp, #4]
   b68d6:	bd08      	pop	{r3, pc}
   b68d8:	00030240 	.word	0x00030240

000b68dc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b68dc:	b508      	push	{r3, lr}
   b68de:	4b02      	ldr	r3, [pc, #8]	; (b68e8 <malloc+0xc>)
   b68e0:	681b      	ldr	r3, [r3, #0]
   b68e2:	681b      	ldr	r3, [r3, #0]
   b68e4:	9301      	str	r3, [sp, #4]
   b68e6:	bd08      	pop	{r3, pc}
   b68e8:	0003021c 	.word	0x0003021c

000b68ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b68ec:	b508      	push	{r3, lr}
   b68ee:	4b02      	ldr	r3, [pc, #8]	; (b68f8 <free+0xc>)
   b68f0:	681b      	ldr	r3, [r3, #0]
   b68f2:	685b      	ldr	r3, [r3, #4]
   b68f4:	9301      	str	r3, [sp, #4]
   b68f6:	bd08      	pop	{r3, pc}
   b68f8:	0003021c 	.word	0x0003021c

000b68fc <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b68fc:	b508      	push	{r3, lr}
   b68fe:	4b02      	ldr	r3, [pc, #8]	; (b6908 <sprintf+0xc>)
   b6900:	681b      	ldr	r3, [r3, #0]
   b6902:	68db      	ldr	r3, [r3, #12]
   b6904:	9301      	str	r3, [sp, #4]
   b6906:	bd08      	pop	{r3, pc}
   b6908:	0003021c 	.word	0x0003021c

000b690c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b690c:	b508      	push	{r3, lr}
   b690e:	4b02      	ldr	r3, [pc, #8]	; (b6918 <vsnprintf+0xc>)
   b6910:	681b      	ldr	r3, [r3, #0]
   b6912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6914:	9301      	str	r3, [sp, #4]
   b6916:	bd08      	pop	{r3, pc}
   b6918:	0003021c 	.word	0x0003021c

000b691c <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b691c:	b508      	push	{r3, lr}
   b691e:	4b02      	ldr	r3, [pc, #8]	; (b6928 <_malloc_r+0xc>)
   b6920:	681b      	ldr	r3, [r3, #0]
   b6922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6924:	9301      	str	r3, [sp, #4]
   b6926:	bd08      	pop	{r3, pc}
   b6928:	0003021c 	.word	0x0003021c

000b692c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b692c:	b508      	push	{r3, lr}
   b692e:	4b02      	ldr	r3, [pc, #8]	; (b6938 <__errno+0xc>)
   b6930:	681b      	ldr	r3, [r3, #0]
   b6932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6934:	9301      	str	r3, [sp, #4]
   b6936:	bd08      	pop	{r3, pc}
   b6938:	0003021c 	.word	0x0003021c

000b693c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b693c:	b508      	push	{r3, lr}
   b693e:	4b02      	ldr	r3, [pc, #8]	; (b6948 <__assert_func+0xc>)
   b6940:	681b      	ldr	r3, [r3, #0]
   b6942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6944:	9301      	str	r3, [sp, #4]
   b6946:	bd08      	pop	{r3, pc}
   b6948:	0003021c 	.word	0x0003021c

000b694c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b694c:	b508      	push	{r3, lr}
   b694e:	4b02      	ldr	r3, [pc, #8]	; (b6958 <newlib_impure_ptr_callback+0xc>)
   b6950:	681b      	ldr	r3, [r3, #0]
   b6952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6954:	9301      	str	r3, [sp, #4]
   b6956:	bd08      	pop	{r3, pc}
   b6958:	0003021c 	.word	0x0003021c

000b695c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b695c:	2100      	movs	r1, #0
   b695e:	f7ff bf39 	b.w	b67d4 <system_delay_ms>
	...

000b6964 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6964:	4802      	ldr	r0, [pc, #8]	; (b6970 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6966:	2300      	movs	r3, #0
   b6968:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b696a:	f7ff bd2b 	b.w	b63c4 <os_mutex_recursive_create>
   b696e:	bf00      	nop
   b6970:	2003e6c4 	.word	0x2003e6c4

000b6974 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6974:	2200      	movs	r2, #0
   b6976:	6840      	ldr	r0, [r0, #4]
   b6978:	4611      	mov	r1, r2
   b697a:	f7ff bf87 	b.w	b688c <network_listening>

000b697e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b697e:	2200      	movs	r2, #0
   b6980:	6840      	ldr	r0, [r0, #4]
   b6982:	4611      	mov	r1, r2
   b6984:	f7ff bf92 	b.w	b68ac <network_get_listen_timeout>

000b6988 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6988:	6840      	ldr	r0, [r0, #4]
   b698a:	2200      	movs	r2, #0
   b698c:	f7ff bf86 	b.w	b689c <network_set_listen_timeout>

000b6990 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6990:	6840      	ldr	r0, [r0, #4]
   b6992:	2200      	movs	r2, #0
   b6994:	f081 0101 	eor.w	r1, r1, #1
   b6998:	f7ff bf70 	b.w	b687c <network_listen>

000b699c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b699c:	2300      	movs	r3, #0
   b699e:	6840      	ldr	r0, [r0, #4]
   b69a0:	461a      	mov	r2, r3
   b69a2:	4619      	mov	r1, r3
   b69a4:	f7ff bf62 	b.w	b686c <network_off>

000b69a8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b69a8:	2300      	movs	r3, #0
   b69aa:	6840      	ldr	r0, [r0, #4]
   b69ac:	461a      	mov	r2, r3
   b69ae:	4619      	mov	r1, r3
   b69b0:	f7ff bf54 	b.w	b685c <network_on>

000b69b4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b69b4:	2200      	movs	r2, #0
   b69b6:	6840      	ldr	r0, [r0, #4]
   b69b8:	4611      	mov	r1, r2
   b69ba:	f7ff bf47 	b.w	b684c <network_ready>

000b69be <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b69be:	2200      	movs	r2, #0
   b69c0:	6840      	ldr	r0, [r0, #4]
   b69c2:	4611      	mov	r1, r2
   b69c4:	f7ff bf32 	b.w	b682c <network_connecting>

000b69c8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b69c8:	6840      	ldr	r0, [r0, #4]
   b69ca:	2200      	movs	r2, #0
   b69cc:	2102      	movs	r1, #2
   b69ce:	f7ff bf35 	b.w	b683c <network_disconnect>

000b69d2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b69d2:	2300      	movs	r3, #0
   b69d4:	6840      	ldr	r0, [r0, #4]
   b69d6:	461a      	mov	r2, r3
   b69d8:	f7ff bf20 	b.w	b681c <network_connect>

000b69dc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b69dc:	4b02      	ldr	r3, [pc, #8]	; (b69e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b69de:	2203      	movs	r2, #3
   b69e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b69e2:	4a02      	ldr	r2, [pc, #8]	; (b69ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b69e4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b69e6:	4770      	bx	lr
   b69e8:	2003e6c8 	.word	0x2003e6c8
   b69ec:	000bcbd8 	.word	0x000bcbd8

000b69f0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b69f0:	4770      	bx	lr

000b69f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b69f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b69f4:	4606      	mov	r6, r0
   b69f6:	4615      	mov	r5, r2
   b69f8:	460c      	mov	r4, r1
   b69fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b69fc:	42bc      	cmp	r4, r7
   b69fe:	d006      	beq.n	b6a0e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6a00:	6833      	ldr	r3, [r6, #0]
   b6a02:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6a06:	689b      	ldr	r3, [r3, #8]
   b6a08:	4630      	mov	r0, r6
   b6a0a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6a0c:	e7f6      	b.n	b69fc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6a0e:	4628      	mov	r0, r5
   b6a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a12 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6a12:	7c00      	ldrb	r0, [r0, #16]
   b6a14:	2200      	movs	r2, #0
   b6a16:	f7ff bd55 	b.w	b64c4 <hal_i2c_write>

000b6a1a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6a1a:	7c00      	ldrb	r0, [r0, #16]
   b6a1c:	2100      	movs	r1, #0
   b6a1e:	f7ff bd59 	b.w	b64d4 <hal_i2c_available>

000b6a22 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6a22:	7c00      	ldrb	r0, [r0, #16]
   b6a24:	2100      	movs	r1, #0
   b6a26:	f7ff bd5d 	b.w	b64e4 <hal_i2c_read>

000b6a2a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6a2a:	7c00      	ldrb	r0, [r0, #16]
   b6a2c:	2100      	movs	r1, #0
   b6a2e:	f7ff bd61 	b.w	b64f4 <hal_i2c_peek>

000b6a32 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6a32:	7c00      	ldrb	r0, [r0, #16]
   b6a34:	2100      	movs	r1, #0
   b6a36:	f7ff bd65 	b.w	b6504 <hal_i2c_flush>

000b6a3a <_ZN7TwoWireD0Ev>:
   b6a3a:	b510      	push	{r4, lr}
   b6a3c:	2114      	movs	r1, #20
   b6a3e:	4604      	mov	r4, r0
   b6a40:	f7fd fb2d 	bl	b409e <_ZdlPvj>
   b6a44:	4620      	mov	r0, r4
   b6a46:	bd10      	pop	{r4, pc}

000b6a48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6a48:	b538      	push	{r3, r4, r5, lr}
   b6a4a:	4604      	mov	r4, r0
   b6a4c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6a52:	2200      	movs	r2, #0
   b6a54:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6a58:	4b09      	ldr	r3, [pc, #36]	; (b6a80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6a5a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6a5c:	4608      	mov	r0, r1
   b6a5e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6a60:	4629      	mov	r1, r5
   b6a62:	f7ff fd5f 	bl	b6524 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6a66:	30bf      	adds	r0, #191	; 0xbf
   b6a68:	d108      	bne.n	b6a7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6a6a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6a6c:	07db      	lsls	r3, r3, #31
   b6a6e:	d505      	bpl.n	b6a7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6a70:	6868      	ldr	r0, [r5, #4]
   b6a72:	f7ff ff3b 	bl	b68ec <free>
    free(conf.tx_buffer);
   b6a76:	68e8      	ldr	r0, [r5, #12]
   b6a78:	f7ff ff38 	bl	b68ec <free>
}
   b6a7c:	4620      	mov	r0, r4
   b6a7e:	bd38      	pop	{r3, r4, r5, pc}
   b6a80:	000bcc14 	.word	0x000bcc14

000b6a84 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6a84:	2300      	movs	r3, #0
   b6a86:	7c00      	ldrb	r0, [r0, #16]
   b6a88:	461a      	mov	r2, r3
   b6a8a:	4619      	mov	r1, r3
   b6a8c:	f7ff bd02 	b.w	b6494 <hal_i2c_begin>

000b6a90 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6a90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6a92:	2200      	movs	r2, #0
   b6a94:	2314      	movs	r3, #20
   b6a96:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6a9a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6a9e:	780b      	ldrb	r3, [r1, #0]
   b6aa0:	f88d 3008 	strb.w	r3, [sp, #8]
   b6aa4:	684b      	ldr	r3, [r1, #4]
   b6aa6:	9303      	str	r3, [sp, #12]
   b6aa8:	68cb      	ldr	r3, [r1, #12]
   b6aaa:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6aac:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6aae:	7a0b      	ldrb	r3, [r1, #8]
   b6ab0:	9305      	str	r3, [sp, #20]
   b6ab2:	a901      	add	r1, sp, #4
   b6ab4:	f7ff fd3e 	bl	b6534 <hal_i2c_request_ex>
}
   b6ab8:	b007      	add	sp, #28
   b6aba:	f85d fb04 	ldr.w	pc, [sp], #4

000b6abe <_ZN7TwoWire11requestFromEhjh>:
{
   b6abe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6ac0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6ac2:	f88d 1000 	strb.w	r1, [sp]
   b6ac6:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6aca:	9103      	str	r1, [sp, #12]
   b6acc:	bf18      	it	ne
   b6ace:	2301      	movne	r3, #1
   b6ad0:	4669      	mov	r1, sp
    size_ = size;
   b6ad2:	9201      	str	r2, [sp, #4]
   b6ad4:	f88d 3008 	strb.w	r3, [sp, #8]
   b6ad8:	f7ff ffda 	bl	b6a90 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6adc:	b005      	add	sp, #20
   b6ade:	f85d fb04 	ldr.w	pc, [sp], #4

000b6ae2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6ae2:	2301      	movs	r3, #1
   b6ae4:	f7ff bfeb 	b.w	b6abe <_ZN7TwoWire11requestFromEhjh>

000b6ae8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6ae8:	7c00      	ldrb	r0, [r0, #16]
   b6aea:	2200      	movs	r2, #0
   b6aec:	f7ff bcda 	b.w	b64a4 <hal_i2c_begin_transmission>

000b6af0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6af0:	b2c9      	uxtb	r1, r1
   b6af2:	f7ff bff9 	b.w	b6ae8 <_ZN7TwoWire17beginTransmissionEh>

000b6af6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6af6:	7c00      	ldrb	r0, [r0, #16]
   b6af8:	2200      	movs	r2, #0
   b6afa:	f7ff bcdb 	b.w	b64b4 <hal_i2c_end_transmission>

000b6afe <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6afe:	2101      	movs	r1, #1
   b6b00:	f7ff bff9 	b.w	b6af6 <_ZN7TwoWire15endTransmissionEh>

000b6b04 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6b04:	4770      	bx	lr

000b6b06 <_ZN9IPAddressD0Ev>:
   b6b06:	b510      	push	{r4, lr}
   b6b08:	2118      	movs	r1, #24
   b6b0a:	4604      	mov	r4, r0
   b6b0c:	f7fd fac7 	bl	b409e <_ZdlPvj>
   b6b10:	4620      	mov	r0, r4
   b6b12:	bd10      	pop	{r4, pc}

000b6b14 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6b14:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6b16:	7d03      	ldrb	r3, [r0, #20]
   b6b18:	2b06      	cmp	r3, #6
{
   b6b1a:	b08d      	sub	sp, #52	; 0x34
   b6b1c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6b1e:	f100 0704 	add.w	r7, r0, #4
   b6b22:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6b26:	d012      	beq.n	b6b4e <_ZNK9IPAddress7printToER5Print+0x3a>
   b6b28:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6b2c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6b30:	220a      	movs	r2, #10
   b6b32:	4630      	mov	r0, r6
   b6b34:	f000 f973 	bl	b6e1e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6b38:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6b3a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6b3c:	d019      	beq.n	b6b72 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6b3e:	2c00      	cmp	r4, #0
   b6b40:	d0f4      	beq.n	b6b2c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6b42:	212e      	movs	r1, #46	; 0x2e
   b6b44:	4630      	mov	r0, r6
   b6b46:	f000 f951 	bl	b6dec <_ZN5Print5printEc>
   b6b4a:	4404      	add	r4, r0
   b6b4c:	e7ee      	b.n	b6b2c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6b4e:	232f      	movs	r3, #47	; 0x2f
   b6b50:	466a      	mov	r2, sp
   b6b52:	4639      	mov	r1, r7
   b6b54:	200a      	movs	r0, #10
		buf[0] = 0;
   b6b56:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6b5a:	f7ff fcfb 	bl	b6554 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6b5e:	4668      	mov	r0, sp
   b6b60:	f003 fb54 	bl	ba20c <strlen>
   b6b64:	6833      	ldr	r3, [r6, #0]
   b6b66:	4602      	mov	r2, r0
   b6b68:	68db      	ldr	r3, [r3, #12]
   b6b6a:	4669      	mov	r1, sp
   b6b6c:	4630      	mov	r0, r6
   b6b6e:	4798      	blx	r3
   b6b70:	4604      	mov	r4, r0
    }
    return n;
}
   b6b72:	4620      	mov	r0, r4
   b6b74:	b00d      	add	sp, #52	; 0x34
   b6b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6b78 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6b78:	b510      	push	{r4, lr}
   b6b7a:	4b05      	ldr	r3, [pc, #20]	; (b6b90 <_ZN9IPAddressC1Ev+0x18>)
   b6b7c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6b7e:	2211      	movs	r2, #17
   b6b80:	f840 3b04 	str.w	r3, [r0], #4
   b6b84:	2100      	movs	r1, #0
   b6b86:	f003 faf8 	bl	ba17a <memset>
}
   b6b8a:	4620      	mov	r0, r4
   b6b8c:	bd10      	pop	{r4, pc}
   b6b8e:	bf00      	nop
   b6b90:	000bcc3c 	.word	0x000bcc3c

000b6b94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6b94:	4603      	mov	r3, r0
   b6b96:	4a07      	ldr	r2, [pc, #28]	; (b6bb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6b98:	b510      	push	{r4, lr}
   b6b9a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6b9e:	f101 0210 	add.w	r2, r1, #16
   b6ba2:	f851 4b04 	ldr.w	r4, [r1], #4
   b6ba6:	f843 4b04 	str.w	r4, [r3], #4
   b6baa:	4291      	cmp	r1, r2
   b6bac:	d1f9      	bne.n	b6ba2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6bae:	780a      	ldrb	r2, [r1, #0]
   b6bb0:	701a      	strb	r2, [r3, #0]
}
   b6bb2:	bd10      	pop	{r4, pc}
   b6bb4:	000bcc3c 	.word	0x000bcc3c

000b6bb8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6bb8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6bba:	2b04      	cmp	r3, #4
   b6bbc:	d104      	bne.n	b6bc8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6bbe:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6bc0:	3800      	subs	r0, #0
   b6bc2:	bf18      	it	ne
   b6bc4:	2001      	movne	r0, #1
   b6bc6:	4770      	bx	lr
    } else if (version() == 6) {
   b6bc8:	2b06      	cmp	r3, #6
   b6bca:	d107      	bne.n	b6bdc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6bcc:	6843      	ldr	r3, [r0, #4]
   b6bce:	b93b      	cbnz	r3, b6be0 <_ZNK9IPAddresscvbEv+0x28>
   b6bd0:	6883      	ldr	r3, [r0, #8]
   b6bd2:	b92b      	cbnz	r3, b6be0 <_ZNK9IPAddresscvbEv+0x28>
   b6bd4:	68c3      	ldr	r3, [r0, #12]
   b6bd6:	b91b      	cbnz	r3, b6be0 <_ZNK9IPAddresscvbEv+0x28>
   b6bd8:	6900      	ldr	r0, [r0, #16]
   b6bda:	e7f1      	b.n	b6bc0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6bdc:	2000      	movs	r0, #0
   b6bde:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6be0:	2001      	movs	r0, #1
}
   b6be2:	4770      	bx	lr

000b6be4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6be4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6be6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6bea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6bee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6bf2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6bf6:	2304      	movs	r3, #4
   b6bf8:	6041      	str	r1, [r0, #4]
   b6bfa:	7503      	strb	r3, [r0, #20]
}
   b6bfc:	bd10      	pop	{r4, pc}
	...

000b6c00 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6c00:	b507      	push	{r0, r1, r2, lr}
   b6c02:	4b06      	ldr	r3, [pc, #24]	; (b6c1c <_ZN9IPAddressC1EPKh+0x1c>)
   b6c04:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6c06:	78cb      	ldrb	r3, [r1, #3]
   b6c08:	9300      	str	r3, [sp, #0]
   b6c0a:	788b      	ldrb	r3, [r1, #2]
   b6c0c:	784a      	ldrb	r2, [r1, #1]
   b6c0e:	7809      	ldrb	r1, [r1, #0]
   b6c10:	f7ff ffe8 	bl	b6be4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6c14:	b003      	add	sp, #12
   b6c16:	f85d fb04 	ldr.w	pc, [sp], #4
   b6c1a:	bf00      	nop
   b6c1c:	000bcc3c 	.word	0x000bcc3c

000b6c20 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6c20:	4b01      	ldr	r3, [pc, #4]	; (b6c28 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6c22:	4a02      	ldr	r2, [pc, #8]	; (b6c2c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6c24:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6c26:	4770      	bx	lr
   b6c28:	2003e6d0 	.word	0x2003e6d0
   b6c2c:	000bcc48 	.word	0x000bcc48

000b6c30 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6c30:	2300      	movs	r3, #0
   b6c32:	6840      	ldr	r0, [r0, #4]
   b6c34:	461a      	mov	r2, r3
   b6c36:	f7ff bdf1 	b.w	b681c <network_connect>

000b6c3a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6c3a:	6840      	ldr	r0, [r0, #4]
   b6c3c:	2200      	movs	r2, #0
   b6c3e:	2102      	movs	r1, #2
   b6c40:	f7ff bdfc 	b.w	b683c <network_disconnect>

000b6c44 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6c44:	2200      	movs	r2, #0
   b6c46:	6840      	ldr	r0, [r0, #4]
   b6c48:	4611      	mov	r1, r2
   b6c4a:	f7ff bdef 	b.w	b682c <network_connecting>

000b6c4e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6c4e:	2200      	movs	r2, #0
   b6c50:	6840      	ldr	r0, [r0, #4]
   b6c52:	4611      	mov	r1, r2
   b6c54:	f7ff bdfa 	b.w	b684c <network_ready>

000b6c58 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6c58:	2300      	movs	r3, #0
   b6c5a:	6840      	ldr	r0, [r0, #4]
   b6c5c:	461a      	mov	r2, r3
   b6c5e:	4619      	mov	r1, r3
   b6c60:	f7ff bdfc 	b.w	b685c <network_on>

000b6c64 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6c64:	2300      	movs	r3, #0
   b6c66:	6840      	ldr	r0, [r0, #4]
   b6c68:	461a      	mov	r2, r3
   b6c6a:	4619      	mov	r1, r3
   b6c6c:	f7ff bdfe 	b.w	b686c <network_off>

000b6c70 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6c70:	6840      	ldr	r0, [r0, #4]
   b6c72:	2100      	movs	r1, #0
   b6c74:	f7ff be22 	b.w	b68bc <network_is_on>

000b6c78 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6c78:	6840      	ldr	r0, [r0, #4]
   b6c7a:	2100      	movs	r1, #0
   b6c7c:	f7ff be26 	b.w	b68cc <network_is_off>

000b6c80 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6c80:	6840      	ldr	r0, [r0, #4]
   b6c82:	2200      	movs	r2, #0
   b6c84:	f081 0101 	eor.w	r1, r1, #1
   b6c88:	f7ff bdf8 	b.w	b687c <network_listen>

000b6c8c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6c8c:	6840      	ldr	r0, [r0, #4]
   b6c8e:	2200      	movs	r2, #0
   b6c90:	f7ff be04 	b.w	b689c <network_set_listen_timeout>

000b6c94 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6c94:	2200      	movs	r2, #0
   b6c96:	6840      	ldr	r0, [r0, #4]
   b6c98:	4611      	mov	r1, r2
   b6c9a:	f7ff be07 	b.w	b68ac <network_get_listen_timeout>

000b6c9e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6c9e:	2200      	movs	r2, #0
   b6ca0:	6840      	ldr	r0, [r0, #4]
   b6ca2:	4611      	mov	r1, r2
   b6ca4:	f7ff bdf2 	b.w	b688c <network_listening>

000b6ca8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6cac:	b095      	sub	sp, #84	; 0x54
   b6cae:	4614      	mov	r4, r2
   b6cb0:	460d      	mov	r5, r1
   b6cb2:	4607      	mov	r7, r0
    IPAddress addr;
   b6cb4:	f7ff ff60 	bl	b6b78 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6cb8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6cba:	221c      	movs	r2, #28
   b6cbc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6cbe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6cc0:	f003 fa5b 	bl	ba17a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6cc4:	2340      	movs	r3, #64	; 0x40
   b6cc6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6cc8:	4620      	mov	r0, r4
   b6cca:	466b      	mov	r3, sp
   b6ccc:	aa0c      	add	r2, sp, #48	; 0x30
   b6cce:	2100      	movs	r1, #0
   b6cd0:	f7ff fc60 	bl	b6594 <netdb_getaddrinfo>
    if (!r) {
   b6cd4:	4604      	mov	r4, r0
   b6cd6:	2800      	cmp	r0, #0
   b6cd8:	d14b      	bne.n	b6d72 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6cda:	4602      	mov	r2, r0
   b6cdc:	2101      	movs	r1, #1
   b6cde:	6868      	ldr	r0, [r5, #4]
   b6ce0:	f7ff fdb4 	bl	b684c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ce4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6ce6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ce8:	4622      	mov	r2, r4
   b6cea:	6868      	ldr	r0, [r5, #4]
   b6cec:	f7ff fdae 	bl	b684c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6cf0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6cf2:	4681      	mov	r9, r0
        bool ok = false;
   b6cf4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6cf6:	2e00      	cmp	r6, #0
   b6cf8:	d03b      	beq.n	b6d72 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6cfa:	2900      	cmp	r1, #0
   b6cfc:	d139      	bne.n	b6d72 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6cfe:	6873      	ldr	r3, [r6, #4]
   b6d00:	2b02      	cmp	r3, #2
   b6d02:	d003      	beq.n	b6d0c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6d04:	2b0a      	cmp	r3, #10
   b6d06:	d011      	beq.n	b6d2c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d08:	69f6      	ldr	r6, [r6, #28]
   b6d0a:	e7f4      	b.n	b6cf6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6d0c:	f1b8 0f00 	cmp.w	r8, #0
   b6d10:	d0fa      	beq.n	b6d08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6d12:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6d14:	a806      	add	r0, sp, #24
   b6d16:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6d18:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6d1a:	f7ff ff71 	bl	b6c00 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d20:	1d3c      	adds	r4, r7, #4
   b6d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d24:	682b      	ldr	r3, [r5, #0]
   b6d26:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6d28:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6d2a:	e7ed      	b.n	b6d08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6d2c:	f1b9 0f00 	cmp.w	r9, #0
   b6d30:	d0ea      	beq.n	b6d08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6d32:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6d34:	2210      	movs	r2, #16
   b6d36:	a801      	add	r0, sp, #4
   b6d38:	f003 fa1f 	bl	ba17a <memset>
                    a.v = 6;
   b6d3c:	2306      	movs	r3, #6
   b6d3e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6d42:	ad01      	add	r5, sp, #4
   b6d44:	f104 0308 	add.w	r3, r4, #8
   b6d48:	3418      	adds	r4, #24
   b6d4a:	6818      	ldr	r0, [r3, #0]
   b6d4c:	6859      	ldr	r1, [r3, #4]
   b6d4e:	462a      	mov	r2, r5
   b6d50:	c203      	stmia	r2!, {r0, r1}
   b6d52:	3308      	adds	r3, #8
   b6d54:	42a3      	cmp	r3, r4
   b6d56:	4615      	mov	r5, r2
   b6d58:	d1f7      	bne.n	b6d4a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6d5a:	a901      	add	r1, sp, #4
   b6d5c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6d5e:	ad07      	add	r5, sp, #28
   b6d60:	f7ff ff18 	bl	b6b94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d66:	1d3c      	adds	r4, r7, #4
   b6d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d6a:	682b      	ldr	r3, [r5, #0]
   b6d6c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6d6e:	4649      	mov	r1, r9
   b6d70:	e7ca      	b.n	b6d08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6d72:	9800      	ldr	r0, [sp, #0]
   b6d74:	f7ff fc06 	bl	b6584 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6d78:	4638      	mov	r0, r7
   b6d7a:	b015      	add	sp, #84	; 0x54
   b6d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6d80 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6d80:	4b02      	ldr	r3, [pc, #8]	; (b6d8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6d82:	4a03      	ldr	r2, [pc, #12]	; (b6d90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6d84:	601a      	str	r2, [r3, #0]
   b6d86:	2200      	movs	r2, #0
   b6d88:	605a      	str	r2, [r3, #4]

} // spark
   b6d8a:	4770      	bx	lr
   b6d8c:	2003e6d4 	.word	0x2003e6d4
   b6d90:	000bcc54 	.word	0x000bcc54

000b6d94 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d96:	4606      	mov	r6, r0
   b6d98:	460d      	mov	r5, r1
  size_t n = 0;
   b6d9a:	188f      	adds	r7, r1, r2
   b6d9c:	2400      	movs	r4, #0
  while (size--) {
   b6d9e:	42bd      	cmp	r5, r7
   b6da0:	d00c      	beq.n	b6dbc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6da2:	6833      	ldr	r3, [r6, #0]
   b6da4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6da8:	689b      	ldr	r3, [r3, #8]
   b6daa:	4630      	mov	r0, r6
   b6dac:	4798      	blx	r3
     if (chunk>=0)
   b6dae:	1e03      	subs	r3, r0, #0
   b6db0:	db01      	blt.n	b6db6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6db2:	441c      	add	r4, r3
  while (size--) {
   b6db4:	e7f3      	b.n	b6d9e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6db6:	2c00      	cmp	r4, #0
   b6db8:	bf08      	it	eq
   b6dba:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6dbc:	4620      	mov	r0, r4
   b6dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6dc0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6dc0:	b513      	push	{r0, r1, r4, lr}
   b6dc2:	4604      	mov	r4, r0
    }
   b6dc4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6dc6:	b159      	cbz	r1, b6de0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6dc8:	9101      	str	r1, [sp, #4]
   b6dca:	f003 fa1f 	bl	ba20c <strlen>
   b6dce:	6823      	ldr	r3, [r4, #0]
   b6dd0:	9901      	ldr	r1, [sp, #4]
   b6dd2:	68db      	ldr	r3, [r3, #12]
   b6dd4:	4602      	mov	r2, r0
   b6dd6:	4620      	mov	r0, r4
    }
   b6dd8:	b002      	add	sp, #8
   b6dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6dde:	4718      	bx	r3
    }
   b6de0:	b002      	add	sp, #8
   b6de2:	bd10      	pop	{r4, pc}

000b6de4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6de4:	b508      	push	{r3, lr}
  return write(str);
   b6de6:	f7ff ffeb 	bl	b6dc0 <_ZN5Print5writeEPKc>
}
   b6dea:	bd08      	pop	{r3, pc}

000b6dec <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6dec:	6803      	ldr	r3, [r0, #0]
   b6dee:	689b      	ldr	r3, [r3, #8]
   b6df0:	4718      	bx	r3

000b6df2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6df2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6df4:	210d      	movs	r1, #13
{
   b6df6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6df8:	f7ff fff8 	bl	b6dec <_ZN5Print5printEc>
  n += print('\n');
   b6dfc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6dfe:	4604      	mov	r4, r0
  n += print('\n');
   b6e00:	4628      	mov	r0, r5
   b6e02:	f7ff fff3 	bl	b6dec <_ZN5Print5printEc>
  return n;
}
   b6e06:	4420      	add	r0, r4
   b6e08:	bd38      	pop	{r3, r4, r5, pc}

000b6e0a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6e0a:	b538      	push	{r3, r4, r5, lr}
   b6e0c:	4605      	mov	r5, r0
  return write(str);
   b6e0e:	f7ff ffd7 	bl	b6dc0 <_ZN5Print5writeEPKc>
   b6e12:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6e14:	4628      	mov	r0, r5
   b6e16:	f7ff ffec 	bl	b6df2 <_ZN5Print7printlnEv>
  return n;
}
   b6e1a:	4420      	add	r0, r4
   b6e1c:	bd38      	pop	{r3, r4, r5, pc}

000b6e1e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6e1e:	b530      	push	{r4, r5, lr}
   b6e20:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6e22:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6e24:	2a01      	cmp	r2, #1
  *str = '\0';
   b6e26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6e2a:	bf98      	it	ls
   b6e2c:	220a      	movls	r2, #10
   b6e2e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6e30:	460d      	mov	r5, r1
   b6e32:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6e36:	fb01 5312 	mls	r3, r1, r2, r5
   b6e3a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6e3e:	2b09      	cmp	r3, #9
   b6e40:	bf94      	ite	ls
   b6e42:	3330      	addls	r3, #48	; 0x30
   b6e44:	3337      	addhi	r3, #55	; 0x37
   b6e46:	b2db      	uxtb	r3, r3
  } while(n);
   b6e48:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6e4a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6e4e:	d9ef      	bls.n	b6e30 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6e50:	4621      	mov	r1, r4
   b6e52:	f7ff ffb5 	bl	b6dc0 <_ZN5Print5writeEPKc>
}
   b6e56:	b00b      	add	sp, #44	; 0x2c
   b6e58:	bd30      	pop	{r4, r5, pc}

000b6e5a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6e5e:	b086      	sub	sp, #24
   b6e60:	af00      	add	r7, sp, #0
   b6e62:	4605      	mov	r5, r0
   b6e64:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6e66:	1d38      	adds	r0, r7, #4
   b6e68:	2114      	movs	r1, #20
{
   b6e6a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6e6c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6e6e:	f7ff fd4d 	bl	b690c <vsnprintf>

    if (n<bufsize)
   b6e72:	2813      	cmp	r0, #19
   b6e74:	d80e      	bhi.n	b6e94 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6e76:	1d39      	adds	r1, r7, #4
   b6e78:	4628      	mov	r0, r5
   b6e7a:	f7ff ffa1 	bl	b6dc0 <_ZN5Print5writeEPKc>
   b6e7e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6e80:	b11e      	cbz	r6, b6e8a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6e82:	4628      	mov	r0, r5
   b6e84:	f7ff ffb5 	bl	b6df2 <_ZN5Print7printlnEv>
   b6e88:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6e8a:	4620      	mov	r0, r4
   b6e8c:	3718      	adds	r7, #24
   b6e8e:	46bd      	mov	sp, r7
   b6e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6e94:	f100 0308 	add.w	r3, r0, #8
   b6e98:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6e9c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6e9e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6ea2:	4622      	mov	r2, r4
   b6ea4:	1c41      	adds	r1, r0, #1
   b6ea6:	683b      	ldr	r3, [r7, #0]
   b6ea8:	4668      	mov	r0, sp
   b6eaa:	f7ff fd2f 	bl	b690c <vsnprintf>
  return write(str);
   b6eae:	4669      	mov	r1, sp
   b6eb0:	4628      	mov	r0, r5
   b6eb2:	f7ff ff85 	bl	b6dc0 <_ZN5Print5writeEPKc>
   b6eb6:	4604      	mov	r4, r0
   b6eb8:	46c5      	mov	sp, r8
   b6eba:	e7e1      	b.n	b6e80 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6ebc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6ebc:	4b01      	ldr	r3, [pc, #4]	; (b6ec4 <_GLOBAL__sub_I_RGB+0x8>)
   b6ebe:	2200      	movs	r2, #0
   b6ec0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6ec2:	4770      	bx	lr
   b6ec4:	2003e6dc 	.word	0x2003e6dc

000b6ec8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6ec8:	2100      	movs	r1, #0
   b6eca:	f7ff bbeb 	b.w	b66a4 <hal_spi_release>

000b6ece <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6ece:	2100      	movs	r1, #0
   b6ed0:	f7ff bbe0 	b.w	b6694 <hal_spi_acquire>

000b6ed4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6ed4:	b510      	push	{r4, lr}
   b6ed6:	4604      	mov	r4, r0
   b6ed8:	4608      	mov	r0, r1
{
    _spi = spi;
   b6eda:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6edc:	f7ff fbba 	bl	b6654 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6ee0:	2300      	movs	r3, #0
   b6ee2:	6063      	str	r3, [r4, #4]
}
   b6ee4:	4620      	mov	r0, r4
   b6ee6:	bd10      	pop	{r4, pc}

000b6ee8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6ee8:	b513      	push	{r0, r1, r4, lr}
   b6eea:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6eec:	7800      	ldrb	r0, [r0, #0]
   b6eee:	f7ff ffee 	bl	b6ece <_ZN8SPIClass4lockEv.isra.0>
   b6ef2:	b958      	cbnz	r0, b6f0c <_ZN8SPIClass5beginEv+0x24>
   b6ef4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6ef6:	9001      	str	r0, [sp, #4]
   b6ef8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6efc:	f7ff fb82 	bl	b6604 <hal_spi_begin>
        unlock();
   b6f00:	9801      	ldr	r0, [sp, #4]
    }
}
   b6f02:	b002      	add	sp, #8
   b6f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6f08:	f7ff bfde 	b.w	b6ec8 <_ZN8SPIClass6unlockEv.isra.0>
   b6f0c:	b002      	add	sp, #8
   b6f0e:	bd10      	pop	{r4, pc}

000b6f10 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b6f10:	b513      	push	{r0, r1, r4, lr}
   b6f12:	4604      	mov	r4, r0
    if (!lock())
   b6f14:	7800      	ldrb	r0, [r0, #0]
{
   b6f16:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6f18:	f7ff ffd9 	bl	b6ece <_ZN8SPIClass4lockEv.isra.0>
   b6f1c:	9901      	ldr	r1, [sp, #4]
   b6f1e:	b948      	cbnz	r0, b6f34 <_ZN8SPIClass11setBitOrderEh+0x24>
   b6f20:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b6f22:	9001      	str	r0, [sp, #4]
   b6f24:	f7ff fb76 	bl	b6614 <hal_spi_set_bit_order>
        unlock();
   b6f28:	9801      	ldr	r0, [sp, #4]
    }
}
   b6f2a:	b002      	add	sp, #8
   b6f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6f30:	f7ff bfca 	b.w	b6ec8 <_ZN8SPIClass6unlockEv.isra.0>
   b6f34:	b002      	add	sp, #8
   b6f36:	bd10      	pop	{r4, pc}

000b6f38 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b6f38:	b513      	push	{r0, r1, r4, lr}
   b6f3a:	4604      	mov	r4, r0
    if (!lock())
   b6f3c:	7800      	ldrb	r0, [r0, #0]
{
   b6f3e:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6f40:	f7ff ffc5 	bl	b6ece <_ZN8SPIClass4lockEv.isra.0>
   b6f44:	9901      	ldr	r1, [sp, #4]
   b6f46:	b948      	cbnz	r0, b6f5c <_ZN8SPIClass11setDataModeEh+0x24>
   b6f48:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b6f4a:	9001      	str	r0, [sp, #4]
   b6f4c:	f7ff fb6a 	bl	b6624 <hal_spi_set_data_mode>
        unlock();
   b6f50:	9801      	ldr	r0, [sp, #4]
    }
}
   b6f52:	b002      	add	sp, #8
   b6f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6f58:	f7ff bfb6 	b.w	b6ec8 <_ZN8SPIClass6unlockEv.isra.0>
   b6f5c:	b002      	add	sp, #8
   b6f5e:	bd10      	pop	{r4, pc}

000b6f60 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6f60:	7800      	ldrb	r0, [r0, #0]
   b6f62:	f7ff bfb1 	b.w	b6ec8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6f68 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6f68:	0840      	lsrs	r0, r0, #1
{
   b6f6a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6f6c:	6018      	str	r0, [r3, #0]
   b6f6e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6f70:	6818      	ldr	r0, [r3, #0]
   b6f72:	4288      	cmp	r0, r1
   b6f74:	b2e5      	uxtb	r5, r4
   b6f76:	d906      	bls.n	b6f86 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6f78:	3401      	adds	r4, #1
   b6f7a:	2c08      	cmp	r4, #8
   b6f7c:	d002      	beq.n	b6f84 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6f7e:	0840      	lsrs	r0, r0, #1
   b6f80:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6f82:	e7f5      	b.n	b6f70 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6f84:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6f86:	4b02      	ldr	r3, [pc, #8]	; (b6f90 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6f88:	5d5b      	ldrb	r3, [r3, r5]
   b6f8a:	7013      	strb	r3, [r2, #0]
}
   b6f8c:	bd30      	pop	{r4, r5, pc}
   b6f8e:	bf00      	nop
   b6f90:	000bcc88 	.word	0x000bcc88

000b6f94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6f98:	4606      	mov	r6, r0
   b6f9a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6f9c:	7800      	ldrb	r0, [r0, #0]
{
   b6f9e:	460c      	mov	r4, r1
    CHECK(lock());
   b6fa0:	f7ff ff95 	bl	b6ece <_ZN8SPIClass4lockEv.isra.0>
   b6fa4:	2800      	cmp	r0, #0
   b6fa6:	db1b      	blt.n	b6fe0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6fa8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6faa:	2214      	movs	r2, #20
   b6fac:	2100      	movs	r1, #0
   b6fae:	a809      	add	r0, sp, #36	; 0x24
   b6fb0:	f003 f8e3 	bl	ba17a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6fb4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6fb6:	2200      	movs	r2, #0
   b6fb8:	a909      	add	r1, sp, #36	; 0x24
   b6fba:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6fbc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6fc0:	f7ff fb58 	bl	b6674 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6fc4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6fc8:	b113      	cbz	r3, b6fd0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6fca:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6fce:	b155      	cbz	r5, b6fe6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6fd0:	2700      	movs	r7, #0
   b6fd2:	46b9      	mov	r9, r7
   b6fd4:	46b8      	mov	r8, r7
   b6fd6:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6fd8:	7923      	ldrb	r3, [r4, #4]
   b6fda:	b15d      	cbz	r5, b6ff4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6fdc:	b1c3      	cbz	r3, b7010 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6fde:	2000      	movs	r0, #0
}
   b6fe0:	b00f      	add	sp, #60	; 0x3c
   b6fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6fe6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6fea:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6fee:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6ff2:	e7f1      	b.n	b6fd8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6ff4:	2b00      	cmp	r3, #0
   b6ff6:	d135      	bne.n	b7064 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6ff8:	68a3      	ldr	r3, [r4, #8]
   b6ffa:	4543      	cmp	r3, r8
   b6ffc:	d108      	bne.n	b7010 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6ffe:	f88d 9020 	strb.w	r9, [sp, #32]
   b7002:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7006:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b700a:	89a3      	ldrh	r3, [r4, #12]
   b700c:	429a      	cmp	r2, r3
   b700e:	d0e6      	beq.n	b6fde <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7010:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7012:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7014:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7018:	980a      	ldr	r0, [sp, #40]	; 0x28
   b701a:	ab04      	add	r3, sp, #16
   b701c:	f10d 020f 	add.w	r2, sp, #15
   b7020:	f7ff ffa2 	bl	b6f68 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7024:	7921      	ldrb	r1, [r4, #4]
   b7026:	b985      	cbnz	r5, b704a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7028:	b989      	cbnz	r1, b704e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b702a:	68a3      	ldr	r3, [r4, #8]
   b702c:	4543      	cmp	r3, r8
   b702e:	d30e      	bcc.n	b704e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7030:	f88d 9020 	strb.w	r9, [sp, #32]
   b7034:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7038:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b703c:	89a3      	ldrh	r3, [r4, #12]
   b703e:	429a      	cmp	r2, r3
   b7040:	d105      	bne.n	b704e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7042:	9b04      	ldr	r3, [sp, #16]
   b7044:	4543      	cmp	r3, r8
   b7046:	d102      	bne.n	b704e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7048:	e7c9      	b.n	b6fde <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b704a:	2900      	cmp	r1, #0
   b704c:	d1f9      	bne.n	b7042 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b704e:	2300      	movs	r3, #0
   b7050:	9301      	str	r3, [sp, #4]
   b7052:	7b63      	ldrb	r3, [r4, #13]
   b7054:	9300      	str	r3, [sp, #0]
   b7056:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b705a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b705c:	7830      	ldrb	r0, [r6, #0]
   b705e:	f7ff fb11 	bl	b6684 <hal_spi_set_settings>
   b7062:	e7bc      	b.n	b6fde <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7064:	e9cd 5500 	strd	r5, r5, [sp]
   b7068:	462b      	mov	r3, r5
   b706a:	462a      	mov	r2, r5
   b706c:	2101      	movs	r1, #1
   b706e:	e7f5      	b.n	b705c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7070 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b7070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7074:	b088      	sub	sp, #32
    unsigned clock = 0;
   b7076:	2300      	movs	r3, #0
{
   b7078:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b707a:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b707c:	9302      	str	r3, [sp, #8]
{
   b707e:	460e      	mov	r6, r1
   b7080:	4617      	mov	r7, r2
    if (!lock())
   b7082:	f7ff ff24 	bl	b6ece <_ZN8SPIClass4lockEv.isra.0>
   b7086:	4605      	mov	r5, r0
   b7088:	bb00      	cbnz	r0, b70cc <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b708a:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b708e:	4601      	mov	r1, r0
   b7090:	2214      	movs	r2, #20
   b7092:	a803      	add	r0, sp, #12
   b7094:	f003 f871 	bl	ba17a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7098:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b709a:	462a      	mov	r2, r5
   b709c:	a903      	add	r1, sp, #12
   b709e:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b70a0:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b70a4:	f7ff fae6 	bl	b6674 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b70a8:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b70aa:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b70ae:	ab02      	add	r3, sp, #8
   b70b0:	f10d 0207 	add.w	r2, sp, #7
   b70b4:	fb07 f106 	mul.w	r1, r7, r6
   b70b8:	f7ff ff56 	bl	b6f68 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b70bc:	7820      	ldrb	r0, [r4, #0]
   b70be:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b70c2:	f7ff fab7 	bl	b6634 <hal_spi_set_clock_divider>
        unlock();
   b70c6:	7820      	ldrb	r0, [r4, #0]
   b70c8:	f7ff fefe 	bl	b6ec8 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b70cc:	9802      	ldr	r0, [sp, #8]
   b70ce:	b008      	add	sp, #32
   b70d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b70d4 <_ZN8SPIClass15setClockDividerEh>:
{
   b70d4:	b538      	push	{r3, r4, r5, lr}
   b70d6:	4604      	mov	r4, r0
    if (!lock())
   b70d8:	7800      	ldrb	r0, [r0, #0]
{
   b70da:	460d      	mov	r5, r1
    if (!lock())
   b70dc:	f7ff fef7 	bl	b6ece <_ZN8SPIClass4lockEv.isra.0>
   b70e0:	4603      	mov	r3, r0
   b70e2:	b9d0      	cbnz	r0, b711a <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b70e4:	6861      	ldr	r1, [r4, #4]
   b70e6:	b199      	cbz	r1, b7110 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b70e8:	4a0c      	ldr	r2, [pc, #48]	; (b711c <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b70ea:	f812 0b01 	ldrb.w	r0, [r2], #1
   b70ee:	4285      	cmp	r5, r0
   b70f0:	d002      	beq.n	b70f8 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b70f2:	3301      	adds	r3, #1
   b70f4:	2b08      	cmp	r3, #8
   b70f6:	d1f8      	bne.n	b70ea <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b70f8:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b70fa:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b70fc:	2201      	movs	r2, #1
   b70fe:	40d9      	lsrs	r1, r3
   b7100:	4620      	mov	r0, r4
   b7102:	f7ff ffb5 	bl	b7070 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b7106:	7820      	ldrb	r0, [r4, #0]
}
   b7108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b710c:	f7ff bedc 	b.w	b6ec8 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b7110:	7820      	ldrb	r0, [r4, #0]
   b7112:	4629      	mov	r1, r5
   b7114:	f7ff fa8e 	bl	b6634 <hal_spi_set_clock_divider>
   b7118:	e7f5      	b.n	b7106 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b711a:	bd38      	pop	{r3, r4, r5, pc}
   b711c:	000bcc88 	.word	0x000bcc88

000b7120 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b7120:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7122:	7800      	ldrb	r0, [r0, #0]
   b7124:	f7ff fa8e 	bl	b6644 <hal_spi_transfer>
}
   b7128:	b2c0      	uxtb	r0, r0
   b712a:	bd08      	pop	{r3, pc}

000b712c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b712c:	4b05      	ldr	r3, [pc, #20]	; (b7144 <_GLOBAL__sub_I_System+0x18>)
   b712e:	2202      	movs	r2, #2
   b7130:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7132:	4b05      	ldr	r3, [pc, #20]	; (b7148 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7134:	4a05      	ldr	r2, [pc, #20]	; (b714c <_GLOBAL__sub_I_System+0x20>)
   b7136:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7138:	2000      	movs	r0, #0
   b713a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b713e:	f7ff bb41 	b.w	b67c4 <set_system_mode>
   b7142:	bf00      	nop
   b7144:	2003e6f8 	.word	0x2003e6f8
   b7148:	2003e6ec 	.word	0x2003e6ec
   b714c:	ffff0000 	.word	0xffff0000

000b7150 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7150:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7152:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7154:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7158:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b715a:	2201      	movs	r2, #1
   b715c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7160:	f10d 0107 	add.w	r1, sp, #7
   b7164:	47a0      	blx	r4
}
   b7166:	b002      	add	sp, #8
   b7168:	bd10      	pop	{r4, pc}

000b716a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b716a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b716c:	6803      	ldr	r3, [r0, #0]
   b716e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7174:	46a4      	mov	ip, r4
}
   b7176:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b717a:	4760      	bx	ip

000b717c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b717c:	b513      	push	{r0, r1, r4, lr}
   b717e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7180:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7182:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7186:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7188:	f10d 0107 	add.w	r1, sp, #7
   b718c:	2201      	movs	r2, #1
   b718e:	47a0      	blx	r4
}
   b7190:	b002      	add	sp, #8
   b7192:	bd10      	pop	{r4, pc}

000b7194 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7194:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7196:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7198:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b719c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b71a0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b71a2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b71a4:	d008      	beq.n	b71b8 <_ZN9TCPClient4readEv+0x24>
   b71a6:	6963      	ldr	r3, [r4, #20]
   b71a8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b71ac:	1c51      	adds	r1, r2, #1
   b71ae:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b71b2:	4413      	add	r3, r2
   b71b4:	7918      	ldrb	r0, [r3, #4]
}
   b71b6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b71b8:	6803      	ldr	r3, [r0, #0]
   b71ba:	691b      	ldr	r3, [r3, #16]
   b71bc:	4798      	blx	r3
   b71be:	2800      	cmp	r0, #0
   b71c0:	d1f1      	bne.n	b71a6 <_ZN9TCPClient4readEv+0x12>
   b71c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b71c6:	e7f6      	b.n	b71b6 <_ZN9TCPClient4readEv+0x22>

000b71c8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b71c8:	4770      	bx	lr

000b71ca <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b71ca:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b71cc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b71ce:	43c0      	mvns	r0, r0
   b71d0:	0fc0      	lsrs	r0, r0, #31
   b71d2:	4770      	bx	lr

000b71d4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b71d4:	4770      	bx	lr
	...

000b71d8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b71d8:	4b06      	ldr	r3, [pc, #24]	; (b71f4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b71da:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b71dc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b71de:	f100 040c 	add.w	r4, r0, #12
	    ||
   b71e2:	d005      	beq.n	b71f0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b71e4:	4608      	mov	r0, r1
   b71e6:	f000 fdff 	bl	b7de8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b71ea:	2800      	cmp	r0, #0
   b71ec:	bf08      	it	eq
   b71ee:	2400      	moveq	r4, #0
      }
   b71f0:	4620      	mov	r0, r4
   b71f2:	bd10      	pop	{r4, pc}
   b71f4:	000bcbc8 	.word	0x000bcbc8

000b71f8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b71f8:	b510      	push	{r4, lr}
   b71fa:	21ac      	movs	r1, #172	; 0xac
   b71fc:	4604      	mov	r4, r0
   b71fe:	f7fc ff4e 	bl	b409e <_ZdlPvj>
   b7202:	4620      	mov	r0, r4
   b7204:	bd10      	pop	{r4, pc}

000b7206 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7206:	21ac      	movs	r1, #172	; 0xac
   b7208:	f7fc bf49 	b.w	b409e <_ZdlPvj>

000b720c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b720c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7210:	f04f 0800 	mov.w	r8, #0
   b7214:	b086      	sub	sp, #24
   b7216:	461c      	mov	r4, r3
   b7218:	f8c0 8004 	str.w	r8, [r0, #4]
   b721c:	4605      	mov	r5, r0
   b721e:	460e      	mov	r6, r1
   b7220:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7222:	4641      	mov	r1, r8
   b7224:	2210      	movs	r2, #16
   b7226:	a802      	add	r0, sp, #8
   b7228:	f002 ffa7 	bl	ba17a <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b722c:	1c63      	adds	r3, r4, #1
   b722e:	d009      	beq.n	b7244 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7234:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7238:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b723c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7240:	435c      	muls	r4, r3
   b7242:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7244:	6968      	ldr	r0, [r5, #20]
   b7246:	2310      	movs	r3, #16
   b7248:	9300      	str	r3, [sp, #0]
   b724a:	6800      	ldr	r0, [r0, #0]
   b724c:	ab02      	add	r3, sp, #8
   b724e:	f241 0205 	movw	r2, #4101	; 0x1005
   b7252:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7256:	f7ff f9a5 	bl	b65a4 <sock_setsockopt>
    if (ret < 0) {
   b725a:	2800      	cmp	r0, #0
   b725c:	da07      	bge.n	b726e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b725e:	f7ff fb65 	bl	b692c <__errno>
   b7262:	6803      	ldr	r3, [r0, #0]
   b7264:	606b      	str	r3, [r5, #4]
        return 0;
   b7266:	2000      	movs	r0, #0
}
   b7268:	b006      	add	sp, #24
   b726a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b726e:	6968      	ldr	r0, [r5, #20]
   b7270:	2300      	movs	r3, #0
   b7272:	6800      	ldr	r0, [r0, #0]
   b7274:	463a      	mov	r2, r7
   b7276:	4631      	mov	r1, r6
   b7278:	f7ff f9b4 	bl	b65e4 <sock_send>
    if (ret < 0) {
   b727c:	1e03      	subs	r3, r0, #0
   b727e:	dbee      	blt.n	b725e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7280:	4618      	mov	r0, r3
   b7282:	e7f1      	b.n	b7268 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7284 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b7284:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b7286:	6984      	ldr	r4, [r0, #24]
   b7288:	4b0a      	ldr	r3, [pc, #40]	; (b72b4 <_ZN9TCPClientD1Ev+0x30>)
   b728a:	6003      	str	r3, [r0, #0]
   b728c:	4605      	mov	r5, r0
   b728e:	b17c      	cbz	r4, b72b0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b7290:	6863      	ldr	r3, [r4, #4]
   b7292:	3b01      	subs	r3, #1
   b7294:	6063      	str	r3, [r4, #4]
   b7296:	b95b      	cbnz	r3, b72b0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b7298:	6823      	ldr	r3, [r4, #0]
   b729a:	4620      	mov	r0, r4
   b729c:	689b      	ldr	r3, [r3, #8]
   b729e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b72a0:	68a3      	ldr	r3, [r4, #8]
   b72a2:	3b01      	subs	r3, #1
   b72a4:	60a3      	str	r3, [r4, #8]
   b72a6:	b91b      	cbnz	r3, b72b0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b72a8:	6823      	ldr	r3, [r4, #0]
   b72aa:	4620      	mov	r0, r4
   b72ac:	68db      	ldr	r3, [r3, #12]
   b72ae:	4798      	blx	r3
   b72b0:	4628      	mov	r0, r5
   b72b2:	bd38      	pop	{r3, r4, r5, pc}
   b72b4:	000bcccc 	.word	0x000bcccc

000b72b8 <_ZN9TCPClientD0Ev>:
   b72b8:	b510      	push	{r4, lr}
   b72ba:	4604      	mov	r4, r0
   b72bc:	f7ff ffe2 	bl	b7284 <_ZN9TCPClientD1Ev>
   b72c0:	4620      	mov	r0, r4
   b72c2:	211c      	movs	r1, #28
   b72c4:	f7fc feeb 	bl	b409e <_ZdlPvj>
   b72c8:	4620      	mov	r0, r4
   b72ca:	bd10      	pop	{r4, pc}

000b72cc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b72cc:	b530      	push	{r4, r5, lr}
   b72ce:	b087      	sub	sp, #28
   b72d0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b72d2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b72d4:	4668      	mov	r0, sp
   b72d6:	f7ff fc93 	bl	b6c00 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b72da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b72dc:	3404      	adds	r4, #4
   b72de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b72e0:	682b      	ldr	r3, [r5, #0]
   b72e2:	7023      	strb	r3, [r4, #0]
    }
   b72e4:	b007      	add	sp, #28
   b72e6:	bd30      	pop	{r4, r5, pc}

000b72e8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b72e8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b72ea:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b72ec:	4b05      	ldr	r3, [pc, #20]	; (b7304 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b72ee:	4604      	mov	r4, r0
   b72f0:	358c      	adds	r5, #140	; 0x8c
   b72f2:	f844 3b04 	str.w	r3, [r4], #4
   b72f6:	4606      	mov	r6, r0
   b72f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b72fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b72fc:	682b      	ldr	r3, [r5, #0]
   b72fe:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7300:	4630      	mov	r0, r6
   b7302:	bd70      	pop	{r4, r5, r6, pc}
   b7304:	000bcc3c 	.word	0x000bcc3c

000b7308 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b730c:	4698      	mov	r8, r3
    stop();
   b730e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7310:	b093      	sub	sp, #76	; 0x4c
   b7312:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7314:	2400      	movs	r4, #0
    stop();
   b7316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7318:	4606      	mov	r6, r0
   b731a:	4617      	mov	r7, r2
    stop();
   b731c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b731e:	4628      	mov	r0, r5
   b7320:	466b      	mov	r3, sp
   b7322:	4622      	mov	r2, r4
   b7324:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7326:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7328:	f7ff f934 	bl	b6594 <netdb_getaddrinfo>
   b732c:	4605      	mov	r5, r0
   b732e:	2800      	cmp	r0, #0
   b7330:	d163      	bne.n	b73fa <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b7332:	9b00      	ldr	r3, [sp, #0]
   b7334:	2b00      	cmp	r3, #0
   b7336:	d04b      	beq.n	b73d0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7338:	695b      	ldr	r3, [r3, #20]
   b733a:	2b00      	cmp	r3, #0
   b733c:	d048      	beq.n	b73d0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b733e:	a806      	add	r0, sp, #24
   b7340:	f7ff fc1a 	bl	b6b78 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7344:	9b00      	ldr	r3, [sp, #0]
   b7346:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7348:	7863      	ldrb	r3, [r4, #1]
   b734a:	2b02      	cmp	r3, #2
   b734c:	d104      	bne.n	b7358 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b734e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7350:	a806      	add	r0, sp, #24
   b7352:	f7ff ffbb 	bl	b72cc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7356:	e026      	b.n	b73a6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7358:	2b0a      	cmp	r3, #10
   b735a:	d124      	bne.n	b73a6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b735c:	2211      	movs	r2, #17
   b735e:	4629      	mov	r1, r5
   b7360:	a801      	add	r0, sp, #4
   b7362:	f002 ff0a 	bl	ba17a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7366:	68a3      	ldr	r3, [r4, #8]
   b7368:	2b00      	cmp	r3, #0
   b736a:	d038      	beq.n	b73de <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b736c:	f104 0308 	add.w	r3, r4, #8
   b7370:	f10d 0c04 	add.w	ip, sp, #4
   b7374:	3418      	adds	r4, #24
   b7376:	6818      	ldr	r0, [r3, #0]
   b7378:	6859      	ldr	r1, [r3, #4]
   b737a:	4662      	mov	r2, ip
   b737c:	c203      	stmia	r2!, {r0, r1}
   b737e:	3308      	adds	r3, #8
   b7380:	42a3      	cmp	r3, r4
   b7382:	4694      	mov	ip, r2
   b7384:	d1f7      	bne.n	b7376 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7386:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7388:	a901      	add	r1, sp, #4
   b738a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b738c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7390:	f7ff fc00 	bl	b6b94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7394:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7398:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b739c:	ac07      	add	r4, sp, #28
   b739e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b73a0:	f8dc 3000 	ldr.w	r3, [ip]
   b73a4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b73a6:	a806      	add	r0, sp, #24
   b73a8:	f7ff fc06 	bl	b6bb8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b73ac:	b180      	cbz	r0, b73d0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b73ae:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b73b0:	ad07      	add	r5, sp, #28
   b73b2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b73b6:	4b12      	ldr	r3, [pc, #72]	; (b7400 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b73b8:	930c      	str	r3, [sp, #48]	; 0x30
   b73ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b73bc:	ac0d      	add	r4, sp, #52	; 0x34
   b73be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b73c0:	682b      	ldr	r3, [r5, #0]
   b73c2:	7023      	strb	r3, [r4, #0]
   b73c4:	463a      	mov	r2, r7
   b73c6:	4643      	mov	r3, r8
   b73c8:	a90c      	add	r1, sp, #48	; 0x30
   b73ca:	4630      	mov	r0, r6
   b73cc:	47c8      	blx	r9
   b73ce:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b73d0:	9800      	ldr	r0, [sp, #0]
   b73d2:	f7ff f8d7 	bl	b6584 <netdb_freeaddrinfo>
}
   b73d6:	4628      	mov	r0, r5
   b73d8:	b013      	add	sp, #76	; 0x4c
   b73da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b73de:	68e3      	ldr	r3, [r4, #12]
   b73e0:	2b00      	cmp	r3, #0
   b73e2:	d1c3      	bne.n	b736c <_ZN9TCPClient7connectEPKctm+0x64>
   b73e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b73e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b73ec:	f7ff f8ba 	bl	b6564 <inet_htonl>
   b73f0:	4581      	cmp	r9, r0
   b73f2:	d1bb      	bne.n	b736c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b73f4:	f104 0114 	add.w	r1, r4, #20
   b73f8:	e7aa      	b.n	b7350 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b73fa:	4625      	mov	r5, r4
   b73fc:	e7e8      	b.n	b73d0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b73fe:	bf00      	nop
   b7400:	000bcc3c 	.word	0x000bcc3c

000b7404 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7404:	b538      	push	{r3, r4, r5, lr}
   b7406:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7408:	681a      	ldr	r2, [r3, #0]
   b740a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b740c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b740e:	da10      	bge.n	b7432 <_ZN9TCPClient9connectedEv+0x2e>
   b7410:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7414:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7418:	429a      	cmp	r2, r3
   b741a:	d10a      	bne.n	b7432 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b741c:	6803      	ldr	r3, [r0, #0]
   b741e:	691b      	ldr	r3, [r3, #16]
   b7420:	4798      	blx	r3
        if (!rv) {
   b7422:	4604      	mov	r4, r0
   b7424:	b928      	cbnz	r0, b7432 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7426:	682b      	ldr	r3, [r5, #0]
   b7428:	4628      	mov	r0, r5
   b742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b742c:	4798      	blx	r3
        rv = available();
   b742e:	4620      	mov	r0, r4
}
   b7430:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7432:	2001      	movs	r0, #1
   b7434:	e7fc      	b.n	b7430 <_ZN9TCPClient9connectedEv+0x2c>

000b7436 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7436:	b510      	push	{r4, lr}
   b7438:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b743a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b743e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7442:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7444:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7446:	d005      	beq.n	b7454 <_ZN9TCPClient4peekEv+0x1e>
   b7448:	6963      	ldr	r3, [r4, #20]
   b744a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b744e:	4413      	add	r3, r2
   b7450:	7918      	ldrb	r0, [r3, #4]
}
   b7452:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7454:	6803      	ldr	r3, [r0, #0]
   b7456:	691b      	ldr	r3, [r3, #16]
   b7458:	4798      	blx	r3
   b745a:	2800      	cmp	r0, #0
   b745c:	d1f4      	bne.n	b7448 <_ZN9TCPClient4peekEv+0x12>
   b745e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7462:	e7f6      	b.n	b7452 <_ZN9TCPClient4peekEv+0x1c>

000b7464 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7466:	6943      	ldr	r3, [r0, #20]
   b7468:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b746a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b746e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7472:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7474:	4605      	mov	r5, r0
   b7476:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7478:	d016      	beq.n	b74a8 <_ZN9TCPClient4readEPhj+0x44>
   b747a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b747c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7480:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7484:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7486:	42bc      	cmp	r4, r7
   b7488:	bf28      	it	cs
   b748a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b748c:	3304      	adds	r3, #4
   b748e:	4622      	mov	r2, r4
   b7490:	4419      	add	r1, r3
   b7492:	4630      	mov	r0, r6
   b7494:	f002 fe49 	bl	ba12a <memcpy>
   b7498:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b749a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b749e:	4423      	add	r3, r4
   b74a0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b74a4:	4620      	mov	r0, r4
   b74a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b74a8:	6803      	ldr	r3, [r0, #0]
   b74aa:	691b      	ldr	r3, [r3, #16]
   b74ac:	4798      	blx	r3
   b74ae:	2800      	cmp	r0, #0
   b74b0:	d1e3      	bne.n	b747a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b74b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b74b6:	e7f5      	b.n	b74a4 <_ZN9TCPClient4readEPhj+0x40>

000b74b8 <_ZN9TCPClient12flush_bufferEv>:
   b74b8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b74ba:	2300      	movs	r3, #0
   b74bc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b74c0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b74c2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b74c6:	4770      	bx	lr

000b74c8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b74c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b74cc:	461f      	mov	r7, r3
    stop();
   b74ce:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b74d0:	460c      	mov	r4, r1
    stop();
   b74d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b74d4:	b08a      	sub	sp, #40	; 0x28
   b74d6:	4605      	mov	r5, r0
   b74d8:	4616      	mov	r6, r2
    stop();
   b74da:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b74dc:	7d23      	ldrb	r3, [r4, #20]
   b74de:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b74e2:	2b04      	cmp	r3, #4
   b74e4:	bf0c      	ite	eq
   b74e6:	2002      	moveq	r0, #2
   b74e8:	200a      	movne	r0, #10
   b74ea:	2206      	movs	r2, #6
   b74ec:	2101      	movs	r1, #1
   b74ee:	f7ff f881 	bl	b65f4 <sock_socket>
   b74f2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b74f6:	696b      	ldr	r3, [r5, #20]
   b74f8:	681b      	ldr	r3, [r3, #0]
   b74fa:	2b00      	cmp	r3, #0
   b74fc:	da08      	bge.n	b7510 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b74fe:	682b      	ldr	r3, [r5, #0]
   b7500:	4628      	mov	r0, r5
   b7502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7504:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7506:	4798      	blx	r3
}
   b7508:	4620      	mov	r0, r4
   b750a:	b00a      	add	sp, #40	; 0x28
   b750c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7510:	4628      	mov	r0, r5
   b7512:	f7ff ffd1 	bl	b74b8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7516:	b1b7      	cbz	r7, b7546 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7518:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b751a:	a903      	add	r1, sp, #12
   b751c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b751e:	9303      	str	r3, [sp, #12]
   b7520:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7524:	f7ff f80e 	bl	b6544 <if_index_to_name>
   b7528:	2800      	cmp	r0, #0
   b752a:	d1e8      	bne.n	b74fe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b752c:	6968      	ldr	r0, [r5, #20]
   b752e:	2306      	movs	r3, #6
   b7530:	9300      	str	r3, [sp, #0]
   b7532:	6800      	ldr	r0, [r0, #0]
   b7534:	ab03      	add	r3, sp, #12
   b7536:	f241 020b 	movw	r2, #4107	; 0x100b
   b753a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b753e:	f7ff f831 	bl	b65a4 <sock_setsockopt>
   b7542:	2800      	cmp	r0, #0
   b7544:	d1db      	bne.n	b74fe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7546:	221c      	movs	r2, #28
   b7548:	2100      	movs	r1, #0
   b754a:	a803      	add	r0, sp, #12
   b754c:	f002 fe15 	bl	ba17a <memset>
    if (ip.version() == 4) {
   b7550:	7d23      	ldrb	r3, [r4, #20]
   b7552:	2b04      	cmp	r3, #4
   b7554:	d11d      	bne.n	b7592 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7556:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b755a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b755c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7560:	f7ff f808 	bl	b6574 <inet_htons>
   b7564:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7568:	6860      	ldr	r0, [r4, #4]
   b756a:	f7fe fffb 	bl	b6564 <inet_htonl>
   b756e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7570:	696b      	ldr	r3, [r5, #20]
   b7572:	221c      	movs	r2, #28
   b7574:	6818      	ldr	r0, [r3, #0]
   b7576:	a903      	add	r1, sp, #12
   b7578:	f7ff f824 	bl	b65c4 <sock_connect>
   b757c:	2800      	cmp	r0, #0
   b757e:	d1be      	bne.n	b74fe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7580:	3404      	adds	r4, #4
   b7582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7584:	696d      	ldr	r5, [r5, #20]
   b7586:	358c      	adds	r5, #140	; 0x8c
   b7588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b758a:	6823      	ldr	r3, [r4, #0]
   b758c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b758e:	2401      	movs	r4, #1
   b7590:	e7ba      	b.n	b7508 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7592:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7596:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7598:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b759c:	f7fe ffea 	bl	b6574 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b75a0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b75a2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b75a6:	1d23      	adds	r3, r4, #4
   b75a8:	f104 0714 	add.w	r7, r4, #20
   b75ac:	6818      	ldr	r0, [r3, #0]
   b75ae:	6859      	ldr	r1, [r3, #4]
   b75b0:	4632      	mov	r2, r6
   b75b2:	c203      	stmia	r2!, {r0, r1}
   b75b4:	3308      	adds	r3, #8
   b75b6:	42bb      	cmp	r3, r7
   b75b8:	4616      	mov	r6, r2
   b75ba:	d1f7      	bne.n	b75ac <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b75bc:	e7d8      	b.n	b7570 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b75c0 <_ZN9TCPClient9availableEv>:
{
   b75c0:	b530      	push	{r4, r5, lr}
   b75c2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b75c4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b75c8:	b08b      	sub	sp, #44	; 0x2c
   b75ca:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b75cc:	b12b      	cbz	r3, b75da <_ZN9TCPClient9availableEv+0x1a>
   b75ce:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b75d2:	429a      	cmp	r2, r3
   b75d4:	d101      	bne.n	b75da <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b75d6:	f7ff ff6f 	bl	b74b8 <_ZN9TCPClient12flush_bufferEv>
   b75da:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b75dc:	6808      	ldr	r0, [r1, #0]
   b75de:	2800      	cmp	r0, #0
   b75e0:	db18      	blt.n	b7614 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b75e2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b75e6:	2d7f      	cmp	r5, #127	; 0x7f
   b75e8:	d814      	bhi.n	b7614 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b75ea:	3104      	adds	r1, #4
   b75ec:	2308      	movs	r3, #8
   b75ee:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b75f2:	4429      	add	r1, r5
   b75f4:	f7fe ffee 	bl	b65d4 <sock_recv>
            if (ret > 0) {
   b75f8:	2800      	cmp	r0, #0
   b75fa:	dd13      	ble.n	b7624 <_ZN9TCPClient9availableEv+0x64>
   b75fc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b75fe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7602:	b90a      	cbnz	r2, b7608 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7604:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7608:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b760a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b760e:	4410      	add	r0, r2
   b7610:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7614:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7616:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b761a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b761e:	1ac0      	subs	r0, r0, r3
   b7620:	b00b      	add	sp, #44	; 0x2c
   b7622:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7624:	f7ff f982 	bl	b692c <__errno>
   b7628:	6803      	ldr	r3, [r0, #0]
   b762a:	2b0b      	cmp	r3, #11
   b762c:	d0f2      	beq.n	b7614 <_ZN9TCPClient9availableEv+0x54>
   b762e:	f7ff f97d 	bl	b692c <__errno>
   b7632:	6803      	ldr	r3, [r0, #0]
   b7634:	2b0b      	cmp	r3, #11
   b7636:	d0ed      	beq.n	b7614 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7638:	2320      	movs	r3, #32
   b763a:	2500      	movs	r5, #0
   b763c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7640:	f7ff f974 	bl	b692c <__errno>
   b7644:	6803      	ldr	r3, [r0, #0]
   b7646:	9301      	str	r3, [sp, #4]
   b7648:	4b08      	ldr	r3, [pc, #32]	; (b766c <_ZN9TCPClient9availableEv+0xac>)
   b764a:	4909      	ldr	r1, [pc, #36]	; (b7670 <_ZN9TCPClient9availableEv+0xb0>)
   b764c:	9300      	str	r3, [sp, #0]
   b764e:	aa02      	add	r2, sp, #8
   b7650:	462b      	mov	r3, r5
   b7652:	2032      	movs	r0, #50	; 0x32
   b7654:	f7ff f8ae 	bl	b67b4 <log_message>
                    sock_close(d_->sock);
   b7658:	6963      	ldr	r3, [r4, #20]
   b765a:	6818      	ldr	r0, [r3, #0]
   b765c:	f7fe ffaa 	bl	b65b4 <sock_close>
   b7660:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7666:	601a      	str	r2, [r3, #0]
   b7668:	e7d4      	b.n	b7614 <_ZN9TCPClient9availableEv+0x54>
   b766a:	bf00      	nop
   b766c:	000bcc97 	.word	0x000bcc97
   b7670:	000bcc90 	.word	0x000bcc90

000b7674 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7674:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7676:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7678:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b767a:	6818      	ldr	r0, [r3, #0]
   b767c:	2800      	cmp	r0, #0
   b767e:	db01      	blt.n	b7684 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7680:	f7fe ff98 	bl	b65b4 <sock_close>
   b7684:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b768a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b768c:	6960      	ldr	r0, [r4, #20]
   b768e:	2211      	movs	r2, #17
   b7690:	2100      	movs	r1, #0
   b7692:	308c      	adds	r0, #140	; 0x8c
   b7694:	f002 fd71 	bl	ba17a <memset>
    flush_buffer();
   b7698:	4620      	mov	r0, r4
}
   b769a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b769e:	f7ff bf0b 	b.w	b74b8 <_ZN9TCPClient12flush_bufferEv>

000b76a2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b76a2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b76a4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b76a6:	4604      	mov	r4, r0
          total(0) {
   b76a8:	6001      	str	r1, [r0, #0]
   b76aa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b76ae:	3088      	adds	r0, #136	; 0x88
   b76b0:	f7ff fa62 	bl	b6b78 <_ZN9IPAddressC1Ev>
}
   b76b4:	4620      	mov	r0, r4
   b76b6:	bd10      	pop	{r4, pc}

000b76b8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b76b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b76ba:	2300      	movs	r3, #0
   b76bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b76c0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b76c4:	4a0e      	ldr	r2, [pc, #56]	; (b7700 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b76c6:	6103      	str	r3, [r0, #16]
   b76c8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b76ca:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b76cc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b76ce:	20ac      	movs	r0, #172	; 0xac
   b76d0:	9101      	str	r1, [sp, #4]
   b76d2:	f7fc fce0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b76d6:	1e05      	subs	r5, r0, #0
   b76d8:	f105 060c 	add.w	r6, r5, #12
   b76dc:	d008      	beq.n	b76f0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b76de:	2301      	movs	r3, #1
   b76e0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b76e4:	4b07      	ldr	r3, [pc, #28]	; (b7704 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b76e6:	9901      	ldr	r1, [sp, #4]
   b76e8:	602b      	str	r3, [r5, #0]
   b76ea:	4630      	mov	r0, r6
   b76ec:	f7ff ffd9 	bl	b76a2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b76f0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b76f2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b76f6:	f7ff fedf 	bl	b74b8 <_ZN9TCPClient12flush_bufferEv>
}
   b76fa:	b002      	add	sp, #8
   b76fc:	bd70      	pop	{r4, r5, r6, pc}
   b76fe:	bf00      	nop
   b7700:	000bcccc 	.word	0x000bcccc
   b7704:	000bccb0 	.word	0x000bccb0

000b7708 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7708:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b770a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b770e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7710:	f7ff ffd2 	bl	b76b8 <_ZN9TCPClientC1Ei>
}
   b7714:	4620      	mov	r0, r4
   b7716:	bd10      	pop	{r4, pc}

000b7718 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7718:	b510      	push	{r4, lr}
   b771a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b771c:	6800      	ldr	r0, [r0, #0]
   b771e:	2800      	cmp	r0, #0
   b7720:	db01      	blt.n	b7726 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7722:	f7fe ff47 	bl	b65b4 <sock_close>
    }
}
   b7726:	4620      	mov	r0, r4
   b7728:	bd10      	pop	{r4, pc}

000b772a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b772a:	300c      	adds	r0, #12
   b772c:	f7ff bff4 	b.w	b7718 <_ZN9TCPClient4DataD1Ev>

000b7730 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7730:	4b02      	ldr	r3, [pc, #8]	; (b773c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7732:	681a      	ldr	r2, [r3, #0]
   b7734:	4b02      	ldr	r3, [pc, #8]	; (b7740 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7736:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7738:	4770      	bx	lr
   b773a:	bf00      	nop
   b773c:	2003e2a8 	.word	0x2003e2a8
   b7740:	2003e6fc 	.word	0x2003e6fc

000b7744 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7744:	4770      	bx	lr

000b7746 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7746:	7441      	strb	r1, [r0, #17]
}
   b7748:	4770      	bx	lr

000b774a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b774a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b774c:	7c00      	ldrb	r0, [r0, #16]
   b774e:	f7fe ffe1 	bl	b6714 <hal_usart_available_data_for_write>
}
   b7752:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7756:	bd08      	pop	{r3, pc}

000b7758 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7758:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b775a:	7c00      	ldrb	r0, [r0, #16]
   b775c:	f7fe ffb2 	bl	b66c4 <hal_usart_available>
}
   b7760:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7764:	bd08      	pop	{r3, pc}

000b7766 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7766:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7768:	7c00      	ldrb	r0, [r0, #16]
   b776a:	f7fe ffbb 	bl	b66e4 <hal_usart_peek>
}
   b776e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7772:	bd08      	pop	{r3, pc}

000b7774 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7774:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7776:	7c00      	ldrb	r0, [r0, #16]
   b7778:	f7fe ffac 	bl	b66d4 <hal_usart_read>
}
   b777c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7780:	bd08      	pop	{r3, pc}

000b7782 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7782:	7c00      	ldrb	r0, [r0, #16]
   b7784:	f7fe bfb6 	b.w	b66f4 <hal_usart_flush>

000b7788 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7788:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b778a:	7c45      	ldrb	r5, [r0, #17]
{
   b778c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b778e:	b12d      	cbz	r5, b779c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7790:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7792:	b003      	add	sp, #12
   b7794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7798:	f7fe bf8c 	b.w	b66b4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b779c:	7c00      	ldrb	r0, [r0, #16]
   b779e:	9101      	str	r1, [sp, #4]
   b77a0:	f7fe ffb8 	bl	b6714 <hal_usart_available_data_for_write>
   b77a4:	2800      	cmp	r0, #0
   b77a6:	9901      	ldr	r1, [sp, #4]
   b77a8:	dcf2      	bgt.n	b7790 <_ZN11USARTSerial5writeEh+0x8>
}
   b77aa:	4628      	mov	r0, r5
   b77ac:	b003      	add	sp, #12
   b77ae:	bd30      	pop	{r4, r5, pc}

000b77b0 <_ZN11USARTSerialD0Ev>:
   b77b0:	b510      	push	{r4, lr}
   b77b2:	2114      	movs	r1, #20
   b77b4:	4604      	mov	r4, r0
   b77b6:	f7fc fc72 	bl	b409e <_ZdlPvj>
   b77ba:	4620      	mov	r0, r4
   b77bc:	bd10      	pop	{r4, pc}
	...

000b77c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b77c0:	b510      	push	{r4, lr}
   b77c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b77c6:	4604      	mov	r4, r0
   b77c8:	4608      	mov	r0, r1
   b77ca:	4611      	mov	r1, r2
   b77cc:	2200      	movs	r2, #0
   b77ce:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b77d2:	4b04      	ldr	r3, [pc, #16]	; (b77e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b77d4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b77d6:	2301      	movs	r3, #1
  _serial = serial;
   b77d8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b77da:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b77dc:	f7fe ffa2 	bl	b6724 <hal_usart_init_ex>
}
   b77e0:	4620      	mov	r0, r4
   b77e2:	bd10      	pop	{r4, pc}
   b77e4:	000bcd34 	.word	0x000bcd34

000b77e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b77e8:	7441      	strb	r1, [r0, #17]
}
   b77ea:	4770      	bx	lr

000b77ec <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b77ec:	4770      	bx	lr

000b77ee <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b77ee:	4770      	bx	lr

000b77f0 <_ZN9USBSerial4readEv>:
{
   b77f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b77f2:	2100      	movs	r1, #0
   b77f4:	7c00      	ldrb	r0, [r0, #16]
   b77f6:	f7fe ffbd 	bl	b6774 <HAL_USB_USART_Receive_Data>
}
   b77fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b77fe:	bd08      	pop	{r3, pc}

000b7800 <_ZN9USBSerial4peekEv>:
{
   b7800:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7802:	2101      	movs	r1, #1
   b7804:	7c00      	ldrb	r0, [r0, #16]
   b7806:	f7fe ffb5 	bl	b6774 <HAL_USB_USART_Receive_Data>
}
   b780a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b780e:	bd08      	pop	{r3, pc}

000b7810 <_ZN9USBSerial17availableForWriteEv>:
{
   b7810:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7812:	7c00      	ldrb	r0, [r0, #16]
   b7814:	f7fe ffa6 	bl	b6764 <HAL_USB_USART_Available_Data_For_Write>
}
   b7818:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b781c:	bd08      	pop	{r3, pc}

000b781e <_ZN9USBSerial9availableEv>:
{
   b781e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7820:	7c00      	ldrb	r0, [r0, #16]
   b7822:	f7fe ff97 	bl	b6754 <HAL_USB_USART_Available_Data>
}
   b7826:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b782a:	bd08      	pop	{r3, pc}

000b782c <_ZN9USBSerial5writeEh>:
{
   b782c:	b513      	push	{r0, r1, r4, lr}
   b782e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7830:	7c00      	ldrb	r0, [r0, #16]
{
   b7832:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7834:	f7fe ff96 	bl	b6764 <HAL_USB_USART_Available_Data_For_Write>
   b7838:	2800      	cmp	r0, #0
   b783a:	9901      	ldr	r1, [sp, #4]
   b783c:	dc01      	bgt.n	b7842 <_ZN9USBSerial5writeEh+0x16>
   b783e:	7c60      	ldrb	r0, [r4, #17]
   b7840:	b120      	cbz	r0, b784c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7842:	7c20      	ldrb	r0, [r4, #16]
   b7844:	f7fe ff9e 	bl	b6784 <HAL_USB_USART_Send_Data>
   b7848:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b784c:	b002      	add	sp, #8
   b784e:	bd10      	pop	{r4, pc}

000b7850 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7850:	7c00      	ldrb	r0, [r0, #16]
   b7852:	f7fe bf9f 	b.w	b6794 <HAL_USB_USART_Flush_Data>

000b7856 <_ZN9USBSerialD0Ev>:
   b7856:	b510      	push	{r4, lr}
   b7858:	2114      	movs	r1, #20
   b785a:	4604      	mov	r4, r0
   b785c:	f7fc fc1f 	bl	b409e <_ZdlPvj>
   b7860:	4620      	mov	r0, r4
   b7862:	bd10      	pop	{r4, pc}

000b7864 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7864:	b510      	push	{r4, lr}
   b7866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b786a:	4604      	mov	r4, r0
   b786c:	4608      	mov	r0, r1
   b786e:	2100      	movs	r1, #0
   b7870:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7874:	4b04      	ldr	r3, [pc, #16]	; (b7888 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7876:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7878:	2301      	movs	r3, #1
  _serial = serial;
   b787a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b787c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b787e:	4611      	mov	r1, r2
   b7880:	f7fe ff58 	bl	b6734 <HAL_USB_USART_Init>
}
   b7884:	4620      	mov	r0, r4
   b7886:	bd10      	pop	{r4, pc}
   b7888:	000bcd64 	.word	0x000bcd64

000b788c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b788c:	7c00      	ldrb	r0, [r0, #16]
   b788e:	2200      	movs	r2, #0
   b7890:	f7fe bf58 	b.w	b6744 <HAL_USB_USART_Begin>

000b7894 <_Z19acquireSerialBufferv>:
{
   b7894:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7896:	2214      	movs	r2, #20
{
   b7898:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b789a:	2100      	movs	r1, #0
   b789c:	f002 fc6d 	bl	ba17a <memset>
}
   b78a0:	4620      	mov	r0, r4
   b78a2:	bd10      	pop	{r4, pc}

000b78a4 <_Z16_fetch_usbserialv>:
{
   b78a4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b78a6:	4c0f      	ldr	r4, [pc, #60]	; (b78e4 <_Z16_fetch_usbserialv+0x40>)
{
   b78a8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b78aa:	a803      	add	r0, sp, #12
   b78ac:	f7ff fff2 	bl	b7894 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b78b0:	7821      	ldrb	r1, [r4, #0]
   b78b2:	f3bf 8f5b 	dmb	ish
   b78b6:	f011 0101 	ands.w	r1, r1, #1
   b78ba:	d10f      	bne.n	b78dc <_Z16_fetch_usbserialv+0x38>
   b78bc:	4620      	mov	r0, r4
   b78be:	9101      	str	r1, [sp, #4]
   b78c0:	f7fc fbfc 	bl	b40bc <__cxa_guard_acquire>
   b78c4:	9901      	ldr	r1, [sp, #4]
   b78c6:	b148      	cbz	r0, b78dc <_Z16_fetch_usbserialv+0x38>
   b78c8:	aa03      	add	r2, sp, #12
   b78ca:	4807      	ldr	r0, [pc, #28]	; (b78e8 <_Z16_fetch_usbserialv+0x44>)
   b78cc:	f7ff ffca 	bl	b7864 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b78d0:	4620      	mov	r0, r4
   b78d2:	f7fc fbf8 	bl	b40c6 <__cxa_guard_release>
   b78d6:	4805      	ldr	r0, [pc, #20]	; (b78ec <_Z16_fetch_usbserialv+0x48>)
   b78d8:	f002 fc0a 	bl	ba0f0 <atexit>
	return _usbserial;
}
   b78dc:	4802      	ldr	r0, [pc, #8]	; (b78e8 <_Z16_fetch_usbserialv+0x44>)
   b78de:	b008      	add	sp, #32
   b78e0:	bd10      	pop	{r4, pc}
   b78e2:	bf00      	nop
   b78e4:	2003e700 	.word	0x2003e700
   b78e8:	2003e704 	.word	0x2003e704
   b78ec:	000b77ed 	.word	0x000b77ed

000b78f0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b78f0:	2200      	movs	r2, #0
   b78f2:	6840      	ldr	r0, [r0, #4]
   b78f4:	4611      	mov	r1, r2
   b78f6:	f7fe bfa9 	b.w	b684c <network_ready>

000b78fa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b78fa:	2200      	movs	r2, #0
   b78fc:	6840      	ldr	r0, [r0, #4]
   b78fe:	4611      	mov	r1, r2
   b7900:	f7fe bfc4 	b.w	b688c <network_listening>

000b7904 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7904:	2200      	movs	r2, #0
   b7906:	6840      	ldr	r0, [r0, #4]
   b7908:	4611      	mov	r1, r2
   b790a:	f7fe bfcf 	b.w	b68ac <network_get_listen_timeout>

000b790e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b790e:	6840      	ldr	r0, [r0, #4]
   b7910:	2200      	movs	r2, #0
   b7912:	f7fe bfc3 	b.w	b689c <network_set_listen_timeout>

000b7916 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7916:	6840      	ldr	r0, [r0, #4]
   b7918:	2200      	movs	r2, #0
   b791a:	f081 0101 	eor.w	r1, r1, #1
   b791e:	f7fe bfad 	b.w	b687c <network_listen>

000b7922 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7922:	2300      	movs	r3, #0
   b7924:	6840      	ldr	r0, [r0, #4]
   b7926:	461a      	mov	r2, r3
   b7928:	4619      	mov	r1, r3
   b792a:	f7fe bf9f 	b.w	b686c <network_off>

000b792e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b792e:	2300      	movs	r3, #0
   b7930:	6840      	ldr	r0, [r0, #4]
   b7932:	461a      	mov	r2, r3
   b7934:	4619      	mov	r1, r3
   b7936:	f7fe bf91 	b.w	b685c <network_on>

000b793a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b793a:	2200      	movs	r2, #0
   b793c:	6840      	ldr	r0, [r0, #4]
   b793e:	4611      	mov	r1, r2
   b7940:	f7fe bf74 	b.w	b682c <network_connecting>

000b7944 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7944:	6840      	ldr	r0, [r0, #4]
   b7946:	2200      	movs	r2, #0
   b7948:	2102      	movs	r1, #2
   b794a:	f7fe bf77 	b.w	b683c <network_disconnect>

000b794e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b794e:	2300      	movs	r3, #0
   b7950:	6840      	ldr	r0, [r0, #4]
   b7952:	461a      	mov	r2, r3
   b7954:	f7fe bf62 	b.w	b681c <network_connect>

000b7958 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7958:	4b02      	ldr	r3, [pc, #8]	; (b7964 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b795a:	2204      	movs	r2, #4
   b795c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b795e:	4a02      	ldr	r2, [pc, #8]	; (b7968 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7960:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7962:	4770      	bx	lr
   b7964:	2003e718 	.word	0x2003e718
   b7968:	000bcd94 	.word	0x000bcd94

000b796c <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b796c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b7970:	1e93      	subs	r3, r2, #2
{
   b7972:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b7974:	2b22      	cmp	r3, #34	; 0x22
   b7976:	f04f 0300 	mov.w	r3, #0
{
   b797a:	460d      	mov	r5, r1
   b797c:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b797e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b7982:	d927      	bls.n	b79d4 <ltoa+0x68>

      if (10 == base && N < 0L)
   b7984:	2800      	cmp	r0, #0
   b7986:	da2a      	bge.n	b79de <ltoa+0x72>
      {
            *head++ = '-';
   b7988:	462e      	mov	r6, r5
   b798a:	232d      	movs	r3, #45	; 0x2d
   b798c:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b7990:	4240      	negs	r0, r0
   b7992:	240a      	movs	r4, #10
      *tail-- = '\0';
   b7994:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b7998:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b799c:	4622      	mov	r2, r4
   b799e:	4601      	mov	r1, r0
   b79a0:	a801      	add	r0, sp, #4
   b79a2:	f002 fbae 	bl	ba102 <ldiv>
   b79a6:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b79a8:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b79aa:	2b09      	cmp	r3, #9
   b79ac:	bfcc      	ite	gt
   b79ae:	2237      	movgt	r2, #55	; 0x37
   b79b0:	2230      	movle	r2, #48	; 0x30
   b79b2:	fa52 f383 	uxtab	r3, r2, r3
   b79b6:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b79ba:	f108 0801 	add.w	r8, r8, #1
   b79be:	2800      	cmp	r0, #0
   b79c0:	d1ec      	bne.n	b799c <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b79c2:	4642      	mov	r2, r8
   b79c4:	1c79      	adds	r1, r7, #1
   b79c6:	4630      	mov	r0, r6
   b79c8:	f002 fbaf 	bl	ba12a <memcpy>
      return str;
}
   b79cc:	4628      	mov	r0, r5
   b79ce:	b00c      	add	sp, #48	; 0x30
   b79d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b79d4:	2a0a      	cmp	r2, #10
   b79d6:	d0d5      	beq.n	b7984 <ltoa+0x18>
      if (uarg)
   b79d8:	b118      	cbz	r0, b79e2 <ltoa+0x76>
   b79da:	462e      	mov	r6, r5
   b79dc:	e7da      	b.n	b7994 <ltoa+0x28>
   b79de:	240a      	movs	r4, #10
   b79e0:	e7fa      	b.n	b79d8 <ltoa+0x6c>
      else  *tail-- = '0';
   b79e2:	2330      	movs	r3, #48	; 0x30
   b79e4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b79e8:	462e      	mov	r6, r5
   b79ea:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b79ee:	f04f 0802 	mov.w	r8, #2
   b79f2:	e7e6      	b.n	b79c2 <ltoa+0x56>

000b79f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b79f4:	4b01      	ldr	r3, [pc, #4]	; (b79fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b79f6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b79f8:	4770      	bx	lr
   b79fa:	bf00      	nop
   b79fc:	2003e2b0 	.word	0x2003e2b0

000b7a00 <serialEventRun>:
{
   b7a00:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7a02:	4b0b      	ldr	r3, [pc, #44]	; (b7a30 <serialEventRun+0x30>)
   b7a04:	b143      	cbz	r3, b7a18 <serialEventRun+0x18>
   b7a06:	f7ff ff4d 	bl	b78a4 <_Z16_fetch_usbserialv>
   b7a0a:	6803      	ldr	r3, [r0, #0]
   b7a0c:	691b      	ldr	r3, [r3, #16]
   b7a0e:	4798      	blx	r3
   b7a10:	2800      	cmp	r0, #0
   b7a12:	dd01      	ble.n	b7a18 <serialEventRun+0x18>
        serialEvent();
   b7a14:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7a18:	4b06      	ldr	r3, [pc, #24]	; (b7a34 <serialEventRun+0x34>)
   b7a1a:	b143      	cbz	r3, b7a2e <serialEventRun+0x2e>
   b7a1c:	f000 f9be 	bl	b7d9c <_Z22__fetch_global_Serial1v>
   b7a20:	6803      	ldr	r3, [r0, #0]
   b7a22:	691b      	ldr	r3, [r3, #16]
   b7a24:	4798      	blx	r3
   b7a26:	2800      	cmp	r0, #0
   b7a28:	dd01      	ble.n	b7a2e <serialEventRun+0x2e>
        serialEvent1();
   b7a2a:	f3af 8000 	nop.w
}
   b7a2e:	bd08      	pop	{r3, pc}
	...

000b7a38 <_post_loop>:
{
   b7a38:	b508      	push	{r3, lr}
	serialEventRun();
   b7a3a:	f7ff ffe1 	bl	b7a00 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7a3e:	f7fe fcd9 	bl	b63f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7a42:	4b01      	ldr	r3, [pc, #4]	; (b7a48 <_post_loop+0x10>)
   b7a44:	6018      	str	r0, [r3, #0]
}
   b7a46:	bd08      	pop	{r3, pc}
   b7a48:	2003e728 	.word	0x2003e728

000b7a4c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7a4c:	4805      	ldr	r0, [pc, #20]	; (b7a64 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7a4e:	4a06      	ldr	r2, [pc, #24]	; (b7a68 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7a50:	4906      	ldr	r1, [pc, #24]	; (b7a6c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7a52:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7a54:	1a12      	subs	r2, r2, r0
   b7a56:	f002 fb68 	bl	ba12a <memcpy>
    __backup_sram_signature = signature;
   b7a5a:	4b05      	ldr	r3, [pc, #20]	; (b7a70 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7a5c:	4a05      	ldr	r2, [pc, #20]	; (b7a74 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7a5e:	601a      	str	r2, [r3, #0]
}
   b7a60:	bd08      	pop	{r3, pc}
   b7a62:	bf00      	nop
   b7a64:	2003f400 	.word	0x2003f400
   b7a68:	2003f404 	.word	0x2003f404
   b7a6c:	000bd2dc 	.word	0x000bd2dc
   b7a70:	2003f400 	.word	0x2003f400
   b7a74:	9a271c1e 	.word	0x9a271c1e

000b7a78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7a78:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7a7a:	2300      	movs	r3, #0
   b7a7c:	9300      	str	r3, [sp, #0]
   b7a7e:	461a      	mov	r2, r3
   b7a80:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7a84:	f7fe feb8 	bl	b67f8 <system_ctrl_set_result>
}
   b7a88:	b003      	add	sp, #12
   b7a8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7a90 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7a90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7a92:	8843      	ldrh	r3, [r0, #2]
   b7a94:	2b0a      	cmp	r3, #10
   b7a96:	d008      	beq.n	b7aaa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7a98:	2b50      	cmp	r3, #80	; 0x50
   b7a9a:	d10b      	bne.n	b7ab4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7a9c:	4b09      	ldr	r3, [pc, #36]	; (b7ac4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7a9e:	681b      	ldr	r3, [r3, #0]
   b7aa0:	b14b      	cbz	r3, b7ab6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7aa2:	b003      	add	sp, #12
   b7aa4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7aa8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7aaa:	f7ff ffe5 	bl	b7a78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7aae:	b003      	add	sp, #12
   b7ab0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7ab4:	2300      	movs	r3, #0
   b7ab6:	9300      	str	r3, [sp, #0]
   b7ab8:	461a      	mov	r2, r3
   b7aba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7abe:	f7fe fe9b 	bl	b67f8 <system_ctrl_set_result>
}
   b7ac2:	e7f4      	b.n	b7aae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7ac4:	2003e724 	.word	0x2003e724

000b7ac8 <module_user_init_hook>:
{
   b7ac8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7aca:	4812      	ldr	r0, [pc, #72]	; (b7b14 <module_user_init_hook+0x4c>)
   b7acc:	2100      	movs	r1, #0
   b7ace:	f7fe ff3d 	bl	b694c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7ad2:	4b11      	ldr	r3, [pc, #68]	; (b7b18 <module_user_init_hook+0x50>)
   b7ad4:	681a      	ldr	r2, [r3, #0]
   b7ad6:	4b11      	ldr	r3, [pc, #68]	; (b7b1c <module_user_init_hook+0x54>)
   b7ad8:	429a      	cmp	r2, r3
   b7ada:	4b11      	ldr	r3, [pc, #68]	; (b7b20 <module_user_init_hook+0x58>)
   b7adc:	bf0c      	ite	eq
   b7ade:	2201      	moveq	r2, #1
   b7ae0:	2200      	movne	r2, #0
   b7ae2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7ae4:	d001      	beq.n	b7aea <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7ae6:	f7ff ffb1 	bl	b7a4c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7aea:	f7fe fc73 	bl	b63d4 <HAL_RNG_GetRandomNumber>
   b7aee:	4604      	mov	r4, r0
    srand(seed);
   b7af0:	f002 fb4c 	bl	ba18c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7af4:	4b0b      	ldr	r3, [pc, #44]	; (b7b24 <module_user_init_hook+0x5c>)
   b7af6:	b113      	cbz	r3, b7afe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7af8:	4620      	mov	r0, r4
   b7afa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7afe:	2100      	movs	r1, #0
   b7b00:	4808      	ldr	r0, [pc, #32]	; (b7b24 <module_user_init_hook+0x5c>)
   b7b02:	f7fe fe83 	bl	b680c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7b0a:	4807      	ldr	r0, [pc, #28]	; (b7b28 <module_user_init_hook+0x60>)
   b7b0c:	2100      	movs	r1, #0
   b7b0e:	f7fe be69 	b.w	b67e4 <system_ctrl_set_app_request_handler>
   b7b12:	bf00      	nop
   b7b14:	000b79f5 	.word	0x000b79f5
   b7b18:	2003f400 	.word	0x2003f400
   b7b1c:	9a271c1e 	.word	0x9a271c1e
   b7b20:	2003e720 	.word	0x2003e720
   b7b24:	00000000 	.word	0x00000000
   b7b28:	000b7a91 	.word	0x000b7a91

000b7b2c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7b2c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7b2e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7b30:	d902      	bls.n	b7b38 <pinAvailable+0xc>
    return false;
   b7b32:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7b34:	b002      	add	sp, #8
   b7b36:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7b38:	f1a0 030b 	sub.w	r3, r0, #11
   b7b3c:	2b02      	cmp	r3, #2
   b7b3e:	d81a      	bhi.n	b7b76 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7b40:	4c17      	ldr	r4, [pc, #92]	; (b7ba0 <pinAvailable+0x74>)
   b7b42:	7821      	ldrb	r1, [r4, #0]
   b7b44:	f3bf 8f5b 	dmb	ish
   b7b48:	f011 0101 	ands.w	r1, r1, #1
   b7b4c:	d10b      	bne.n	b7b66 <pinAvailable+0x3a>
   b7b4e:	4620      	mov	r0, r4
   b7b50:	9101      	str	r1, [sp, #4]
   b7b52:	f7fc fab3 	bl	b40bc <__cxa_guard_acquire>
   b7b56:	9901      	ldr	r1, [sp, #4]
   b7b58:	b128      	cbz	r0, b7b66 <pinAvailable+0x3a>
   b7b5a:	4812      	ldr	r0, [pc, #72]	; (b7ba4 <pinAvailable+0x78>)
   b7b5c:	f7ff f9ba 	bl	b6ed4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7b60:	4620      	mov	r0, r4
   b7b62:	f7fc fab0 	bl	b40c6 <__cxa_guard_release>
   b7b66:	4b0f      	ldr	r3, [pc, #60]	; (b7ba4 <pinAvailable+0x78>)
   b7b68:	7818      	ldrb	r0, [r3, #0]
   b7b6a:	f7fe fd7b 	bl	b6664 <hal_spi_is_enabled>
   b7b6e:	2800      	cmp	r0, #0
   b7b70:	d1df      	bne.n	b7b32 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7b72:	2001      	movs	r0, #1
   b7b74:	e7de      	b.n	b7b34 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7b76:	2801      	cmp	r0, #1
   b7b78:	d809      	bhi.n	b7b8e <pinAvailable+0x62>
   b7b7a:	f000 f8cf 	bl	b7d1c <_Z19__fetch_global_Wirev>
   b7b7e:	2100      	movs	r1, #0
   b7b80:	7c00      	ldrb	r0, [r0, #16]
   b7b82:	f7fe fcc7 	bl	b6514 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7b86:	f080 0001 	eor.w	r0, r0, #1
   b7b8a:	b2c0      	uxtb	r0, r0
   b7b8c:	e7d2      	b.n	b7b34 <pinAvailable+0x8>
   b7b8e:	3809      	subs	r0, #9
   b7b90:	2801      	cmp	r0, #1
   b7b92:	d8ee      	bhi.n	b7b72 <pinAvailable+0x46>
   b7b94:	f000 f902 	bl	b7d9c <_Z22__fetch_global_Serial1v>
   b7b98:	7c00      	ldrb	r0, [r0, #16]
   b7b9a:	f7fe fdb3 	bl	b6704 <hal_usart_is_enabled>
   b7b9e:	e7f2      	b.n	b7b86 <pinAvailable+0x5a>
   b7ba0:	2003e6b8 	.word	0x2003e6b8
   b7ba4:	2003e6bc 	.word	0x2003e6bc

000b7ba8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7ba8:	2823      	cmp	r0, #35	; 0x23
{
   b7baa:	b538      	push	{r3, r4, r5, lr}
   b7bac:	4604      	mov	r4, r0
   b7bae:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7bb0:	d80a      	bhi.n	b7bc8 <pinMode+0x20>
   b7bb2:	29ff      	cmp	r1, #255	; 0xff
   b7bb4:	d008      	beq.n	b7bc8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7bb6:	f7ff ffb9 	bl	b7b2c <pinAvailable>
   b7bba:	b128      	cbz	r0, b7bc8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7bbc:	4629      	mov	r1, r5
   b7bbe:	4620      	mov	r0, r4
}
   b7bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7bc4:	f7fe bc26 	b.w	b6414 <HAL_Pin_Mode>
}
   b7bc8:	bd38      	pop	{r3, r4, r5, pc}

000b7bca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7bca:	b538      	push	{r3, r4, r5, lr}
   b7bcc:	4604      	mov	r4, r0
   b7bce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7bd0:	f7fe fc28 	bl	b6424 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7bd4:	28ff      	cmp	r0, #255	; 0xff
   b7bd6:	d010      	beq.n	b7bfa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7bd8:	2806      	cmp	r0, #6
   b7bda:	d804      	bhi.n	b7be6 <digitalWrite+0x1c>
   b7bdc:	234d      	movs	r3, #77	; 0x4d
   b7bde:	fa23 f000 	lsr.w	r0, r3, r0
   b7be2:	07c3      	lsls	r3, r0, #31
   b7be4:	d409      	bmi.n	b7bfa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7be6:	4620      	mov	r0, r4
   b7be8:	f7ff ffa0 	bl	b7b2c <pinAvailable>
   b7bec:	b128      	cbz	r0, b7bfa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7bee:	4629      	mov	r1, r5
   b7bf0:	4620      	mov	r0, r4
}
   b7bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7bf6:	f7fe bc1d 	b.w	b6434 <HAL_GPIO_Write>
}
   b7bfa:	bd38      	pop	{r3, r4, r5, pc}

000b7bfc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7bfc:	b510      	push	{r4, lr}
   b7bfe:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7c00:	f7fe fc10 	bl	b6424 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7c04:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7c06:	b2db      	uxtb	r3, r3
   b7c08:	2b01      	cmp	r3, #1
   b7c0a:	d908      	bls.n	b7c1e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7c0c:	4620      	mov	r0, r4
   b7c0e:	f7ff ff8d 	bl	b7b2c <pinAvailable>
   b7c12:	b120      	cbz	r0, b7c1e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7c14:	4620      	mov	r0, r4
}
   b7c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7c1a:	f7fe bc13 	b.w	b6444 <HAL_GPIO_Read>
}
   b7c1e:	2000      	movs	r0, #0
   b7c20:	bd10      	pop	{r4, pc}

000b7c22 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7c22:	280d      	cmp	r0, #13
{
   b7c24:	b510      	push	{r4, lr}
   b7c26:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7c28:	bf9c      	itt	ls
   b7c2a:	340e      	addls	r4, #14
   b7c2c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b7c2e:	4620      	mov	r0, r4
   b7c30:	f7ff ff7c 	bl	b7b2c <pinAvailable>
   b7c34:	b150      	cbz	r0, b7c4c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b7c36:	2103      	movs	r1, #3
   b7c38:	4620      	mov	r0, r4
   b7c3a:	f7fe fbe3 	bl	b6404 <HAL_Validate_Pin_Function>
   b7c3e:	2803      	cmp	r0, #3
   b7c40:	d104      	bne.n	b7c4c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7c42:	4620      	mov	r0, r4
}
   b7c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7c48:	f7fe bc0c 	b.w	b6464 <hal_adc_read>
}
   b7c4c:	2000      	movs	r0, #0
   b7c4e:	bd10      	pop	{r4, pc}

000b7c50 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b7c50:	b538      	push	{r3, r4, r5, lr}
   b7c52:	4604      	mov	r4, r0
   b7c54:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b7c56:	f7ff ff69 	bl	b7b2c <pinAvailable>
   b7c5a:	b1f0      	cbz	r0, b7c9a <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b7c5c:	2104      	movs	r1, #4
   b7c5e:	4620      	mov	r0, r4
   b7c60:	f7fe fbd0 	bl	b6404 <HAL_Validate_Pin_Function>
   b7c64:	2804      	cmp	r0, #4
   b7c66:	d105      	bne.n	b7c74 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b7c68:	b2a9      	uxth	r1, r5
   b7c6a:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b7c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b7c70:	f7fe bbf0 	b.w	b6454 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b7c74:	2102      	movs	r1, #2
   b7c76:	4620      	mov	r0, r4
   b7c78:	f7fe fbc4 	bl	b6404 <HAL_Validate_Pin_Function>
   b7c7c:	2802      	cmp	r0, #2
   b7c7e:	d10c      	bne.n	b7c9a <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b7c80:	4620      	mov	r0, r4
   b7c82:	f7fe fbcf 	bl	b6424 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b7c86:	2801      	cmp	r0, #1
   b7c88:	d001      	beq.n	b7c8e <_Z11analogWritetm+0x3e>
   b7c8a:	2804      	cmp	r0, #4
   b7c8c:	d105      	bne.n	b7c9a <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b7c8e:	4629      	mov	r1, r5
   b7c90:	4620      	mov	r0, r4
}
   b7c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b7c96:	f7fe bbf5 	b.w	b6484 <hal_pwm_write_ext>
}
   b7c9a:	bd38      	pop	{r3, r4, r5, pc}

000b7c9c <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b7c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7ca0:	4690      	mov	r8, r2
   b7ca2:	461f      	mov	r7, r3
   b7ca4:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7ca6:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b7ca8:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b7caa:	f1c4 0107 	rsb	r1, r4, #7
   b7cae:	f1b8 0f00 	cmp.w	r8, #0
   b7cb2:	d112      	bne.n	b7cda <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7cb4:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7cb8:	f001 0101 	and.w	r1, r1, #1
   b7cbc:	4630      	mov	r0, r6
   b7cbe:	f7ff ff84 	bl	b7bca <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b7cc2:	2101      	movs	r1, #1
   b7cc4:	4628      	mov	r0, r5
   b7cc6:	f7ff ff80 	bl	b7bca <digitalWrite>
    digitalWrite(clockPin, LOW);
   b7cca:	2100      	movs	r1, #0
   b7ccc:	4628      	mov	r0, r5
   b7cce:	f7ff ff7c 	bl	b7bca <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b7cd2:	3c01      	subs	r4, #1
   b7cd4:	d2e9      	bcs.n	b7caa <shiftOut+0xe>
  }
}
   b7cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7cda:	fa47 f104 	asr.w	r1, r7, r4
   b7cde:	e7eb      	b.n	b7cb8 <shiftOut+0x1c>

000b7ce0 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b7ce0:	f7fe bbc8 	b.w	b6474 <HAL_Pulse_In>

000b7ce4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7ce4:	4770      	bx	lr
	...

000b7ce8 <_Z17acquireWireBufferv>:
{
   b7ce8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7cea:	4b0a      	ldr	r3, [pc, #40]	; (b7d14 <_Z17acquireWireBufferv+0x2c>)
   b7cec:	6003      	str	r3, [r0, #0]
   b7cee:	2301      	movs	r3, #1
{
   b7cf0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7cf2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7cf4:	4908      	ldr	r1, [pc, #32]	; (b7d18 <_Z17acquireWireBufferv+0x30>)
   b7cf6:	2020      	movs	r0, #32
   b7cf8:	f000 f874 	bl	b7de4 <_ZnajRKSt9nothrow_t>
	};
   b7cfc:	2520      	movs	r5, #32
   b7cfe:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7d00:	4905      	ldr	r1, [pc, #20]	; (b7d18 <_Z17acquireWireBufferv+0x30>)
	};
   b7d02:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7d04:	4628      	mov	r0, r5
   b7d06:	f000 f86d 	bl	b7de4 <_ZnajRKSt9nothrow_t>
	};
   b7d0a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7d0e:	4620      	mov	r0, r4
   b7d10:	bd38      	pop	{r3, r4, r5, pc}
   b7d12:	bf00      	nop
   b7d14:	00010018 	.word	0x00010018
   b7d18:	000bcdc8 	.word	0x000bcdc8

000b7d1c <_Z19__fetch_global_Wirev>:
{
   b7d1c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7d1e:	4d0e      	ldr	r5, [pc, #56]	; (b7d58 <_Z19__fetch_global_Wirev+0x3c>)
   b7d20:	7829      	ldrb	r1, [r5, #0]
   b7d22:	f3bf 8f5b 	dmb	ish
   b7d26:	f011 0401 	ands.w	r4, r1, #1
{
   b7d2a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7d2c:	d111      	bne.n	b7d52 <_Z19__fetch_global_Wirev+0x36>
   b7d2e:	4628      	mov	r0, r5
   b7d30:	f7fc f9c4 	bl	b40bc <__cxa_guard_acquire>
   b7d34:	b168      	cbz	r0, b7d52 <_Z19__fetch_global_Wirev+0x36>
   b7d36:	4668      	mov	r0, sp
   b7d38:	f7ff ffd6 	bl	b7ce8 <_Z17acquireWireBufferv>
   b7d3c:	466a      	mov	r2, sp
   b7d3e:	4621      	mov	r1, r4
   b7d40:	4806      	ldr	r0, [pc, #24]	; (b7d5c <_Z19__fetch_global_Wirev+0x40>)
   b7d42:	f7fe fe81 	bl	b6a48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7d46:	4628      	mov	r0, r5
   b7d48:	f7fc f9bd 	bl	b40c6 <__cxa_guard_release>
   b7d4c:	4804      	ldr	r0, [pc, #16]	; (b7d60 <_Z19__fetch_global_Wirev+0x44>)
   b7d4e:	f002 f9cf 	bl	ba0f0 <atexit>
	return wire;
}
   b7d52:	4802      	ldr	r0, [pc, #8]	; (b7d5c <_Z19__fetch_global_Wirev+0x40>)
   b7d54:	b007      	add	sp, #28
   b7d56:	bd30      	pop	{r4, r5, pc}
   b7d58:	2003e72c 	.word	0x2003e72c
   b7d5c:	2003e730 	.word	0x2003e730
   b7d60:	000b7ce5 	.word	0x000b7ce5

000b7d64 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7d64:	4770      	bx	lr
	...

000b7d68 <_Z20acquireSerial1Bufferv>:
{
   b7d68:	b538      	push	{r3, r4, r5, lr}
   b7d6a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7d6c:	2514      	movs	r5, #20
   b7d6e:	462a      	mov	r2, r5
   b7d70:	2100      	movs	r1, #0
   b7d72:	f002 fa02 	bl	ba17a <memset>
   b7d76:	8025      	strh	r5, [r4, #0]
   b7d78:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d7a:	4907      	ldr	r1, [pc, #28]	; (b7d98 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7d7c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d7e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7d80:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d82:	f000 f82f 	bl	b7de4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d86:	4904      	ldr	r1, [pc, #16]	; (b7d98 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7d88:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d8a:	4628      	mov	r0, r5
   b7d8c:	f000 f82a 	bl	b7de4 <_ZnajRKSt9nothrow_t>
    };
   b7d90:	60e0      	str	r0, [r4, #12]
}
   b7d92:	4620      	mov	r0, r4
   b7d94:	bd38      	pop	{r3, r4, r5, pc}
   b7d96:	bf00      	nop
   b7d98:	000bcdc8 	.word	0x000bcdc8

000b7d9c <_Z22__fetch_global_Serial1v>:
{
   b7d9c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7d9e:	4d0e      	ldr	r5, [pc, #56]	; (b7dd8 <_Z22__fetch_global_Serial1v+0x3c>)
   b7da0:	7829      	ldrb	r1, [r5, #0]
   b7da2:	f3bf 8f5b 	dmb	ish
   b7da6:	f011 0401 	ands.w	r4, r1, #1
{
   b7daa:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7dac:	d111      	bne.n	b7dd2 <_Z22__fetch_global_Serial1v+0x36>
   b7dae:	4628      	mov	r0, r5
   b7db0:	f7fc f984 	bl	b40bc <__cxa_guard_acquire>
   b7db4:	b168      	cbz	r0, b7dd2 <_Z22__fetch_global_Serial1v+0x36>
   b7db6:	a801      	add	r0, sp, #4
   b7db8:	f7ff ffd6 	bl	b7d68 <_Z20acquireSerial1Bufferv>
   b7dbc:	aa01      	add	r2, sp, #4
   b7dbe:	4621      	mov	r1, r4
   b7dc0:	4806      	ldr	r0, [pc, #24]	; (b7ddc <_Z22__fetch_global_Serial1v+0x40>)
   b7dc2:	f7ff fcfd 	bl	b77c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7dc6:	4628      	mov	r0, r5
   b7dc8:	f7fc f97d 	bl	b40c6 <__cxa_guard_release>
   b7dcc:	4804      	ldr	r0, [pc, #16]	; (b7de0 <_Z22__fetch_global_Serial1v+0x44>)
   b7dce:	f002 f98f 	bl	ba0f0 <atexit>
    return serial1;
}
   b7dd2:	4802      	ldr	r0, [pc, #8]	; (b7ddc <_Z22__fetch_global_Serial1v+0x40>)
   b7dd4:	b007      	add	sp, #28
   b7dd6:	bd30      	pop	{r4, r5, pc}
   b7dd8:	2003e744 	.word	0x2003e744
   b7ddc:	2003e748 	.word	0x2003e748
   b7de0:	000b7d65 	.word	0x000b7d65

000b7de4 <_ZnajRKSt9nothrow_t>:
   b7de4:	f7fc b959 	b.w	b409a <_Znaj>

000b7de8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7de8:	4901      	ldr	r1, [pc, #4]	; (b7df0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7dea:	f000 b8f9 	b.w	b7fe0 <_ZNKSt9type_infoeqERKS_>
   b7dee:	bf00      	nop
   b7df0:	000bcde4 	.word	0x000bcde4

000b7df4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7df4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7df6:	2400      	movs	r4, #0
   b7df8:	2310      	movs	r3, #16
   b7dfa:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7dfe:	6803      	ldr	r3, [r0, #0]
   b7e00:	4615      	mov	r5, r2
   b7e02:	699e      	ldr	r6, [r3, #24]
   b7e04:	6812      	ldr	r2, [r2, #0]
   b7e06:	466b      	mov	r3, sp
   b7e08:	e9cd 4400 	strd	r4, r4, [sp]
   b7e0c:	47b0      	blx	r6
   b7e0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7e12:	f003 0306 	and.w	r3, r3, #6
   b7e16:	2b06      	cmp	r3, #6
   b7e18:	bf03      	ittte	eq
   b7e1a:	9b00      	ldreq	r3, [sp, #0]
   b7e1c:	602b      	streq	r3, [r5, #0]
   b7e1e:	2001      	moveq	r0, #1
   b7e20:	4620      	movne	r0, r4
   b7e22:	b004      	add	sp, #16
   b7e24:	bd70      	pop	{r4, r5, r6, pc}

000b7e26 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7e26:	9800      	ldr	r0, [sp, #0]
   b7e28:	4290      	cmp	r0, r2
   b7e2a:	bf14      	ite	ne
   b7e2c:	2001      	movne	r0, #1
   b7e2e:	2006      	moveq	r0, #6
   b7e30:	4770      	bx	lr
	...

000b7e34 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7e34:	b510      	push	{r4, lr}
   b7e36:	4b03      	ldr	r3, [pc, #12]	; (b7e44 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7e38:	6003      	str	r3, [r0, #0]
   b7e3a:	4604      	mov	r4, r0
   b7e3c:	f000 f8cd 	bl	b7fda <_ZNSt9type_infoD1Ev>
   b7e40:	4620      	mov	r0, r4
   b7e42:	bd10      	pop	{r4, pc}
   b7e44:	000bce24 	.word	0x000bce24

000b7e48 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7e48:	b510      	push	{r4, lr}
   b7e4a:	4604      	mov	r4, r0
   b7e4c:	f7ff fff2 	bl	b7e34 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7e50:	4620      	mov	r0, r4
   b7e52:	2108      	movs	r1, #8
   b7e54:	f7fc f923 	bl	b409e <_ZdlPvj>
   b7e58:	4620      	mov	r0, r4
   b7e5a:	bd10      	pop	{r4, pc}

000b7e5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7e60:	461f      	mov	r7, r3
   b7e62:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7e66:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7e6a:	4598      	cmp	r8, r3
   b7e6c:	4606      	mov	r6, r0
   b7e6e:	4615      	mov	r5, r2
   b7e70:	d107      	bne.n	b7e82 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7e72:	9907      	ldr	r1, [sp, #28]
   b7e74:	f000 f8b4 	bl	b7fe0 <_ZNKSt9type_infoeqERKS_>
   b7e78:	b118      	cbz	r0, b7e82 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7e7a:	7165      	strb	r5, [r4, #5]
   b7e7c:	2000      	movs	r0, #0
   b7e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7e82:	4639      	mov	r1, r7
   b7e84:	4630      	mov	r0, r6
   b7e86:	f000 f8ab 	bl	b7fe0 <_ZNKSt9type_infoeqERKS_>
   b7e8a:	2800      	cmp	r0, #0
   b7e8c:	d0f6      	beq.n	b7e7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7e8e:	2301      	movs	r3, #1
   b7e90:	f8c4 8000 	str.w	r8, [r4]
   b7e94:	7125      	strb	r5, [r4, #4]
   b7e96:	71a3      	strb	r3, [r4, #6]
   b7e98:	e7f0      	b.n	b7e7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7e9a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7e9a:	b538      	push	{r3, r4, r5, lr}
   b7e9c:	4615      	mov	r5, r2
   b7e9e:	461c      	mov	r4, r3
   b7ea0:	f000 f89e 	bl	b7fe0 <_ZNKSt9type_infoeqERKS_>
   b7ea4:	b120      	cbz	r0, b7eb0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7ea6:	2308      	movs	r3, #8
   b7ea8:	60e3      	str	r3, [r4, #12]
   b7eaa:	2306      	movs	r3, #6
   b7eac:	6025      	str	r5, [r4, #0]
   b7eae:	7123      	strb	r3, [r4, #4]
   b7eb0:	bd38      	pop	{r3, r4, r5, pc}

000b7eb2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7eb4:	4605      	mov	r5, r0
   b7eb6:	460c      	mov	r4, r1
   b7eb8:	9201      	str	r2, [sp, #4]
   b7eba:	461e      	mov	r6, r3
   b7ebc:	f000 f890 	bl	b7fe0 <_ZNKSt9type_infoeqERKS_>
   b7ec0:	b950      	cbnz	r0, b7ed8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7ec2:	2e03      	cmp	r6, #3
   b7ec4:	d808      	bhi.n	b7ed8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7ec6:	6823      	ldr	r3, [r4, #0]
   b7ec8:	9a01      	ldr	r2, [sp, #4]
   b7eca:	695b      	ldr	r3, [r3, #20]
   b7ecc:	4629      	mov	r1, r5
   b7ece:	4620      	mov	r0, r4
   b7ed0:	b002      	add	sp, #8
   b7ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7ed6:	4718      	bx	r3
   b7ed8:	b002      	add	sp, #8
   b7eda:	bd70      	pop	{r4, r5, r6, pc}

000b7edc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7edc:	b510      	push	{r4, lr}
   b7ede:	4b03      	ldr	r3, [pc, #12]	; (b7eec <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7ee0:	6003      	str	r3, [r0, #0]
   b7ee2:	4604      	mov	r4, r0
   b7ee4:	f7ff ffa6 	bl	b7e34 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7ee8:	4620      	mov	r0, r4
   b7eea:	bd10      	pop	{r4, pc}
   b7eec:	000bce84 	.word	0x000bce84

000b7ef0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7ef0:	b510      	push	{r4, lr}
   b7ef2:	4604      	mov	r4, r0
   b7ef4:	f7ff fff2 	bl	b7edc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7ef8:	4620      	mov	r0, r4
   b7efa:	210c      	movs	r1, #12
   b7efc:	f7fc f8cf 	bl	b409e <_ZdlPvj>
   b7f00:	4620      	mov	r0, r4
   b7f02:	bd10      	pop	{r4, pc}

000b7f04 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7f06:	9f08      	ldr	r7, [sp, #32]
   b7f08:	4297      	cmp	r7, r2
   b7f0a:	4605      	mov	r5, r0
   b7f0c:	460e      	mov	r6, r1
   b7f0e:	4614      	mov	r4, r2
   b7f10:	d00a      	beq.n	b7f28 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7f12:	68a8      	ldr	r0, [r5, #8]
   b7f14:	6802      	ldr	r2, [r0, #0]
   b7f16:	9708      	str	r7, [sp, #32]
   b7f18:	6a15      	ldr	r5, [r2, #32]
   b7f1a:	4631      	mov	r1, r6
   b7f1c:	4622      	mov	r2, r4
   b7f1e:	46ac      	mov	ip, r5
   b7f20:	b003      	add	sp, #12
   b7f22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7f26:	4760      	bx	ip
   b7f28:	4619      	mov	r1, r3
   b7f2a:	9301      	str	r3, [sp, #4]
   b7f2c:	f000 f858 	bl	b7fe0 <_ZNKSt9type_infoeqERKS_>
   b7f30:	9b01      	ldr	r3, [sp, #4]
   b7f32:	2800      	cmp	r0, #0
   b7f34:	d0ed      	beq.n	b7f12 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7f36:	2006      	movs	r0, #6
   b7f38:	b003      	add	sp, #12
   b7f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7f3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7f3c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f40:	460d      	mov	r5, r1
   b7f42:	4619      	mov	r1, r3
   b7f44:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7f48:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7f4c:	4681      	mov	r9, r0
   b7f4e:	4617      	mov	r7, r2
   b7f50:	4698      	mov	r8, r3
   b7f52:	f000 f845 	bl	b7fe0 <_ZNKSt9type_infoeqERKS_>
   b7f56:	b190      	cbz	r0, b7f7e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7f58:	2d00      	cmp	r5, #0
   b7f5a:	6034      	str	r4, [r6, #0]
   b7f5c:	7137      	strb	r7, [r6, #4]
   b7f5e:	db09      	blt.n	b7f74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7f60:	1961      	adds	r1, r4, r5
   b7f62:	458a      	cmp	sl, r1
   b7f64:	bf0c      	ite	eq
   b7f66:	2106      	moveq	r1, #6
   b7f68:	2101      	movne	r1, #1
   b7f6a:	71b1      	strb	r1, [r6, #6]
   b7f6c:	2000      	movs	r0, #0
   b7f6e:	b001      	add	sp, #4
   b7f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7f74:	3502      	adds	r5, #2
   b7f76:	d1f9      	bne.n	b7f6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7f78:	2301      	movs	r3, #1
   b7f7a:	71b3      	strb	r3, [r6, #6]
   b7f7c:	e7f6      	b.n	b7f6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7f7e:	4554      	cmp	r4, sl
   b7f80:	d106      	bne.n	b7f90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7f82:	4659      	mov	r1, fp
   b7f84:	4648      	mov	r0, r9
   b7f86:	f000 f82b 	bl	b7fe0 <_ZNKSt9type_infoeqERKS_>
   b7f8a:	b108      	cbz	r0, b7f90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7f8c:	7177      	strb	r7, [r6, #5]
   b7f8e:	e7ed      	b.n	b7f6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7f90:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7f94:	6803      	ldr	r3, [r0, #0]
   b7f96:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7f9a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7f9e:	69dc      	ldr	r4, [r3, #28]
   b7fa0:	463a      	mov	r2, r7
   b7fa2:	4643      	mov	r3, r8
   b7fa4:	4629      	mov	r1, r5
   b7fa6:	46a4      	mov	ip, r4
   b7fa8:	b001      	add	sp, #4
   b7faa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7fae:	4760      	bx	ip

000b7fb0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7fb4:	4607      	mov	r7, r0
   b7fb6:	460c      	mov	r4, r1
   b7fb8:	4615      	mov	r5, r2
   b7fba:	461e      	mov	r6, r3
   b7fbc:	f7ff ff6d 	bl	b7e9a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7fc0:	b948      	cbnz	r0, b7fd6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7fc2:	68b8      	ldr	r0, [r7, #8]
   b7fc4:	6803      	ldr	r3, [r0, #0]
   b7fc6:	699f      	ldr	r7, [r3, #24]
   b7fc8:	462a      	mov	r2, r5
   b7fca:	4633      	mov	r3, r6
   b7fcc:	4621      	mov	r1, r4
   b7fce:	46bc      	mov	ip, r7
   b7fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7fd4:	4760      	bx	ip
   b7fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7fda <_ZNSt9type_infoD1Ev>:
   b7fda:	4770      	bx	lr

000b7fdc <_ZNKSt9type_info14__is_pointer_pEv>:
   b7fdc:	2000      	movs	r0, #0
   b7fde:	4770      	bx	lr

000b7fe0 <_ZNKSt9type_infoeqERKS_>:
   b7fe0:	4281      	cmp	r1, r0
   b7fe2:	b508      	push	{r3, lr}
   b7fe4:	d00e      	beq.n	b8004 <_ZNKSt9type_infoeqERKS_+0x24>
   b7fe6:	6840      	ldr	r0, [r0, #4]
   b7fe8:	7803      	ldrb	r3, [r0, #0]
   b7fea:	2b2a      	cmp	r3, #42	; 0x2a
   b7fec:	d00c      	beq.n	b8008 <_ZNKSt9type_infoeqERKS_+0x28>
   b7fee:	6849      	ldr	r1, [r1, #4]
   b7ff0:	780b      	ldrb	r3, [r1, #0]
   b7ff2:	2b2a      	cmp	r3, #42	; 0x2a
   b7ff4:	bf08      	it	eq
   b7ff6:	3101      	addeq	r1, #1
   b7ff8:	f002 f8f6 	bl	ba1e8 <strcmp>
   b7ffc:	fab0 f080 	clz	r0, r0
   b8000:	0940      	lsrs	r0, r0, #5
   b8002:	bd08      	pop	{r3, pc}
   b8004:	2001      	movs	r0, #1
   b8006:	e7fc      	b.n	b8002 <_ZNKSt9type_infoeqERKS_+0x22>
   b8008:	2000      	movs	r0, #0
   b800a:	e7fa      	b.n	b8002 <_ZNKSt9type_infoeqERKS_+0x22>
   b800c:	0000      	movs	r0, r0
	...

000b8010 <pow>:
   b8010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8012:	ed2d 8b02 	vpush	{d8}
   b8016:	ec57 6b10 	vmov	r6, r7, d0
   b801a:	ec55 4b11 	vmov	r4, r5, d1
   b801e:	f000 f8cb 	bl	b81b8 <__ieee754_pow>
   b8022:	4b63      	ldr	r3, [pc, #396]	; (b81b0 <pow+0x1a0>)
   b8024:	eeb0 8a40 	vmov.f32	s16, s0
   b8028:	eef0 8a60 	vmov.f32	s17, s1
   b802c:	f993 3000 	ldrsb.w	r3, [r3]
   b8030:	3301      	adds	r3, #1
   b8032:	d02a      	beq.n	b808a <pow+0x7a>
   b8034:	4622      	mov	r2, r4
   b8036:	462b      	mov	r3, r5
   b8038:	4620      	mov	r0, r4
   b803a:	4629      	mov	r1, r5
   b803c:	f001 fcc4 	bl	b99c8 <__aeabi_dcmpun>
   b8040:	bb18      	cbnz	r0, b808a <pow+0x7a>
   b8042:	4632      	mov	r2, r6
   b8044:	463b      	mov	r3, r7
   b8046:	4630      	mov	r0, r6
   b8048:	4639      	mov	r1, r7
   b804a:	f001 fcbd 	bl	b99c8 <__aeabi_dcmpun>
   b804e:	2800      	cmp	r0, #0
   b8050:	d144      	bne.n	b80dc <pow+0xcc>
   b8052:	2200      	movs	r2, #0
   b8054:	2300      	movs	r3, #0
   b8056:	4630      	mov	r0, r6
   b8058:	4639      	mov	r1, r7
   b805a:	f001 fc83 	bl	b9964 <__aeabi_dcmpeq>
   b805e:	b1d8      	cbz	r0, b8098 <pow+0x88>
   b8060:	2200      	movs	r2, #0
   b8062:	2300      	movs	r3, #0
   b8064:	4620      	mov	r0, r4
   b8066:	4629      	mov	r1, r5
   b8068:	f001 fc7c 	bl	b9964 <__aeabi_dcmpeq>
   b806c:	2800      	cmp	r0, #0
   b806e:	d13d      	bne.n	b80ec <pow+0xdc>
   b8070:	ec45 4b10 	vmov	d0, r4, r5
   b8074:	f000 ff10 	bl	b8e98 <finite>
   b8078:	b138      	cbz	r0, b808a <pow+0x7a>
   b807a:	4620      	mov	r0, r4
   b807c:	4629      	mov	r1, r5
   b807e:	2200      	movs	r2, #0
   b8080:	2300      	movs	r3, #0
   b8082:	f001 fc79 	bl	b9978 <__aeabi_dcmplt>
   b8086:	2800      	cmp	r0, #0
   b8088:	d15c      	bne.n	b8144 <pow+0x134>
   b808a:	eeb0 0a48 	vmov.f32	s0, s16
   b808e:	eef0 0a68 	vmov.f32	s1, s17
   b8092:	ecbd 8b02 	vpop	{d8}
   b8096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8098:	eeb0 0a48 	vmov.f32	s0, s16
   b809c:	eef0 0a68 	vmov.f32	s1, s17
   b80a0:	f000 fefa 	bl	b8e98 <finite>
   b80a4:	b358      	cbz	r0, b80fe <pow+0xee>
   b80a6:	ec51 0b18 	vmov	r0, r1, d8
   b80aa:	2200      	movs	r2, #0
   b80ac:	2300      	movs	r3, #0
   b80ae:	f001 fc59 	bl	b9964 <__aeabi_dcmpeq>
   b80b2:	2800      	cmp	r0, #0
   b80b4:	d0e9      	beq.n	b808a <pow+0x7a>
   b80b6:	ec47 6b10 	vmov	d0, r6, r7
   b80ba:	f000 feed 	bl	b8e98 <finite>
   b80be:	2800      	cmp	r0, #0
   b80c0:	d0e3      	beq.n	b808a <pow+0x7a>
   b80c2:	ec45 4b10 	vmov	d0, r4, r5
   b80c6:	f000 fee7 	bl	b8e98 <finite>
   b80ca:	2800      	cmp	r0, #0
   b80cc:	d0dd      	beq.n	b808a <pow+0x7a>
   b80ce:	f7fe fc2d 	bl	b692c <__errno>
   b80d2:	2322      	movs	r3, #34	; 0x22
   b80d4:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b8190 <pow+0x180>
   b80d8:	6003      	str	r3, [r0, #0]
   b80da:	e7d6      	b.n	b808a <pow+0x7a>
   b80dc:	4620      	mov	r0, r4
   b80de:	4629      	mov	r1, r5
   b80e0:	2200      	movs	r2, #0
   b80e2:	2300      	movs	r3, #0
   b80e4:	f001 fc3e 	bl	b9964 <__aeabi_dcmpeq>
   b80e8:	2800      	cmp	r0, #0
   b80ea:	d0ce      	beq.n	b808a <pow+0x7a>
   b80ec:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b8198 <pow+0x188>
   b80f0:	eeb0 0a48 	vmov.f32	s0, s16
   b80f4:	eef0 0a68 	vmov.f32	s1, s17
   b80f8:	ecbd 8b02 	vpop	{d8}
   b80fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b80fe:	ec47 6b10 	vmov	d0, r6, r7
   b8102:	f000 fec9 	bl	b8e98 <finite>
   b8106:	2800      	cmp	r0, #0
   b8108:	d0cd      	beq.n	b80a6 <pow+0x96>
   b810a:	ec45 4b10 	vmov	d0, r4, r5
   b810e:	f000 fec3 	bl	b8e98 <finite>
   b8112:	2800      	cmp	r0, #0
   b8114:	d0c7      	beq.n	b80a6 <pow+0x96>
   b8116:	ec53 2b18 	vmov	r2, r3, d8
   b811a:	ee18 0a10 	vmov	r0, s16
   b811e:	4619      	mov	r1, r3
   b8120:	f001 fc52 	bl	b99c8 <__aeabi_dcmpun>
   b8124:	bb20      	cbnz	r0, b8170 <pow+0x160>
   b8126:	f7fe fc01 	bl	b692c <__errno>
   b812a:	4603      	mov	r3, r0
   b812c:	2222      	movs	r2, #34	; 0x22
   b812e:	601a      	str	r2, [r3, #0]
   b8130:	4630      	mov	r0, r6
   b8132:	4639      	mov	r1, r7
   b8134:	2200      	movs	r2, #0
   b8136:	2300      	movs	r3, #0
   b8138:	f001 fc1e 	bl	b9978 <__aeabi_dcmplt>
   b813c:	b948      	cbnz	r0, b8152 <pow+0x142>
   b813e:	ed9f 8b18 	vldr	d8, [pc, #96]	; b81a0 <pow+0x190>
   b8142:	e7a2      	b.n	b808a <pow+0x7a>
   b8144:	f7fe fbf2 	bl	b692c <__errno>
   b8148:	2321      	movs	r3, #33	; 0x21
   b814a:	ed9f 8b17 	vldr	d8, [pc, #92]	; b81a8 <pow+0x198>
   b814e:	6003      	str	r3, [r0, #0]
   b8150:	e79b      	b.n	b808a <pow+0x7a>
   b8152:	ec45 4b10 	vmov	d0, r4, r5
   b8156:	f000 feb3 	bl	b8ec0 <rint>
   b815a:	4622      	mov	r2, r4
   b815c:	ec51 0b10 	vmov	r0, r1, d0
   b8160:	462b      	mov	r3, r5
   b8162:	f001 fbff 	bl	b9964 <__aeabi_dcmpeq>
   b8166:	2800      	cmp	r0, #0
   b8168:	d1e9      	bne.n	b813e <pow+0x12e>
   b816a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b81a8 <pow+0x198>
   b816e:	e78c      	b.n	b808a <pow+0x7a>
   b8170:	f7fe fbdc 	bl	b692c <__errno>
   b8174:	2200      	movs	r2, #0
   b8176:	2300      	movs	r3, #0
   b8178:	2121      	movs	r1, #33	; 0x21
   b817a:	6001      	str	r1, [r0, #0]
   b817c:	4610      	mov	r0, r2
   b817e:	4619      	mov	r1, r3
   b8180:	f001 fab2 	bl	b96e8 <__aeabi_ddiv>
   b8184:	ec41 0b18 	vmov	d8, r0, r1
   b8188:	e77f      	b.n	b808a <pow+0x7a>
   b818a:	bf00      	nop
   b818c:	f3af 8000 	nop.w
	...
   b819c:	3ff00000 	.word	0x3ff00000
   b81a0:	00000000 	.word	0x00000000
   b81a4:	7ff00000 	.word	0x7ff00000
   b81a8:	00000000 	.word	0x00000000
   b81ac:	fff00000 	.word	0xfff00000
   b81b0:	2003e2ac 	.word	0x2003e2ac
   b81b4:	00000000 	.word	0x00000000

000b81b8 <__ieee754_pow>:
   b81b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b81bc:	ec57 6b11 	vmov	r6, r7, d1
   b81c0:	ed2d 8b0c 	vpush	{d8-d13}
   b81c4:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b81c8:	ea5a 0206 	orrs.w	r2, sl, r6
   b81cc:	b087      	sub	sp, #28
   b81ce:	d03d      	beq.n	b824c <__ieee754_pow+0x94>
   b81d0:	ec55 4b10 	vmov	r4, r5, d0
   b81d4:	4972      	ldr	r1, [pc, #456]	; (b83a0 <__ieee754_pow+0x1e8>)
   b81d6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b81da:	4588      	cmp	r8, r1
   b81dc:	ee10 2a10 	vmov	r2, s0
   b81e0:	46a9      	mov	r9, r5
   b81e2:	dc2c      	bgt.n	b823e <__ieee754_pow+0x86>
   b81e4:	ee11 3a10 	vmov	r3, s2
   b81e8:	46bb      	mov	fp, r7
   b81ea:	d036      	beq.n	b825a <__ieee754_pow+0xa2>
   b81ec:	458a      	cmp	sl, r1
   b81ee:	dc26      	bgt.n	b823e <__ieee754_pow+0x86>
   b81f0:	496b      	ldr	r1, [pc, #428]	; (b83a0 <__ieee754_pow+0x1e8>)
   b81f2:	458a      	cmp	sl, r1
   b81f4:	d021      	beq.n	b823a <__ieee754_pow+0x82>
   b81f6:	f1b9 0f00 	cmp.w	r9, #0
   b81fa:	db39      	blt.n	b8270 <__ieee754_pow+0xb8>
   b81fc:	2100      	movs	r1, #0
   b81fe:	9100      	str	r1, [sp, #0]
   b8200:	2b00      	cmp	r3, #0
   b8202:	d151      	bne.n	b82a8 <__ieee754_pow+0xf0>
   b8204:	4b66      	ldr	r3, [pc, #408]	; (b83a0 <__ieee754_pow+0x1e8>)
   b8206:	459a      	cmp	sl, r3
   b8208:	f000 80a2 	beq.w	b8350 <__ieee754_pow+0x198>
   b820c:	4b65      	ldr	r3, [pc, #404]	; (b83a4 <__ieee754_pow+0x1ec>)
   b820e:	459a      	cmp	sl, r3
   b8210:	f000 80b0 	beq.w	b8374 <__ieee754_pow+0x1bc>
   b8214:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b8218:	f000 84c0 	beq.w	b8b9c <__ieee754_pow+0x9e4>
   b821c:	4b62      	ldr	r3, [pc, #392]	; (b83a8 <__ieee754_pow+0x1f0>)
   b821e:	459b      	cmp	fp, r3
   b8220:	d142      	bne.n	b82a8 <__ieee754_pow+0xf0>
   b8222:	f1b9 0f00 	cmp.w	r9, #0
   b8226:	db3f      	blt.n	b82a8 <__ieee754_pow+0xf0>
   b8228:	ec45 4b10 	vmov	d0, r4, r5
   b822c:	b007      	add	sp, #28
   b822e:	ecbd 8b0c 	vpop	{d8-d13}
   b8232:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8236:	f000 bd59 	b.w	b8cec <__ieee754_sqrt>
   b823a:	2b00      	cmp	r3, #0
   b823c:	d0db      	beq.n	b81f6 <__ieee754_pow+0x3e>
   b823e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b8242:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b8246:	ea58 0302 	orrs.w	r3, r8, r2
   b824a:	d109      	bne.n	b8260 <__ieee754_pow+0xa8>
   b824c:	ed9f 0b50 	vldr	d0, [pc, #320]	; b8390 <__ieee754_pow+0x1d8>
   b8250:	b007      	add	sp, #28
   b8252:	ecbd 8b0c 	vpop	{d8-d13}
   b8256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b825a:	b90c      	cbnz	r4, b8260 <__ieee754_pow+0xa8>
   b825c:	45c2      	cmp	sl, r8
   b825e:	ddc7      	ble.n	b81f0 <__ieee754_pow+0x38>
   b8260:	4852      	ldr	r0, [pc, #328]	; (b83ac <__ieee754_pow+0x1f4>)
   b8262:	b007      	add	sp, #28
   b8264:	ecbd 8b0c 	vpop	{d8-d13}
   b8268:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b826c:	f000 be20 	b.w	b8eb0 <nan>
   b8270:	494f      	ldr	r1, [pc, #316]	; (b83b0 <__ieee754_pow+0x1f8>)
   b8272:	458a      	cmp	sl, r1
   b8274:	f300 8085 	bgt.w	b8382 <__ieee754_pow+0x1ca>
   b8278:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b827c:	458a      	cmp	sl, r1
   b827e:	dd0f      	ble.n	b82a0 <__ieee754_pow+0xe8>
   b8280:	ea4f 512a 	mov.w	r1, sl, asr #20
   b8284:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b8288:	2914      	cmp	r1, #20
   b828a:	f340 849b 	ble.w	b8bc4 <__ieee754_pow+0xa0c>
   b828e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b8292:	fa23 f001 	lsr.w	r0, r3, r1
   b8296:	fa00 f101 	lsl.w	r1, r0, r1
   b829a:	4299      	cmp	r1, r3
   b829c:	f000 84ed 	beq.w	b8c7a <__ieee754_pow+0xac2>
   b82a0:	2100      	movs	r1, #0
   b82a2:	9100      	str	r1, [sp, #0]
   b82a4:	2b00      	cmp	r3, #0
   b82a6:	d0b1      	beq.n	b820c <__ieee754_pow+0x54>
   b82a8:	ec45 4b10 	vmov	d0, r4, r5
   b82ac:	9202      	str	r2, [sp, #8]
   b82ae:	f000 fde9 	bl	b8e84 <fabs>
   b82b2:	9a02      	ldr	r2, [sp, #8]
   b82b4:	bb5a      	cbnz	r2, b830e <__ieee754_pow+0x156>
   b82b6:	f1b8 0f00 	cmp.w	r8, #0
   b82ba:	d004      	beq.n	b82c6 <__ieee754_pow+0x10e>
   b82bc:	4b39      	ldr	r3, [pc, #228]	; (b83a4 <__ieee754_pow+0x1ec>)
   b82be:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b82c2:	429a      	cmp	r2, r3
   b82c4:	d123      	bne.n	b830e <__ieee754_pow+0x156>
   b82c6:	f1bb 0f00 	cmp.w	fp, #0
   b82ca:	da07      	bge.n	b82dc <__ieee754_pow+0x124>
   b82cc:	ec53 2b10 	vmov	r2, r3, d0
   b82d0:	4934      	ldr	r1, [pc, #208]	; (b83a4 <__ieee754_pow+0x1ec>)
   b82d2:	2000      	movs	r0, #0
   b82d4:	f001 fa08 	bl	b96e8 <__aeabi_ddiv>
   b82d8:	ec41 0b10 	vmov	d0, r0, r1
   b82dc:	f1b9 0f00 	cmp.w	r9, #0
   b82e0:	dab6      	bge.n	b8250 <__ieee754_pow+0x98>
   b82e2:	9b00      	ldr	r3, [sp, #0]
   b82e4:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b82e8:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b82ec:	ea58 0303 	orrs.w	r3, r8, r3
   b82f0:	f040 848d 	bne.w	b8c0e <__ieee754_pow+0xa56>
   b82f4:	ec53 2b10 	vmov	r2, r3, d0
   b82f8:	4610      	mov	r0, r2
   b82fa:	4619      	mov	r1, r3
   b82fc:	f000 ff12 	bl	b9124 <__aeabi_dsub>
   b8300:	4602      	mov	r2, r0
   b8302:	460b      	mov	r3, r1
   b8304:	f001 f9f0 	bl	b96e8 <__aeabi_ddiv>
   b8308:	ec41 0b10 	vmov	d0, r0, r1
   b830c:	e7a0      	b.n	b8250 <__ieee754_pow+0x98>
   b830e:	9a00      	ldr	r2, [sp, #0]
   b8310:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b8314:	3b01      	subs	r3, #1
   b8316:	9304      	str	r3, [sp, #16]
   b8318:	4313      	orrs	r3, r2
   b831a:	d035      	beq.n	b8388 <__ieee754_pow+0x1d0>
   b831c:	4b25      	ldr	r3, [pc, #148]	; (b83b4 <__ieee754_pow+0x1fc>)
   b831e:	459a      	cmp	sl, r3
   b8320:	dd4c      	ble.n	b83bc <__ieee754_pow+0x204>
   b8322:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b8326:	459a      	cmp	sl, r3
   b8328:	4b23      	ldr	r3, [pc, #140]	; (b83b8 <__ieee754_pow+0x200>)
   b832a:	f340 83db 	ble.w	b8ae4 <__ieee754_pow+0x92c>
   b832e:	4598      	cmp	r8, r3
   b8330:	f340 8360 	ble.w	b89f4 <__ieee754_pow+0x83c>
   b8334:	f1bb 0f00 	cmp.w	fp, #0
   b8338:	f340 8360 	ble.w	b89fc <__ieee754_pow+0x844>
   b833c:	a316      	add	r3, pc, #88	; (adr r3, b8398 <__ieee754_pow+0x1e0>)
   b833e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8342:	4610      	mov	r0, r2
   b8344:	4619      	mov	r1, r3
   b8346:	f001 f8a5 	bl	b9494 <__aeabi_dmul>
   b834a:	ec41 0b10 	vmov	d0, r0, r1
   b834e:	e77f      	b.n	b8250 <__ieee754_pow+0x98>
   b8350:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b8354:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b8358:	4313      	orrs	r3, r2
   b835a:	f43f af77 	beq.w	b824c <__ieee754_pow+0x94>
   b835e:	4b16      	ldr	r3, [pc, #88]	; (b83b8 <__ieee754_pow+0x200>)
   b8360:	4598      	cmp	r8, r3
   b8362:	f340 837a 	ble.w	b8a5a <__ieee754_pow+0x8a2>
   b8366:	f1bb 0f00 	cmp.w	fp, #0
   b836a:	f2c0 8347 	blt.w	b89fc <__ieee754_pow+0x844>
   b836e:	ec47 6b10 	vmov	d0, r6, r7
   b8372:	e76d      	b.n	b8250 <__ieee754_pow+0x98>
   b8374:	f1bb 0f00 	cmp.w	fp, #0
   b8378:	f2c0 841a 	blt.w	b8bb0 <__ieee754_pow+0x9f8>
   b837c:	ec45 4b10 	vmov	d0, r4, r5
   b8380:	e766      	b.n	b8250 <__ieee754_pow+0x98>
   b8382:	2102      	movs	r1, #2
   b8384:	9100      	str	r1, [sp, #0]
   b8386:	e73b      	b.n	b8200 <__ieee754_pow+0x48>
   b8388:	4622      	mov	r2, r4
   b838a:	462b      	mov	r3, r5
   b838c:	e7b4      	b.n	b82f8 <__ieee754_pow+0x140>
   b838e:	bf00      	nop
   b8390:	00000000 	.word	0x00000000
   b8394:	3ff00000 	.word	0x3ff00000
   b8398:	8800759c 	.word	0x8800759c
   b839c:	7e37e43c 	.word	0x7e37e43c
   b83a0:	7ff00000 	.word	0x7ff00000
   b83a4:	3ff00000 	.word	0x3ff00000
   b83a8:	3fe00000 	.word	0x3fe00000
   b83ac:	000bcec0 	.word	0x000bcec0
   b83b0:	433fffff 	.word	0x433fffff
   b83b4:	41e00000 	.word	0x41e00000
   b83b8:	3fefffff 	.word	0x3fefffff
   b83bc:	4be4      	ldr	r3, [pc, #912]	; (b8750 <__ieee754_pow+0x598>)
   b83be:	ea09 0303 	and.w	r3, r9, r3
   b83c2:	2200      	movs	r2, #0
   b83c4:	b953      	cbnz	r3, b83dc <__ieee754_pow+0x224>
   b83c6:	ec51 0b10 	vmov	r0, r1, d0
   b83ca:	4be2      	ldr	r3, [pc, #904]	; (b8754 <__ieee754_pow+0x59c>)
   b83cc:	f001 f862 	bl	b9494 <__aeabi_dmul>
   b83d0:	ec41 0b10 	vmov	d0, r0, r1
   b83d4:	ee10 8a90 	vmov	r8, s1
   b83d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b83dc:	ea4f 5328 	mov.w	r3, r8, asr #20
   b83e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b83e4:	189a      	adds	r2, r3, r2
   b83e6:	4bdc      	ldr	r3, [pc, #880]	; (b8758 <__ieee754_pow+0x5a0>)
   b83e8:	9205      	str	r2, [sp, #20]
   b83ea:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b83ee:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b83f2:	4598      	cmp	r8, r3
   b83f4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b83f8:	dd07      	ble.n	b840a <__ieee754_pow+0x252>
   b83fa:	4bd8      	ldr	r3, [pc, #864]	; (b875c <__ieee754_pow+0x5a4>)
   b83fc:	4598      	cmp	r8, r3
   b83fe:	f340 8414 	ble.w	b8c2a <__ieee754_pow+0xa72>
   b8402:	3201      	adds	r2, #1
   b8404:	9205      	str	r2, [sp, #20]
   b8406:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b840a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b86f0 <__ieee754_pow+0x538>
   b840e:	ed9f 7bba 	vldr	d7, [pc, #744]	; b86f8 <__ieee754_pow+0x540>
   b8412:	ec53 2b16 	vmov	r2, r3, d6
   b8416:	eeb0 ca47 	vmov.f32	s24, s14
   b841a:	eef0 ca67 	vmov.f32	s25, s15
   b841e:	2500      	movs	r5, #0
   b8420:	eeb0 da47 	vmov.f32	s26, s14
   b8424:	eef0 da67 	vmov.f32	s27, s15
   b8428:	ec5b ab10 	vmov	sl, fp, d0
   b842c:	46a3      	mov	fp, r4
   b842e:	4650      	mov	r0, sl
   b8430:	4659      	mov	r1, fp
   b8432:	ec43 2b1a 	vmov	d10, r2, r3
   b8436:	f000 fe75 	bl	b9124 <__aeabi_dsub>
   b843a:	ec53 2b1a 	vmov	r2, r3, d10
   b843e:	4680      	mov	r8, r0
   b8440:	4689      	mov	r9, r1
   b8442:	4650      	mov	r0, sl
   b8444:	4659      	mov	r1, fp
   b8446:	f000 fe6f 	bl	b9128 <__adddf3>
   b844a:	4602      	mov	r2, r0
   b844c:	460b      	mov	r3, r1
   b844e:	2000      	movs	r0, #0
   b8450:	49c3      	ldr	r1, [pc, #780]	; (b8760 <__ieee754_pow+0x5a8>)
   b8452:	f001 f949 	bl	b96e8 <__aeabi_ddiv>
   b8456:	ec41 0b1b 	vmov	d11, r0, r1
   b845a:	4640      	mov	r0, r8
   b845c:	ec53 2b1b 	vmov	r2, r3, d11
   b8460:	4649      	mov	r1, r9
   b8462:	f001 f817 	bl	b9494 <__aeabi_dmul>
   b8466:	ec41 0b18 	vmov	d8, r0, r1
   b846a:	460a      	mov	r2, r1
   b846c:	4601      	mov	r1, r0
   b846e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b8472:	2100      	movs	r1, #0
   b8474:	9102      	str	r1, [sp, #8]
   b8476:	1064      	asrs	r4, r4, #1
   b8478:	ec4b ab19 	vmov	d9, sl, fp
   b847c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b8480:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b8484:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b8488:	2000      	movs	r0, #0
   b848a:	1959      	adds	r1, r3, r5
   b848c:	4604      	mov	r4, r0
   b848e:	460d      	mov	r5, r1
   b8490:	4602      	mov	r2, r0
   b8492:	460b      	mov	r3, r1
   b8494:	4650      	mov	r0, sl
   b8496:	4659      	mov	r1, fp
   b8498:	f000 fffc 	bl	b9494 <__aeabi_dmul>
   b849c:	4602      	mov	r2, r0
   b849e:	460b      	mov	r3, r1
   b84a0:	4640      	mov	r0, r8
   b84a2:	4649      	mov	r1, r9
   b84a4:	f000 fe3e 	bl	b9124 <__aeabi_dsub>
   b84a8:	ec53 2b1a 	vmov	r2, r3, d10
   b84ac:	4680      	mov	r8, r0
   b84ae:	4689      	mov	r9, r1
   b84b0:	4620      	mov	r0, r4
   b84b2:	4629      	mov	r1, r5
   b84b4:	f000 fe36 	bl	b9124 <__aeabi_dsub>
   b84b8:	4602      	mov	r2, r0
   b84ba:	460b      	mov	r3, r1
   b84bc:	ec51 0b19 	vmov	r0, r1, d9
   b84c0:	f000 fe30 	bl	b9124 <__aeabi_dsub>
   b84c4:	4652      	mov	r2, sl
   b84c6:	465b      	mov	r3, fp
   b84c8:	f000 ffe4 	bl	b9494 <__aeabi_dmul>
   b84cc:	4602      	mov	r2, r0
   b84ce:	460b      	mov	r3, r1
   b84d0:	4640      	mov	r0, r8
   b84d2:	4649      	mov	r1, r9
   b84d4:	f000 fe26 	bl	b9124 <__aeabi_dsub>
   b84d8:	ec53 2b1b 	vmov	r2, r3, d11
   b84dc:	f000 ffda 	bl	b9494 <__aeabi_dmul>
   b84e0:	ec53 2b18 	vmov	r2, r3, d8
   b84e4:	ec41 0b19 	vmov	d9, r0, r1
   b84e8:	ec51 0b18 	vmov	r0, r1, d8
   b84ec:	f000 ffd2 	bl	b9494 <__aeabi_dmul>
   b84f0:	a383      	add	r3, pc, #524	; (adr r3, b8700 <__ieee754_pow+0x548>)
   b84f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b84f6:	4604      	mov	r4, r0
   b84f8:	460d      	mov	r5, r1
   b84fa:	f000 ffcb 	bl	b9494 <__aeabi_dmul>
   b84fe:	a382      	add	r3, pc, #520	; (adr r3, b8708 <__ieee754_pow+0x550>)
   b8500:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8504:	f000 fe10 	bl	b9128 <__adddf3>
   b8508:	4622      	mov	r2, r4
   b850a:	462b      	mov	r3, r5
   b850c:	f000 ffc2 	bl	b9494 <__aeabi_dmul>
   b8510:	a37f      	add	r3, pc, #508	; (adr r3, b8710 <__ieee754_pow+0x558>)
   b8512:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8516:	f000 fe07 	bl	b9128 <__adddf3>
   b851a:	4622      	mov	r2, r4
   b851c:	462b      	mov	r3, r5
   b851e:	f000 ffb9 	bl	b9494 <__aeabi_dmul>
   b8522:	a37d      	add	r3, pc, #500	; (adr r3, b8718 <__ieee754_pow+0x560>)
   b8524:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8528:	f000 fdfe 	bl	b9128 <__adddf3>
   b852c:	4622      	mov	r2, r4
   b852e:	462b      	mov	r3, r5
   b8530:	f000 ffb0 	bl	b9494 <__aeabi_dmul>
   b8534:	a37a      	add	r3, pc, #488	; (adr r3, b8720 <__ieee754_pow+0x568>)
   b8536:	e9d3 2300 	ldrd	r2, r3, [r3]
   b853a:	f000 fdf5 	bl	b9128 <__adddf3>
   b853e:	4622      	mov	r2, r4
   b8540:	462b      	mov	r3, r5
   b8542:	f000 ffa7 	bl	b9494 <__aeabi_dmul>
   b8546:	a378      	add	r3, pc, #480	; (adr r3, b8728 <__ieee754_pow+0x570>)
   b8548:	e9d3 2300 	ldrd	r2, r3, [r3]
   b854c:	f000 fdec 	bl	b9128 <__adddf3>
   b8550:	4622      	mov	r2, r4
   b8552:	4680      	mov	r8, r0
   b8554:	4689      	mov	r9, r1
   b8556:	462b      	mov	r3, r5
   b8558:	4620      	mov	r0, r4
   b855a:	4629      	mov	r1, r5
   b855c:	f000 ff9a 	bl	b9494 <__aeabi_dmul>
   b8560:	4602      	mov	r2, r0
   b8562:	460b      	mov	r3, r1
   b8564:	4640      	mov	r0, r8
   b8566:	4649      	mov	r1, r9
   b8568:	f000 ff94 	bl	b9494 <__aeabi_dmul>
   b856c:	4652      	mov	r2, sl
   b856e:	4604      	mov	r4, r0
   b8570:	460d      	mov	r5, r1
   b8572:	465b      	mov	r3, fp
   b8574:	ec51 0b18 	vmov	r0, r1, d8
   b8578:	f000 fdd6 	bl	b9128 <__adddf3>
   b857c:	ec53 2b19 	vmov	r2, r3, d9
   b8580:	f000 ff88 	bl	b9494 <__aeabi_dmul>
   b8584:	4622      	mov	r2, r4
   b8586:	462b      	mov	r3, r5
   b8588:	f000 fdce 	bl	b9128 <__adddf3>
   b858c:	4652      	mov	r2, sl
   b858e:	4680      	mov	r8, r0
   b8590:	4689      	mov	r9, r1
   b8592:	465b      	mov	r3, fp
   b8594:	4650      	mov	r0, sl
   b8596:	4659      	mov	r1, fp
   b8598:	f000 ff7c 	bl	b9494 <__aeabi_dmul>
   b859c:	4602      	mov	r2, r0
   b859e:	460b      	mov	r3, r1
   b85a0:	ec43 2b1a 	vmov	d10, r2, r3
   b85a4:	4b6f      	ldr	r3, [pc, #444]	; (b8764 <__ieee754_pow+0x5ac>)
   b85a6:	2200      	movs	r2, #0
   b85a8:	f000 fdbe 	bl	b9128 <__adddf3>
   b85ac:	4642      	mov	r2, r8
   b85ae:	464b      	mov	r3, r9
   b85b0:	f000 fdba 	bl	b9128 <__adddf3>
   b85b4:	2400      	movs	r4, #0
   b85b6:	460d      	mov	r5, r1
   b85b8:	4622      	mov	r2, r4
   b85ba:	462b      	mov	r3, r5
   b85bc:	4650      	mov	r0, sl
   b85be:	4659      	mov	r1, fp
   b85c0:	f000 ff68 	bl	b9494 <__aeabi_dmul>
   b85c4:	4b67      	ldr	r3, [pc, #412]	; (b8764 <__ieee754_pow+0x5ac>)
   b85c6:	4682      	mov	sl, r0
   b85c8:	468b      	mov	fp, r1
   b85ca:	2200      	movs	r2, #0
   b85cc:	4620      	mov	r0, r4
   b85ce:	4629      	mov	r1, r5
   b85d0:	f000 fda8 	bl	b9124 <__aeabi_dsub>
   b85d4:	ec53 2b1a 	vmov	r2, r3, d10
   b85d8:	f000 fda4 	bl	b9124 <__aeabi_dsub>
   b85dc:	4602      	mov	r2, r0
   b85de:	460b      	mov	r3, r1
   b85e0:	4640      	mov	r0, r8
   b85e2:	4649      	mov	r1, r9
   b85e4:	f000 fd9e 	bl	b9124 <__aeabi_dsub>
   b85e8:	ec53 2b18 	vmov	r2, r3, d8
   b85ec:	f000 ff52 	bl	b9494 <__aeabi_dmul>
   b85f0:	4622      	mov	r2, r4
   b85f2:	462b      	mov	r3, r5
   b85f4:	4604      	mov	r4, r0
   b85f6:	460d      	mov	r5, r1
   b85f8:	ec51 0b19 	vmov	r0, r1, d9
   b85fc:	f000 ff4a 	bl	b9494 <__aeabi_dmul>
   b8600:	4602      	mov	r2, r0
   b8602:	460b      	mov	r3, r1
   b8604:	4620      	mov	r0, r4
   b8606:	4629      	mov	r1, r5
   b8608:	f000 fd8e 	bl	b9128 <__adddf3>
   b860c:	4680      	mov	r8, r0
   b860e:	4689      	mov	r9, r1
   b8610:	4642      	mov	r2, r8
   b8612:	464b      	mov	r3, r9
   b8614:	4650      	mov	r0, sl
   b8616:	4659      	mov	r1, fp
   b8618:	f000 fd86 	bl	b9128 <__adddf3>
   b861c:	a344      	add	r3, pc, #272	; (adr r3, b8730 <__ieee754_pow+0x578>)
   b861e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8622:	2000      	movs	r0, #0
   b8624:	4604      	mov	r4, r0
   b8626:	460d      	mov	r5, r1
   b8628:	f000 ff34 	bl	b9494 <__aeabi_dmul>
   b862c:	4652      	mov	r2, sl
   b862e:	ec41 0b19 	vmov	d9, r0, r1
   b8632:	465b      	mov	r3, fp
   b8634:	4620      	mov	r0, r4
   b8636:	4629      	mov	r1, r5
   b8638:	f000 fd74 	bl	b9124 <__aeabi_dsub>
   b863c:	4602      	mov	r2, r0
   b863e:	460b      	mov	r3, r1
   b8640:	4640      	mov	r0, r8
   b8642:	4649      	mov	r1, r9
   b8644:	f000 fd6e 	bl	b9124 <__aeabi_dsub>
   b8648:	a33b      	add	r3, pc, #236	; (adr r3, b8738 <__ieee754_pow+0x580>)
   b864a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b864e:	f000 ff21 	bl	b9494 <__aeabi_dmul>
   b8652:	4602      	mov	r2, r0
   b8654:	460b      	mov	r3, r1
   b8656:	4620      	mov	r0, r4
   b8658:	4629      	mov	r1, r5
   b865a:	4614      	mov	r4, r2
   b865c:	461d      	mov	r5, r3
   b865e:	a338      	add	r3, pc, #224	; (adr r3, b8740 <__ieee754_pow+0x588>)
   b8660:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8664:	f000 ff16 	bl	b9494 <__aeabi_dmul>
   b8668:	4602      	mov	r2, r0
   b866a:	460b      	mov	r3, r1
   b866c:	4620      	mov	r0, r4
   b866e:	4629      	mov	r1, r5
   b8670:	f000 fd5a 	bl	b9128 <__adddf3>
   b8674:	ec53 2b1d 	vmov	r2, r3, d13
   b8678:	f000 fd56 	bl	b9128 <__adddf3>
   b867c:	4680      	mov	r8, r0
   b867e:	9805      	ldr	r0, [sp, #20]
   b8680:	4689      	mov	r9, r1
   b8682:	f000 fe9d 	bl	b93c0 <__aeabi_i2d>
   b8686:	4642      	mov	r2, r8
   b8688:	4682      	mov	sl, r0
   b868a:	468b      	mov	fp, r1
   b868c:	464b      	mov	r3, r9
   b868e:	ec51 0b19 	vmov	r0, r1, d9
   b8692:	f000 fd49 	bl	b9128 <__adddf3>
   b8696:	ec53 2b1c 	vmov	r2, r3, d12
   b869a:	f000 fd45 	bl	b9128 <__adddf3>
   b869e:	4652      	mov	r2, sl
   b86a0:	465b      	mov	r3, fp
   b86a2:	f000 fd41 	bl	b9128 <__adddf3>
   b86a6:	4652      	mov	r2, sl
   b86a8:	465b      	mov	r3, fp
   b86aa:	2000      	movs	r0, #0
   b86ac:	4604      	mov	r4, r0
   b86ae:	460d      	mov	r5, r1
   b86b0:	f000 fd38 	bl	b9124 <__aeabi_dsub>
   b86b4:	ec53 2b1c 	vmov	r2, r3, d12
   b86b8:	f000 fd34 	bl	b9124 <__aeabi_dsub>
   b86bc:	ec53 2b19 	vmov	r2, r3, d9
   b86c0:	f000 fd30 	bl	b9124 <__aeabi_dsub>
   b86c4:	4602      	mov	r2, r0
   b86c6:	460b      	mov	r3, r1
   b86c8:	4640      	mov	r0, r8
   b86ca:	4649      	mov	r1, r9
   b86cc:	f000 fd2a 	bl	b9124 <__aeabi_dsub>
   b86d0:	9b00      	ldr	r3, [sp, #0]
   b86d2:	9a04      	ldr	r2, [sp, #16]
   b86d4:	3b01      	subs	r3, #1
   b86d6:	4313      	orrs	r3, r2
   b86d8:	4682      	mov	sl, r0
   b86da:	468b      	mov	fp, r1
   b86dc:	f040 81b6 	bne.w	b8a4c <__ieee754_pow+0x894>
   b86e0:	ed9f 7b19 	vldr	d7, [pc, #100]	; b8748 <__ieee754_pow+0x590>
   b86e4:	eeb0 8a47 	vmov.f32	s16, s14
   b86e8:	eef0 8a67 	vmov.f32	s17, s15
   b86ec:	e03c      	b.n	b8768 <__ieee754_pow+0x5b0>
   b86ee:	bf00      	nop
   b86f0:	00000000 	.word	0x00000000
   b86f4:	3ff00000 	.word	0x3ff00000
	...
   b8700:	4a454eef 	.word	0x4a454eef
   b8704:	3fca7e28 	.word	0x3fca7e28
   b8708:	93c9db65 	.word	0x93c9db65
   b870c:	3fcd864a 	.word	0x3fcd864a
   b8710:	a91d4101 	.word	0xa91d4101
   b8714:	3fd17460 	.word	0x3fd17460
   b8718:	518f264d 	.word	0x518f264d
   b871c:	3fd55555 	.word	0x3fd55555
   b8720:	db6fabff 	.word	0xdb6fabff
   b8724:	3fdb6db6 	.word	0x3fdb6db6
   b8728:	33333303 	.word	0x33333303
   b872c:	3fe33333 	.word	0x3fe33333
   b8730:	e0000000 	.word	0xe0000000
   b8734:	3feec709 	.word	0x3feec709
   b8738:	dc3a03fd 	.word	0xdc3a03fd
   b873c:	3feec709 	.word	0x3feec709
   b8740:	145b01f5 	.word	0x145b01f5
   b8744:	be3e2fe0 	.word	0xbe3e2fe0
   b8748:	00000000 	.word	0x00000000
   b874c:	bff00000 	.word	0xbff00000
   b8750:	7ff00000 	.word	0x7ff00000
   b8754:	43400000 	.word	0x43400000
   b8758:	0003988e 	.word	0x0003988e
   b875c:	000bb679 	.word	0x000bb679
   b8760:	3ff00000 	.word	0x3ff00000
   b8764:	40080000 	.word	0x40080000
   b8768:	2300      	movs	r3, #0
   b876a:	e9cd 6700 	strd	r6, r7, [sp]
   b876e:	9300      	str	r3, [sp, #0]
   b8770:	e9dd 8900 	ldrd	r8, r9, [sp]
   b8774:	4630      	mov	r0, r6
   b8776:	4642      	mov	r2, r8
   b8778:	464b      	mov	r3, r9
   b877a:	4639      	mov	r1, r7
   b877c:	f000 fcd2 	bl	b9124 <__aeabi_dsub>
   b8780:	4622      	mov	r2, r4
   b8782:	462b      	mov	r3, r5
   b8784:	f000 fe86 	bl	b9494 <__aeabi_dmul>
   b8788:	4632      	mov	r2, r6
   b878a:	463b      	mov	r3, r7
   b878c:	4606      	mov	r6, r0
   b878e:	460f      	mov	r7, r1
   b8790:	4650      	mov	r0, sl
   b8792:	4659      	mov	r1, fp
   b8794:	f000 fe7e 	bl	b9494 <__aeabi_dmul>
   b8798:	4602      	mov	r2, r0
   b879a:	460b      	mov	r3, r1
   b879c:	4630      	mov	r0, r6
   b879e:	4639      	mov	r1, r7
   b87a0:	f000 fcc2 	bl	b9128 <__adddf3>
   b87a4:	4642      	mov	r2, r8
   b87a6:	464b      	mov	r3, r9
   b87a8:	4606      	mov	r6, r0
   b87aa:	460f      	mov	r7, r1
   b87ac:	4620      	mov	r0, r4
   b87ae:	4629      	mov	r1, r5
   b87b0:	f000 fe70 	bl	b9494 <__aeabi_dmul>
   b87b4:	4604      	mov	r4, r0
   b87b6:	460d      	mov	r5, r1
   b87b8:	462b      	mov	r3, r5
   b87ba:	4630      	mov	r0, r6
   b87bc:	4639      	mov	r1, r7
   b87be:	4622      	mov	r2, r4
   b87c0:	f000 fcb2 	bl	b9128 <__adddf3>
   b87c4:	4bc2      	ldr	r3, [pc, #776]	; (b8ad0 <__ieee754_pow+0x918>)
   b87c6:	4299      	cmp	r1, r3
   b87c8:	4680      	mov	r8, r0
   b87ca:	4689      	mov	r9, r1
   b87cc:	468a      	mov	sl, r1
   b87ce:	f340 8118 	ble.w	b8a02 <__ieee754_pow+0x84a>
   b87d2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b87d6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b87da:	4303      	orrs	r3, r0
   b87dc:	f040 8207 	bne.w	b8bee <__ieee754_pow+0xa36>
   b87e0:	a3a3      	add	r3, pc, #652	; (adr r3, b8a70 <__ieee754_pow+0x8b8>)
   b87e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b87e6:	4630      	mov	r0, r6
   b87e8:	4639      	mov	r1, r7
   b87ea:	f000 fc9d 	bl	b9128 <__adddf3>
   b87ee:	4602      	mov	r2, r0
   b87f0:	460b      	mov	r3, r1
   b87f2:	4640      	mov	r0, r8
   b87f4:	4649      	mov	r1, r9
   b87f6:	4690      	mov	r8, r2
   b87f8:	4699      	mov	r9, r3
   b87fa:	4622      	mov	r2, r4
   b87fc:	462b      	mov	r3, r5
   b87fe:	f000 fc91 	bl	b9124 <__aeabi_dsub>
   b8802:	4602      	mov	r2, r0
   b8804:	460b      	mov	r3, r1
   b8806:	4640      	mov	r0, r8
   b8808:	4649      	mov	r1, r9
   b880a:	f001 f8d3 	bl	b99b4 <__aeabi_dcmpgt>
   b880e:	2800      	cmp	r0, #0
   b8810:	f040 81ed 	bne.w	b8bee <__ieee754_pow+0xa36>
   b8814:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b8818:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b881c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b8820:	fa42 f303 	asr.w	r3, r2, r3
   b8824:	4453      	add	r3, sl
   b8826:	49ab      	ldr	r1, [pc, #684]	; (b8ad4 <__ieee754_pow+0x91c>)
   b8828:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b882c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b8830:	fa41 fc02 	asr.w	ip, r1, r2
   b8834:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b8838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b883c:	f1c2 0214 	rsb	r2, r2, #20
   b8840:	fa41 f202 	asr.w	r2, r1, r2
   b8844:	2000      	movs	r0, #0
   b8846:	ea23 010c 	bic.w	r1, r3, ip
   b884a:	f1ba 0f00 	cmp.w	sl, #0
   b884e:	9200      	str	r2, [sp, #0]
   b8850:	460b      	mov	r3, r1
   b8852:	4602      	mov	r2, r0
   b8854:	da02      	bge.n	b885c <__ieee754_pow+0x6a4>
   b8856:	9900      	ldr	r1, [sp, #0]
   b8858:	4249      	negs	r1, r1
   b885a:	9100      	str	r1, [sp, #0]
   b885c:	4620      	mov	r0, r4
   b885e:	4629      	mov	r1, r5
   b8860:	f000 fc60 	bl	b9124 <__aeabi_dsub>
   b8864:	9b00      	ldr	r3, [sp, #0]
   b8866:	051b      	lsls	r3, r3, #20
   b8868:	9302      	str	r3, [sp, #8]
   b886a:	4602      	mov	r2, r0
   b886c:	460b      	mov	r3, r1
   b886e:	4604      	mov	r4, r0
   b8870:	460d      	mov	r5, r1
   b8872:	4630      	mov	r0, r6
   b8874:	4639      	mov	r1, r7
   b8876:	f000 fc57 	bl	b9128 <__adddf3>
   b887a:	4689      	mov	r9, r1
   b887c:	f04f 0800 	mov.w	r8, #0
   b8880:	a37d      	add	r3, pc, #500	; (adr r3, b8a78 <__ieee754_pow+0x8c0>)
   b8882:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8886:	4640      	mov	r0, r8
   b8888:	4649      	mov	r1, r9
   b888a:	f000 fe03 	bl	b9494 <__aeabi_dmul>
   b888e:	4622      	mov	r2, r4
   b8890:	462b      	mov	r3, r5
   b8892:	4682      	mov	sl, r0
   b8894:	468b      	mov	fp, r1
   b8896:	4640      	mov	r0, r8
   b8898:	4649      	mov	r1, r9
   b889a:	f000 fc43 	bl	b9124 <__aeabi_dsub>
   b889e:	4602      	mov	r2, r0
   b88a0:	460b      	mov	r3, r1
   b88a2:	4630      	mov	r0, r6
   b88a4:	4639      	mov	r1, r7
   b88a6:	f000 fc3d 	bl	b9124 <__aeabi_dsub>
   b88aa:	a375      	add	r3, pc, #468	; (adr r3, b8a80 <__ieee754_pow+0x8c8>)
   b88ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   b88b0:	f000 fdf0 	bl	b9494 <__aeabi_dmul>
   b88b4:	a374      	add	r3, pc, #464	; (adr r3, b8a88 <__ieee754_pow+0x8d0>)
   b88b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b88ba:	4604      	mov	r4, r0
   b88bc:	460d      	mov	r5, r1
   b88be:	4640      	mov	r0, r8
   b88c0:	4649      	mov	r1, r9
   b88c2:	f000 fde7 	bl	b9494 <__aeabi_dmul>
   b88c6:	4602      	mov	r2, r0
   b88c8:	460b      	mov	r3, r1
   b88ca:	4620      	mov	r0, r4
   b88cc:	4629      	mov	r1, r5
   b88ce:	f000 fc2b 	bl	b9128 <__adddf3>
   b88d2:	4606      	mov	r6, r0
   b88d4:	460f      	mov	r7, r1
   b88d6:	4632      	mov	r2, r6
   b88d8:	463b      	mov	r3, r7
   b88da:	4650      	mov	r0, sl
   b88dc:	4659      	mov	r1, fp
   b88de:	f000 fc23 	bl	b9128 <__adddf3>
   b88e2:	4652      	mov	r2, sl
   b88e4:	465b      	mov	r3, fp
   b88e6:	4604      	mov	r4, r0
   b88e8:	460d      	mov	r5, r1
   b88ea:	f000 fc1b 	bl	b9124 <__aeabi_dsub>
   b88ee:	4602      	mov	r2, r0
   b88f0:	460b      	mov	r3, r1
   b88f2:	4630      	mov	r0, r6
   b88f4:	4639      	mov	r1, r7
   b88f6:	f000 fc15 	bl	b9124 <__aeabi_dsub>
   b88fa:	4622      	mov	r2, r4
   b88fc:	4680      	mov	r8, r0
   b88fe:	4689      	mov	r9, r1
   b8900:	462b      	mov	r3, r5
   b8902:	4620      	mov	r0, r4
   b8904:	4629      	mov	r1, r5
   b8906:	f000 fdc5 	bl	b9494 <__aeabi_dmul>
   b890a:	a361      	add	r3, pc, #388	; (adr r3, b8a90 <__ieee754_pow+0x8d8>)
   b890c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8910:	4606      	mov	r6, r0
   b8912:	460f      	mov	r7, r1
   b8914:	f000 fdbe 	bl	b9494 <__aeabi_dmul>
   b8918:	a35f      	add	r3, pc, #380	; (adr r3, b8a98 <__ieee754_pow+0x8e0>)
   b891a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b891e:	f000 fc01 	bl	b9124 <__aeabi_dsub>
   b8922:	4632      	mov	r2, r6
   b8924:	463b      	mov	r3, r7
   b8926:	f000 fdb5 	bl	b9494 <__aeabi_dmul>
   b892a:	a35d      	add	r3, pc, #372	; (adr r3, b8aa0 <__ieee754_pow+0x8e8>)
   b892c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8930:	f000 fbfa 	bl	b9128 <__adddf3>
   b8934:	4632      	mov	r2, r6
   b8936:	463b      	mov	r3, r7
   b8938:	f000 fdac 	bl	b9494 <__aeabi_dmul>
   b893c:	a35a      	add	r3, pc, #360	; (adr r3, b8aa8 <__ieee754_pow+0x8f0>)
   b893e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8942:	f000 fbef 	bl	b9124 <__aeabi_dsub>
   b8946:	4632      	mov	r2, r6
   b8948:	463b      	mov	r3, r7
   b894a:	f000 fda3 	bl	b9494 <__aeabi_dmul>
   b894e:	a358      	add	r3, pc, #352	; (adr r3, b8ab0 <__ieee754_pow+0x8f8>)
   b8950:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8954:	f000 fbe8 	bl	b9128 <__adddf3>
   b8958:	4632      	mov	r2, r6
   b895a:	463b      	mov	r3, r7
   b895c:	f000 fd9a 	bl	b9494 <__aeabi_dmul>
   b8960:	4602      	mov	r2, r0
   b8962:	460b      	mov	r3, r1
   b8964:	4620      	mov	r0, r4
   b8966:	4629      	mov	r1, r5
   b8968:	f000 fbdc 	bl	b9124 <__aeabi_dsub>
   b896c:	4606      	mov	r6, r0
   b896e:	460f      	mov	r7, r1
   b8970:	4632      	mov	r2, r6
   b8972:	463b      	mov	r3, r7
   b8974:	4620      	mov	r0, r4
   b8976:	4629      	mov	r1, r5
   b8978:	f000 fd8c 	bl	b9494 <__aeabi_dmul>
   b897c:	4602      	mov	r2, r0
   b897e:	460b      	mov	r3, r1
   b8980:	4630      	mov	r0, r6
   b8982:	4639      	mov	r1, r7
   b8984:	4616      	mov	r6, r2
   b8986:	461f      	mov	r7, r3
   b8988:	2200      	movs	r2, #0
   b898a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b898e:	f000 fbc9 	bl	b9124 <__aeabi_dsub>
   b8992:	4602      	mov	r2, r0
   b8994:	460b      	mov	r3, r1
   b8996:	4630      	mov	r0, r6
   b8998:	4639      	mov	r1, r7
   b899a:	f000 fea5 	bl	b96e8 <__aeabi_ddiv>
   b899e:	4642      	mov	r2, r8
   b89a0:	4606      	mov	r6, r0
   b89a2:	460f      	mov	r7, r1
   b89a4:	464b      	mov	r3, r9
   b89a6:	4620      	mov	r0, r4
   b89a8:	4629      	mov	r1, r5
   b89aa:	f000 fd73 	bl	b9494 <__aeabi_dmul>
   b89ae:	4642      	mov	r2, r8
   b89b0:	464b      	mov	r3, r9
   b89b2:	f000 fbb9 	bl	b9128 <__adddf3>
   b89b6:	4602      	mov	r2, r0
   b89b8:	460b      	mov	r3, r1
   b89ba:	4630      	mov	r0, r6
   b89bc:	4639      	mov	r1, r7
   b89be:	f000 fbb1 	bl	b9124 <__aeabi_dsub>
   b89c2:	4622      	mov	r2, r4
   b89c4:	462b      	mov	r3, r5
   b89c6:	f000 fbad 	bl	b9124 <__aeabi_dsub>
   b89ca:	4602      	mov	r2, r0
   b89cc:	460b      	mov	r3, r1
   b89ce:	2000      	movs	r0, #0
   b89d0:	4941      	ldr	r1, [pc, #260]	; (b8ad8 <__ieee754_pow+0x920>)
   b89d2:	f000 fba7 	bl	b9124 <__aeabi_dsub>
   b89d6:	9a02      	ldr	r2, [sp, #8]
   b89d8:	460b      	mov	r3, r1
   b89da:	4413      	add	r3, r2
   b89dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b89e0:	f2c0 8143 	blt.w	b8c6a <__ieee754_pow+0xab2>
   b89e4:	4619      	mov	r1, r3
   b89e6:	ec53 2b18 	vmov	r2, r3, d8
   b89ea:	f000 fd53 	bl	b9494 <__aeabi_dmul>
   b89ee:	ec41 0b10 	vmov	d0, r0, r1
   b89f2:	e42d      	b.n	b8250 <__ieee754_pow+0x98>
   b89f4:	f1bb 0f00 	cmp.w	fp, #0
   b89f8:	f6ff aca0 	blt.w	b833c <__ieee754_pow+0x184>
   b89fc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b8ab8 <__ieee754_pow+0x900>
   b8a00:	e426      	b.n	b8250 <__ieee754_pow+0x98>
   b8a02:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b8ae0 <__ieee754_pow+0x928>
   b8a06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b8a0a:	4563      	cmp	r3, ip
   b8a0c:	f340 80e7 	ble.w	b8bde <__ieee754_pow+0xa26>
   b8a10:	4b32      	ldr	r3, [pc, #200]	; (b8adc <__ieee754_pow+0x924>)
   b8a12:	440b      	add	r3, r1
   b8a14:	4303      	orrs	r3, r0
   b8a16:	d10a      	bne.n	b8a2e <__ieee754_pow+0x876>
   b8a18:	4622      	mov	r2, r4
   b8a1a:	462b      	mov	r3, r5
   b8a1c:	f000 fb82 	bl	b9124 <__aeabi_dsub>
   b8a20:	4632      	mov	r2, r6
   b8a22:	463b      	mov	r3, r7
   b8a24:	f000 ffbc 	bl	b99a0 <__aeabi_dcmpge>
   b8a28:	2800      	cmp	r0, #0
   b8a2a:	f43f aef3 	beq.w	b8814 <__ieee754_pow+0x65c>
   b8a2e:	a324      	add	r3, pc, #144	; (adr r3, b8ac0 <__ieee754_pow+0x908>)
   b8a30:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8a34:	ec51 0b18 	vmov	r0, r1, d8
   b8a38:	f000 fd2c 	bl	b9494 <__aeabi_dmul>
   b8a3c:	a320      	add	r3, pc, #128	; (adr r3, b8ac0 <__ieee754_pow+0x908>)
   b8a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8a42:	f000 fd27 	bl	b9494 <__aeabi_dmul>
   b8a46:	ec41 0b10 	vmov	d0, r0, r1
   b8a4a:	e401      	b.n	b8250 <__ieee754_pow+0x98>
   b8a4c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b8ac8 <__ieee754_pow+0x910>
   b8a50:	eeb0 8a47 	vmov.f32	s16, s14
   b8a54:	eef0 8a67 	vmov.f32	s17, s15
   b8a58:	e686      	b.n	b8768 <__ieee754_pow+0x5b0>
   b8a5a:	f1bb 0f00 	cmp.w	fp, #0
   b8a5e:	dacd      	bge.n	b89fc <__ieee754_pow+0x844>
   b8a60:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b8a64:	ee00 6a10 	vmov	s0, r6
   b8a68:	ee00 3a90 	vmov	s1, r3
   b8a6c:	f7ff bbf0 	b.w	b8250 <__ieee754_pow+0x98>
   b8a70:	652b82fe 	.word	0x652b82fe
   b8a74:	3c971547 	.word	0x3c971547
   b8a78:	00000000 	.word	0x00000000
   b8a7c:	3fe62e43 	.word	0x3fe62e43
   b8a80:	fefa39ef 	.word	0xfefa39ef
   b8a84:	3fe62e42 	.word	0x3fe62e42
   b8a88:	0ca86c39 	.word	0x0ca86c39
   b8a8c:	be205c61 	.word	0xbe205c61
   b8a90:	72bea4d0 	.word	0x72bea4d0
   b8a94:	3e663769 	.word	0x3e663769
   b8a98:	c5d26bf1 	.word	0xc5d26bf1
   b8a9c:	3ebbbd41 	.word	0x3ebbbd41
   b8aa0:	af25de2c 	.word	0xaf25de2c
   b8aa4:	3f11566a 	.word	0x3f11566a
   b8aa8:	16bebd93 	.word	0x16bebd93
   b8aac:	3f66c16c 	.word	0x3f66c16c
   b8ab0:	5555553e 	.word	0x5555553e
   b8ab4:	3fc55555 	.word	0x3fc55555
	...
   b8ac0:	c2f8f359 	.word	0xc2f8f359
   b8ac4:	01a56e1f 	.word	0x01a56e1f
   b8ac8:	00000000 	.word	0x00000000
   b8acc:	3ff00000 	.word	0x3ff00000
   b8ad0:	408fffff 	.word	0x408fffff
   b8ad4:	000fffff 	.word	0x000fffff
   b8ad8:	3ff00000 	.word	0x3ff00000
   b8adc:	3f6f3400 	.word	0x3f6f3400
   b8ae0:	4090cbff 	.word	0x4090cbff
   b8ae4:	4598      	cmp	r8, r3
   b8ae6:	db85      	blt.n	b89f4 <__ieee754_pow+0x83c>
   b8ae8:	4b7d      	ldr	r3, [pc, #500]	; (b8ce0 <__ieee754_pow+0xb28>)
   b8aea:	4598      	cmp	r8, r3
   b8aec:	f73f ac22 	bgt.w	b8334 <__ieee754_pow+0x17c>
   b8af0:	ec51 0b10 	vmov	r0, r1, d0
   b8af4:	4b7a      	ldr	r3, [pc, #488]	; (b8ce0 <__ieee754_pow+0xb28>)
   b8af6:	2200      	movs	r2, #0
   b8af8:	f000 fb14 	bl	b9124 <__aeabi_dsub>
   b8afc:	a368      	add	r3, pc, #416	; (adr r3, b8ca0 <__ieee754_pow+0xae8>)
   b8afe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8b02:	4604      	mov	r4, r0
   b8b04:	460d      	mov	r5, r1
   b8b06:	f000 fcc5 	bl	b9494 <__aeabi_dmul>
   b8b0a:	a367      	add	r3, pc, #412	; (adr r3, b8ca8 <__ieee754_pow+0xaf0>)
   b8b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8b10:	4682      	mov	sl, r0
   b8b12:	468b      	mov	fp, r1
   b8b14:	4620      	mov	r0, r4
   b8b16:	4629      	mov	r1, r5
   b8b18:	f000 fcbc 	bl	b9494 <__aeabi_dmul>
   b8b1c:	4b71      	ldr	r3, [pc, #452]	; (b8ce4 <__ieee754_pow+0xb2c>)
   b8b1e:	ec41 0b18 	vmov	d8, r0, r1
   b8b22:	2200      	movs	r2, #0
   b8b24:	4620      	mov	r0, r4
   b8b26:	4629      	mov	r1, r5
   b8b28:	f000 fcb4 	bl	b9494 <__aeabi_dmul>
   b8b2c:	4602      	mov	r2, r0
   b8b2e:	460b      	mov	r3, r1
   b8b30:	a15f      	add	r1, pc, #380	; (adr r1, b8cb0 <__ieee754_pow+0xaf8>)
   b8b32:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8b36:	f000 faf5 	bl	b9124 <__aeabi_dsub>
   b8b3a:	4622      	mov	r2, r4
   b8b3c:	462b      	mov	r3, r5
   b8b3e:	f000 fca9 	bl	b9494 <__aeabi_dmul>
   b8b42:	4602      	mov	r2, r0
   b8b44:	460b      	mov	r3, r1
   b8b46:	2000      	movs	r0, #0
   b8b48:	4967      	ldr	r1, [pc, #412]	; (b8ce8 <__ieee754_pow+0xb30>)
   b8b4a:	f000 faeb 	bl	b9124 <__aeabi_dsub>
   b8b4e:	4622      	mov	r2, r4
   b8b50:	4680      	mov	r8, r0
   b8b52:	4689      	mov	r9, r1
   b8b54:	462b      	mov	r3, r5
   b8b56:	4620      	mov	r0, r4
   b8b58:	4629      	mov	r1, r5
   b8b5a:	f000 fc9b 	bl	b9494 <__aeabi_dmul>
   b8b5e:	4602      	mov	r2, r0
   b8b60:	460b      	mov	r3, r1
   b8b62:	4640      	mov	r0, r8
   b8b64:	4649      	mov	r1, r9
   b8b66:	f000 fc95 	bl	b9494 <__aeabi_dmul>
   b8b6a:	a353      	add	r3, pc, #332	; (adr r3, b8cb8 <__ieee754_pow+0xb00>)
   b8b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8b70:	f000 fc90 	bl	b9494 <__aeabi_dmul>
   b8b74:	4602      	mov	r2, r0
   b8b76:	460b      	mov	r3, r1
   b8b78:	ec51 0b18 	vmov	r0, r1, d8
   b8b7c:	f000 fad2 	bl	b9124 <__aeabi_dsub>
   b8b80:	4680      	mov	r8, r0
   b8b82:	4689      	mov	r9, r1
   b8b84:	4642      	mov	r2, r8
   b8b86:	464b      	mov	r3, r9
   b8b88:	4650      	mov	r0, sl
   b8b8a:	4659      	mov	r1, fp
   b8b8c:	f000 facc 	bl	b9128 <__adddf3>
   b8b90:	2000      	movs	r0, #0
   b8b92:	4652      	mov	r2, sl
   b8b94:	465b      	mov	r3, fp
   b8b96:	4604      	mov	r4, r0
   b8b98:	460d      	mov	r5, r1
   b8b9a:	e591      	b.n	b86c0 <__ieee754_pow+0x508>
   b8b9c:	4622      	mov	r2, r4
   b8b9e:	462b      	mov	r3, r5
   b8ba0:	4620      	mov	r0, r4
   b8ba2:	4629      	mov	r1, r5
   b8ba4:	f000 fc76 	bl	b9494 <__aeabi_dmul>
   b8ba8:	ec41 0b10 	vmov	d0, r0, r1
   b8bac:	f7ff bb50 	b.w	b8250 <__ieee754_pow+0x98>
   b8bb0:	494b      	ldr	r1, [pc, #300]	; (b8ce0 <__ieee754_pow+0xb28>)
   b8bb2:	2000      	movs	r0, #0
   b8bb4:	4622      	mov	r2, r4
   b8bb6:	462b      	mov	r3, r5
   b8bb8:	f000 fd96 	bl	b96e8 <__aeabi_ddiv>
   b8bbc:	ec41 0b10 	vmov	d0, r0, r1
   b8bc0:	f7ff bb46 	b.w	b8250 <__ieee754_pow+0x98>
   b8bc4:	2b00      	cmp	r3, #0
   b8bc6:	d144      	bne.n	b8c52 <__ieee754_pow+0xa9a>
   b8bc8:	f1c1 0114 	rsb	r1, r1, #20
   b8bcc:	fa4a f001 	asr.w	r0, sl, r1
   b8bd0:	fa00 f101 	lsl.w	r1, r0, r1
   b8bd4:	4551      	cmp	r1, sl
   b8bd6:	d05a      	beq.n	b8c8e <__ieee754_pow+0xad6>
   b8bd8:	9300      	str	r3, [sp, #0]
   b8bda:	f7ff bb17 	b.w	b820c <__ieee754_pow+0x54>
   b8bde:	4a42      	ldr	r2, [pc, #264]	; (b8ce8 <__ieee754_pow+0xb30>)
   b8be0:	4293      	cmp	r3, r2
   b8be2:	dc5b      	bgt.n	b8c9c <__ieee754_pow+0xae4>
   b8be4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b8be8:	9102      	str	r1, [sp, #8]
   b8bea:	9100      	str	r1, [sp, #0]
   b8bec:	e646      	b.n	b887c <__ieee754_pow+0x6c4>
   b8bee:	a334      	add	r3, pc, #208	; (adr r3, b8cc0 <__ieee754_pow+0xb08>)
   b8bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8bf4:	ec51 0b18 	vmov	r0, r1, d8
   b8bf8:	f000 fc4c 	bl	b9494 <__aeabi_dmul>
   b8bfc:	a330      	add	r3, pc, #192	; (adr r3, b8cc0 <__ieee754_pow+0xb08>)
   b8bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8c02:	f000 fc47 	bl	b9494 <__aeabi_dmul>
   b8c06:	ec41 0b10 	vmov	d0, r0, r1
   b8c0a:	f7ff bb21 	b.w	b8250 <__ieee754_pow+0x98>
   b8c0e:	9b00      	ldr	r3, [sp, #0]
   b8c10:	2b01      	cmp	r3, #1
   b8c12:	f47f ab1d 	bne.w	b8250 <__ieee754_pow+0x98>
   b8c16:	ee10 1a90 	vmov	r1, s1
   b8c1a:	ee10 2a10 	vmov	r2, s0
   b8c1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8c22:	ec43 2b10 	vmov	d0, r2, r3
   b8c26:	f7ff bb13 	b.w	b8250 <__ieee754_pow+0x98>
   b8c2a:	ed9f 7b27 	vldr	d7, [pc, #156]	; b8cc8 <__ieee754_pow+0xb10>
   b8c2e:	eeb0 ca47 	vmov.f32	s24, s14
   b8c32:	eef0 ca67 	vmov.f32	s25, s15
   b8c36:	ed9f 7b26 	vldr	d7, [pc, #152]	; b8cd0 <__ieee754_pow+0xb18>
   b8c3a:	eeb0 da47 	vmov.f32	s26, s14
   b8c3e:	eef0 da67 	vmov.f32	s27, s15
   b8c42:	ed9f 7b25 	vldr	d7, [pc, #148]	; b8cd8 <__ieee754_pow+0xb20>
   b8c46:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b8c4a:	ec53 2b17 	vmov	r2, r3, d7
   b8c4e:	f7ff bbeb 	b.w	b8428 <__ieee754_pow+0x270>
   b8c52:	ec45 4b10 	vmov	d0, r4, r5
   b8c56:	9200      	str	r2, [sp, #0]
   b8c58:	f000 f914 	bl	b8e84 <fabs>
   b8c5c:	9a00      	ldr	r2, [sp, #0]
   b8c5e:	2a00      	cmp	r2, #0
   b8c60:	f47f ab92 	bne.w	b8388 <__ieee754_pow+0x1d0>
   b8c64:	9200      	str	r2, [sp, #0]
   b8c66:	f7ff bb26 	b.w	b82b6 <__ieee754_pow+0xfe>
   b8c6a:	ec41 0b10 	vmov	d0, r0, r1
   b8c6e:	9800      	ldr	r0, [sp, #0]
   b8c70:	f000 f9c2 	bl	b8ff8 <scalbn>
   b8c74:	ec51 0b10 	vmov	r0, r1, d0
   b8c78:	e6b5      	b.n	b89e6 <__ieee754_pow+0x82e>
   b8c7a:	f000 0001 	and.w	r0, r0, #1
   b8c7e:	f1c0 0102 	rsb	r1, r0, #2
   b8c82:	9100      	str	r1, [sp, #0]
   b8c84:	2b00      	cmp	r3, #0
   b8c86:	f43f aac1 	beq.w	b820c <__ieee754_pow+0x54>
   b8c8a:	f7ff bb0d 	b.w	b82a8 <__ieee754_pow+0xf0>
   b8c8e:	f000 0001 	and.w	r0, r0, #1
   b8c92:	f1c0 0302 	rsb	r3, r0, #2
   b8c96:	9300      	str	r3, [sp, #0]
   b8c98:	f7ff bab8 	b.w	b820c <__ieee754_pow+0x54>
   b8c9c:	151b      	asrs	r3, r3, #20
   b8c9e:	e5bb      	b.n	b8818 <__ieee754_pow+0x660>
   b8ca0:	60000000 	.word	0x60000000
   b8ca4:	3ff71547 	.word	0x3ff71547
   b8ca8:	f85ddf44 	.word	0xf85ddf44
   b8cac:	3e54ae0b 	.word	0x3e54ae0b
   b8cb0:	55555555 	.word	0x55555555
   b8cb4:	3fd55555 	.word	0x3fd55555
   b8cb8:	652b82fe 	.word	0x652b82fe
   b8cbc:	3ff71547 	.word	0x3ff71547
   b8cc0:	8800759c 	.word	0x8800759c
   b8cc4:	7e37e43c 	.word	0x7e37e43c
   b8cc8:	40000000 	.word	0x40000000
   b8ccc:	3fe2b803 	.word	0x3fe2b803
   b8cd0:	43cfd006 	.word	0x43cfd006
   b8cd4:	3e4cfdeb 	.word	0x3e4cfdeb
   b8cd8:	00000000 	.word	0x00000000
   b8cdc:	3ff80000 	.word	0x3ff80000
   b8ce0:	3ff00000 	.word	0x3ff00000
   b8ce4:	3fd00000 	.word	0x3fd00000
   b8ce8:	3fe00000 	.word	0x3fe00000

000b8cec <__ieee754_sqrt>:
   b8cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8cf0:	4a63      	ldr	r2, [pc, #396]	; (b8e80 <__ieee754_sqrt+0x194>)
   b8cf2:	ec55 4b10 	vmov	r4, r5, d0
   b8cf6:	43aa      	bics	r2, r5
   b8cf8:	f000 809f 	beq.w	b8e3a <__ieee754_sqrt+0x14e>
   b8cfc:	2d00      	cmp	r5, #0
   b8cfe:	ee10 ca10 	vmov	ip, s0
   b8d02:	462b      	mov	r3, r5
   b8d04:	dd54      	ble.n	b8db0 <__ieee754_sqrt+0xc4>
   b8d06:	1529      	asrs	r1, r5, #20
   b8d08:	d063      	beq.n	b8dd2 <__ieee754_sqrt+0xe6>
   b8d0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b8d0e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b8d12:	07c9      	lsls	r1, r1, #31
   b8d14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8d18:	d404      	bmi.n	b8d24 <__ieee754_sqrt+0x38>
   b8d1a:	005b      	lsls	r3, r3, #1
   b8d1c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b8d20:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8d24:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b8d28:	2600      	movs	r6, #0
   b8d2a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b8d2e:	107f      	asrs	r7, r7, #1
   b8d30:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8d34:	f04f 0e16 	mov.w	lr, #22
   b8d38:	4634      	mov	r4, r6
   b8d3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b8d3e:	18a1      	adds	r1, r4, r2
   b8d40:	4299      	cmp	r1, r3
   b8d42:	dc02      	bgt.n	b8d4a <__ieee754_sqrt+0x5e>
   b8d44:	1a5b      	subs	r3, r3, r1
   b8d46:	188c      	adds	r4, r1, r2
   b8d48:	4416      	add	r6, r2
   b8d4a:	005b      	lsls	r3, r3, #1
   b8d4c:	f1be 0e01 	subs.w	lr, lr, #1
   b8d50:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b8d54:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b8d58:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8d5c:	d1ef      	bne.n	b8d3e <__ieee754_sqrt+0x52>
   b8d5e:	4675      	mov	r5, lr
   b8d60:	2020      	movs	r0, #32
   b8d62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b8d66:	e00a      	b.n	b8d7e <__ieee754_sqrt+0x92>
   b8d68:	d044      	beq.n	b8df4 <__ieee754_sqrt+0x108>
   b8d6a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b8d6e:	3801      	subs	r0, #1
   b8d70:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b8d74:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8d78:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b8d7c:	d043      	beq.n	b8e06 <__ieee754_sqrt+0x11a>
   b8d7e:	42a3      	cmp	r3, r4
   b8d80:	eb02 010e 	add.w	r1, r2, lr
   b8d84:	ddf0      	ble.n	b8d68 <__ieee754_sqrt+0x7c>
   b8d86:	2900      	cmp	r1, #0
   b8d88:	eb01 0e02 	add.w	lr, r1, r2
   b8d8c:	db0a      	blt.n	b8da4 <__ieee754_sqrt+0xb8>
   b8d8e:	46a0      	mov	r8, r4
   b8d90:	1b1b      	subs	r3, r3, r4
   b8d92:	4561      	cmp	r1, ip
   b8d94:	bf88      	it	hi
   b8d96:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b8d9a:	ebac 0c01 	sub.w	ip, ip, r1
   b8d9e:	4415      	add	r5, r2
   b8da0:	4644      	mov	r4, r8
   b8da2:	e7e2      	b.n	b8d6a <__ieee754_sqrt+0x7e>
   b8da4:	f1be 0f00 	cmp.w	lr, #0
   b8da8:	dbf1      	blt.n	b8d8e <__ieee754_sqrt+0xa2>
   b8daa:	f104 0801 	add.w	r8, r4, #1
   b8dae:	e7ef      	b.n	b8d90 <__ieee754_sqrt+0xa4>
   b8db0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b8db4:	4322      	orrs	r2, r4
   b8db6:	d038      	beq.n	b8e2a <__ieee754_sqrt+0x13e>
   b8db8:	2d00      	cmp	r5, #0
   b8dba:	d14e      	bne.n	b8e5a <__ieee754_sqrt+0x16e>
   b8dbc:	4629      	mov	r1, r5
   b8dbe:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b8dc2:	3915      	subs	r1, #21
   b8dc4:	4613      	mov	r3, r2
   b8dc6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b8dca:	2a00      	cmp	r2, #0
   b8dcc:	d0f7      	beq.n	b8dbe <__ieee754_sqrt+0xd2>
   b8dce:	02d6      	lsls	r6, r2, #11
   b8dd0:	d450      	bmi.n	b8e74 <__ieee754_sqrt+0x188>
   b8dd2:	2000      	movs	r0, #0
   b8dd4:	005b      	lsls	r3, r3, #1
   b8dd6:	02dd      	lsls	r5, r3, #11
   b8dd8:	4604      	mov	r4, r0
   b8dda:	f100 0001 	add.w	r0, r0, #1
   b8dde:	d5f9      	bpl.n	b8dd4 <__ieee754_sqrt+0xe8>
   b8de0:	461a      	mov	r2, r3
   b8de2:	4663      	mov	r3, ip
   b8de4:	fa0c fc00 	lsl.w	ip, ip, r0
   b8de8:	f1c0 0020 	rsb	r0, r0, #32
   b8dec:	40c3      	lsrs	r3, r0
   b8dee:	1b09      	subs	r1, r1, r4
   b8df0:	4313      	orrs	r3, r2
   b8df2:	e78a      	b.n	b8d0a <__ieee754_sqrt+0x1e>
   b8df4:	4561      	cmp	r1, ip
   b8df6:	d8b8      	bhi.n	b8d6a <__ieee754_sqrt+0x7e>
   b8df8:	2900      	cmp	r1, #0
   b8dfa:	eb01 0e02 	add.w	lr, r1, r2
   b8dfe:	dbd1      	blt.n	b8da4 <__ieee754_sqrt+0xb8>
   b8e00:	4698      	mov	r8, r3
   b8e02:	2300      	movs	r3, #0
   b8e04:	e7c9      	b.n	b8d9a <__ieee754_sqrt+0xae>
   b8e06:	ea53 030c 	orrs.w	r3, r3, ip
   b8e0a:	d110      	bne.n	b8e2e <__ieee754_sqrt+0x142>
   b8e0c:	0868      	lsrs	r0, r5, #1
   b8e0e:	1071      	asrs	r1, r6, #1
   b8e10:	07f3      	lsls	r3, r6, #31
   b8e12:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b8e16:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b8e1a:	bf48      	it	mi
   b8e1c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b8e20:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b8e24:	4602      	mov	r2, r0
   b8e26:	ec43 2b10 	vmov	d0, r2, r3
   b8e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8e2e:	1c6a      	adds	r2, r5, #1
   b8e30:	bf16      	itet	ne
   b8e32:	1c68      	addne	r0, r5, #1
   b8e34:	3601      	addeq	r6, #1
   b8e36:	0840      	lsrne	r0, r0, #1
   b8e38:	e7e9      	b.n	b8e0e <__ieee754_sqrt+0x122>
   b8e3a:	ee10 2a10 	vmov	r2, s0
   b8e3e:	ee10 0a10 	vmov	r0, s0
   b8e42:	462b      	mov	r3, r5
   b8e44:	4629      	mov	r1, r5
   b8e46:	f000 fb25 	bl	b9494 <__aeabi_dmul>
   b8e4a:	4622      	mov	r2, r4
   b8e4c:	462b      	mov	r3, r5
   b8e4e:	f000 f96b 	bl	b9128 <__adddf3>
   b8e52:	ec41 0b10 	vmov	d0, r0, r1
   b8e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8e5a:	ee10 2a10 	vmov	r2, s0
   b8e5e:	4620      	mov	r0, r4
   b8e60:	4629      	mov	r1, r5
   b8e62:	f000 f95f 	bl	b9124 <__aeabi_dsub>
   b8e66:	4602      	mov	r2, r0
   b8e68:	460b      	mov	r3, r1
   b8e6a:	f000 fc3d 	bl	b96e8 <__aeabi_ddiv>
   b8e6e:	ec41 0b10 	vmov	d0, r0, r1
   b8e72:	e7da      	b.n	b8e2a <__ieee754_sqrt+0x13e>
   b8e74:	4663      	mov	r3, ip
   b8e76:	2020      	movs	r0, #32
   b8e78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8e7c:	e7b6      	b.n	b8dec <__ieee754_sqrt+0x100>
   b8e7e:	bf00      	nop
   b8e80:	7ff00000 	.word	0x7ff00000

000b8e84 <fabs>:
   b8e84:	ec51 0b10 	vmov	r0, r1, d0
   b8e88:	ee10 2a10 	vmov	r2, s0
   b8e8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b8e90:	ec43 2b10 	vmov	d0, r2, r3
   b8e94:	4770      	bx	lr
   b8e96:	bf00      	nop

000b8e98 <finite>:
   b8e98:	b082      	sub	sp, #8
   b8e9a:	ed8d 0b00 	vstr	d0, [sp]
   b8e9e:	9801      	ldr	r0, [sp, #4]
   b8ea0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b8ea4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b8ea8:	0fc0      	lsrs	r0, r0, #31
   b8eaa:	b002      	add	sp, #8
   b8eac:	4770      	bx	lr
   b8eae:	bf00      	nop

000b8eb0 <nan>:
   b8eb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; b8eb8 <nan+0x8>
   b8eb4:	4770      	bx	lr
   b8eb6:	bf00      	nop
   b8eb8:	00000000 	.word	0x00000000
   b8ebc:	7ff80000 	.word	0x7ff80000

000b8ec0 <rint>:
   b8ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8ec2:	ec53 2b10 	vmov	r2, r3, d0
   b8ec6:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b8eca:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b8ece:	2913      	cmp	r1, #19
   b8ed0:	ee10 0a10 	vmov	r0, s0
   b8ed4:	b083      	sub	sp, #12
   b8ed6:	461c      	mov	r4, r3
   b8ed8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b8edc:	dc3a      	bgt.n	b8f54 <rint+0x94>
   b8ede:	2900      	cmp	r1, #0
   b8ee0:	db30      	blt.n	b8f44 <rint+0x84>
   b8ee2:	4d42      	ldr	r5, [pc, #264]	; (b8fec <rint+0x12c>)
   b8ee4:	fa45 fc01 	asr.w	ip, r5, r1
   b8ee8:	ea03 050c 	and.w	r5, r3, ip
   b8eec:	4315      	orrs	r5, r2
   b8eee:	d02d      	beq.n	b8f4c <rint+0x8c>
   b8ef0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b8ef4:	4318      	orrs	r0, r3
   b8ef6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b8efa:	d00c      	beq.n	b8f16 <rint+0x56>
   b8efc:	ea24 0c0c 	bic.w	ip, r4, ip
   b8f00:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b8f04:	2913      	cmp	r1, #19
   b8f06:	fa44 f101 	asr.w	r1, r4, r1
   b8f0a:	bf0c      	ite	eq
   b8f0c:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b8f10:	2000      	movne	r0, #0
   b8f12:	ea4c 0401 	orr.w	r4, ip, r1
   b8f16:	4936      	ldr	r1, [pc, #216]	; (b8ff0 <rint+0x130>)
   b8f18:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b8f1c:	4623      	mov	r3, r4
   b8f1e:	e9de 4500 	ldrd	r4, r5, [lr]
   b8f22:	4602      	mov	r2, r0
   b8f24:	4629      	mov	r1, r5
   b8f26:	4620      	mov	r0, r4
   b8f28:	f000 f8fe 	bl	b9128 <__adddf3>
   b8f2c:	e9cd 0100 	strd	r0, r1, [sp]
   b8f30:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8f34:	4622      	mov	r2, r4
   b8f36:	462b      	mov	r3, r5
   b8f38:	f000 f8f4 	bl	b9124 <__aeabi_dsub>
   b8f3c:	ec41 0b10 	vmov	d0, r0, r1
   b8f40:	b003      	add	sp, #12
   b8f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8f44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b8f48:	4311      	orrs	r1, r2
   b8f4a:	d124      	bne.n	b8f96 <rint+0xd6>
   b8f4c:	ec43 2b10 	vmov	d0, r2, r3
   b8f50:	b003      	add	sp, #12
   b8f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8f54:	2933      	cmp	r1, #51	; 0x33
   b8f56:	dd08      	ble.n	b8f6a <rint+0xaa>
   b8f58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b8f5c:	d1f6      	bne.n	b8f4c <rint+0x8c>
   b8f5e:	4619      	mov	r1, r3
   b8f60:	f000 f8e2 	bl	b9128 <__adddf3>
   b8f64:	ec41 0b10 	vmov	d0, r0, r1
   b8f68:	e7f2      	b.n	b8f50 <rint+0x90>
   b8f6a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b8f6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b8f72:	fa21 f10c 	lsr.w	r1, r1, ip
   b8f76:	420a      	tst	r2, r1
   b8f78:	d0e8      	beq.n	b8f4c <rint+0x8c>
   b8f7a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b8f7e:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b8f82:	d0c8      	beq.n	b8f16 <rint+0x56>
   b8f84:	ea20 0303 	bic.w	r3, r0, r3
   b8f88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b8f8c:	fa40 fc0c 	asr.w	ip, r0, ip
   b8f90:	ea43 000c 	orr.w	r0, r3, ip
   b8f94:	e7bf      	b.n	b8f16 <rint+0x56>
   b8f96:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b8f9a:	4318      	orrs	r0, r3
   b8f9c:	4a14      	ldr	r2, [pc, #80]	; (b8ff0 <rint+0x130>)
   b8f9e:	4243      	negs	r3, r0
   b8fa0:	4303      	orrs	r3, r0
   b8fa2:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b8fa6:	0b1b      	lsrs	r3, r3, #12
   b8fa8:	0c62      	lsrs	r2, r4, #17
   b8faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b8fae:	0452      	lsls	r2, r2, #17
   b8fb0:	ea43 0702 	orr.w	r7, r3, r2
   b8fb4:	463b      	mov	r3, r7
   b8fb6:	e9de 6700 	ldrd	r6, r7, [lr]
   b8fba:	ee10 2a10 	vmov	r2, s0
   b8fbe:	4630      	mov	r0, r6
   b8fc0:	4639      	mov	r1, r7
   b8fc2:	f000 f8b1 	bl	b9128 <__adddf3>
   b8fc6:	e9cd 0100 	strd	r0, r1, [sp]
   b8fca:	4632      	mov	r2, r6
   b8fcc:	463b      	mov	r3, r7
   b8fce:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8fd2:	f000 f8a7 	bl	b9124 <__aeabi_dsub>
   b8fd6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b8fda:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8fde:	4602      	mov	r2, r0
   b8fe0:	ea41 0304 	orr.w	r3, r1, r4
   b8fe4:	ec43 2b10 	vmov	d0, r2, r3
   b8fe8:	b003      	add	sp, #12
   b8fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8fec:	000fffff 	.word	0x000fffff
   b8ff0:	000bcec8 	.word	0x000bcec8
   b8ff4:	00000000 	.word	0x00000000

000b8ff8 <scalbn>:
   b8ff8:	b538      	push	{r3, r4, r5, lr}
   b8ffa:	ec53 2b10 	vmov	r2, r3, d0
   b8ffe:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b9002:	4604      	mov	r4, r0
   b9004:	469c      	mov	ip, r3
   b9006:	bb89      	cbnz	r1, b906c <scalbn+0x74>
   b9008:	ee10 1a10 	vmov	r1, s0
   b900c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b9010:	ea5c 0101 	orrs.w	r1, ip, r1
   b9014:	d029      	beq.n	b906a <scalbn+0x72>
   b9016:	4619      	mov	r1, r3
   b9018:	2200      	movs	r2, #0
   b901a:	4b3d      	ldr	r3, [pc, #244]	; (b9110 <scalbn+0x118>)
   b901c:	4d3d      	ldr	r5, [pc, #244]	; (b9114 <scalbn+0x11c>)
   b901e:	ee10 0a10 	vmov	r0, s0
   b9022:	f000 fa37 	bl	b9494 <__aeabi_dmul>
   b9026:	42ac      	cmp	r4, r5
   b9028:	4602      	mov	r2, r0
   b902a:	460b      	mov	r3, r1
   b902c:	db16      	blt.n	b905c <scalbn+0x64>
   b902e:	468c      	mov	ip, r1
   b9030:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b9034:	3936      	subs	r1, #54	; 0x36
   b9036:	4421      	add	r1, r4
   b9038:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b903c:	4281      	cmp	r1, r0
   b903e:	dc21      	bgt.n	b9084 <scalbn+0x8c>
   b9040:	2900      	cmp	r1, #0
   b9042:	dc47      	bgt.n	b90d4 <scalbn+0xdc>
   b9044:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b9048:	da34      	bge.n	b90b4 <scalbn+0xbc>
   b904a:	f24c 3150 	movw	r1, #50000	; 0xc350
   b904e:	428c      	cmp	r4, r1
   b9050:	dc18      	bgt.n	b9084 <scalbn+0x8c>
   b9052:	2b00      	cmp	r3, #0
   b9054:	a126      	add	r1, pc, #152	; (adr r1, b90f0 <scalbn+0xf8>)
   b9056:	e9d1 0100 	ldrd	r0, r1, [r1]
   b905a:	db44      	blt.n	b90e6 <scalbn+0xee>
   b905c:	a324      	add	r3, pc, #144	; (adr r3, b90f0 <scalbn+0xf8>)
   b905e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9062:	f000 fa17 	bl	b9494 <__aeabi_dmul>
   b9066:	ec41 0b10 	vmov	d0, r0, r1
   b906a:	bd38      	pop	{r3, r4, r5, pc}
   b906c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b9070:	4281      	cmp	r1, r0
   b9072:	d1e0      	bne.n	b9036 <scalbn+0x3e>
   b9074:	ee10 0a10 	vmov	r0, s0
   b9078:	4619      	mov	r1, r3
   b907a:	f000 f855 	bl	b9128 <__adddf3>
   b907e:	ec41 0b10 	vmov	d0, r0, r1
   b9082:	bd38      	pop	{r3, r4, r5, pc}
   b9084:	2b00      	cmp	r3, #0
   b9086:	a11c      	add	r1, pc, #112	; (adr r1, b90f8 <scalbn+0x100>)
   b9088:	e9d1 0100 	ldrd	r0, r1, [r1]
   b908c:	db07      	blt.n	b909e <scalbn+0xa6>
   b908e:	a31a      	add	r3, pc, #104	; (adr r3, b90f8 <scalbn+0x100>)
   b9090:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9094:	f000 f9fe 	bl	b9494 <__aeabi_dmul>
   b9098:	ec41 0b10 	vmov	d0, r0, r1
   b909c:	bd38      	pop	{r3, r4, r5, pc}
   b909e:	a118      	add	r1, pc, #96	; (adr r1, b9100 <scalbn+0x108>)
   b90a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b90a4:	a314      	add	r3, pc, #80	; (adr r3, b90f8 <scalbn+0x100>)
   b90a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b90aa:	f000 f9f3 	bl	b9494 <__aeabi_dmul>
   b90ae:	ec41 0b10 	vmov	d0, r0, r1
   b90b2:	e7f3      	b.n	b909c <scalbn+0xa4>
   b90b4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b90b8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b90bc:	3136      	adds	r1, #54	; 0x36
   b90be:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b90c2:	4610      	mov	r0, r2
   b90c4:	4619      	mov	r1, r3
   b90c6:	2200      	movs	r2, #0
   b90c8:	4b13      	ldr	r3, [pc, #76]	; (b9118 <scalbn+0x120>)
   b90ca:	f000 f9e3 	bl	b9494 <__aeabi_dmul>
   b90ce:	ec41 0b10 	vmov	d0, r0, r1
   b90d2:	bd38      	pop	{r3, r4, r5, pc}
   b90d4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b90d8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b90dc:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b90e0:	ec43 2b10 	vmov	d0, r2, r3
   b90e4:	bd38      	pop	{r3, r4, r5, pc}
   b90e6:	a108      	add	r1, pc, #32	; (adr r1, b9108 <scalbn+0x110>)
   b90e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b90ec:	e7b6      	b.n	b905c <scalbn+0x64>
   b90ee:	bf00      	nop
   b90f0:	c2f8f359 	.word	0xc2f8f359
   b90f4:	01a56e1f 	.word	0x01a56e1f
   b90f8:	8800759c 	.word	0x8800759c
   b90fc:	7e37e43c 	.word	0x7e37e43c
   b9100:	8800759c 	.word	0x8800759c
   b9104:	fe37e43c 	.word	0xfe37e43c
   b9108:	c2f8f359 	.word	0xc2f8f359
   b910c:	81a56e1f 	.word	0x81a56e1f
   b9110:	43500000 	.word	0x43500000
   b9114:	ffff3cb0 	.word	0xffff3cb0
   b9118:	3c900000 	.word	0x3c900000

000b911c <__aeabi_drsub>:
   b911c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9120:	e002      	b.n	b9128 <__adddf3>
   b9122:	bf00      	nop

000b9124 <__aeabi_dsub>:
   b9124:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9128 <__adddf3>:
   b9128:	b530      	push	{r4, r5, lr}
   b912a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b912e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9132:	ea94 0f05 	teq	r4, r5
   b9136:	bf08      	it	eq
   b9138:	ea90 0f02 	teqeq	r0, r2
   b913c:	bf1f      	itttt	ne
   b913e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b9142:	ea55 0c02 	orrsne.w	ip, r5, r2
   b9146:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b914a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b914e:	f000 80e2 	beq.w	b9316 <__adddf3+0x1ee>
   b9152:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b9156:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b915a:	bfb8      	it	lt
   b915c:	426d      	neglt	r5, r5
   b915e:	dd0c      	ble.n	b917a <__adddf3+0x52>
   b9160:	442c      	add	r4, r5
   b9162:	ea80 0202 	eor.w	r2, r0, r2
   b9166:	ea81 0303 	eor.w	r3, r1, r3
   b916a:	ea82 0000 	eor.w	r0, r2, r0
   b916e:	ea83 0101 	eor.w	r1, r3, r1
   b9172:	ea80 0202 	eor.w	r2, r0, r2
   b9176:	ea81 0303 	eor.w	r3, r1, r3
   b917a:	2d36      	cmp	r5, #54	; 0x36
   b917c:	bf88      	it	hi
   b917e:	bd30      	pophi	{r4, r5, pc}
   b9180:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9184:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9188:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b918c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9190:	d002      	beq.n	b9198 <__adddf3+0x70>
   b9192:	4240      	negs	r0, r0
   b9194:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9198:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b919c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b91a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b91a4:	d002      	beq.n	b91ac <__adddf3+0x84>
   b91a6:	4252      	negs	r2, r2
   b91a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b91ac:	ea94 0f05 	teq	r4, r5
   b91b0:	f000 80a7 	beq.w	b9302 <__adddf3+0x1da>
   b91b4:	f1a4 0401 	sub.w	r4, r4, #1
   b91b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b91bc:	db0d      	blt.n	b91da <__adddf3+0xb2>
   b91be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b91c2:	fa22 f205 	lsr.w	r2, r2, r5
   b91c6:	1880      	adds	r0, r0, r2
   b91c8:	f141 0100 	adc.w	r1, r1, #0
   b91cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b91d0:	1880      	adds	r0, r0, r2
   b91d2:	fa43 f305 	asr.w	r3, r3, r5
   b91d6:	4159      	adcs	r1, r3
   b91d8:	e00e      	b.n	b91f8 <__adddf3+0xd0>
   b91da:	f1a5 0520 	sub.w	r5, r5, #32
   b91de:	f10e 0e20 	add.w	lr, lr, #32
   b91e2:	2a01      	cmp	r2, #1
   b91e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b91e8:	bf28      	it	cs
   b91ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b91ee:	fa43 f305 	asr.w	r3, r3, r5
   b91f2:	18c0      	adds	r0, r0, r3
   b91f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b91f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b91fc:	d507      	bpl.n	b920e <__adddf3+0xe6>
   b91fe:	f04f 0e00 	mov.w	lr, #0
   b9202:	f1dc 0c00 	rsbs	ip, ip, #0
   b9206:	eb7e 0000 	sbcs.w	r0, lr, r0
   b920a:	eb6e 0101 	sbc.w	r1, lr, r1
   b920e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9212:	d31b      	bcc.n	b924c <__adddf3+0x124>
   b9214:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9218:	d30c      	bcc.n	b9234 <__adddf3+0x10c>
   b921a:	0849      	lsrs	r1, r1, #1
   b921c:	ea5f 0030 	movs.w	r0, r0, rrx
   b9220:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9224:	f104 0401 	add.w	r4, r4, #1
   b9228:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b922c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9230:	f080 809a 	bcs.w	b9368 <__adddf3+0x240>
   b9234:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9238:	bf08      	it	eq
   b923a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b923e:	f150 0000 	adcs.w	r0, r0, #0
   b9242:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9246:	ea41 0105 	orr.w	r1, r1, r5
   b924a:	bd30      	pop	{r4, r5, pc}
   b924c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9250:	4140      	adcs	r0, r0
   b9252:	eb41 0101 	adc.w	r1, r1, r1
   b9256:	3c01      	subs	r4, #1
   b9258:	bf28      	it	cs
   b925a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b925e:	d2e9      	bcs.n	b9234 <__adddf3+0x10c>
   b9260:	f091 0f00 	teq	r1, #0
   b9264:	bf04      	itt	eq
   b9266:	4601      	moveq	r1, r0
   b9268:	2000      	moveq	r0, #0
   b926a:	fab1 f381 	clz	r3, r1
   b926e:	bf08      	it	eq
   b9270:	3320      	addeq	r3, #32
   b9272:	f1a3 030b 	sub.w	r3, r3, #11
   b9276:	f1b3 0220 	subs.w	r2, r3, #32
   b927a:	da0c      	bge.n	b9296 <__adddf3+0x16e>
   b927c:	320c      	adds	r2, #12
   b927e:	dd08      	ble.n	b9292 <__adddf3+0x16a>
   b9280:	f102 0c14 	add.w	ip, r2, #20
   b9284:	f1c2 020c 	rsb	r2, r2, #12
   b9288:	fa01 f00c 	lsl.w	r0, r1, ip
   b928c:	fa21 f102 	lsr.w	r1, r1, r2
   b9290:	e00c      	b.n	b92ac <__adddf3+0x184>
   b9292:	f102 0214 	add.w	r2, r2, #20
   b9296:	bfd8      	it	le
   b9298:	f1c2 0c20 	rsble	ip, r2, #32
   b929c:	fa01 f102 	lsl.w	r1, r1, r2
   b92a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b92a4:	bfdc      	itt	le
   b92a6:	ea41 010c 	orrle.w	r1, r1, ip
   b92aa:	4090      	lslle	r0, r2
   b92ac:	1ae4      	subs	r4, r4, r3
   b92ae:	bfa2      	ittt	ge
   b92b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b92b4:	4329      	orrge	r1, r5
   b92b6:	bd30      	popge	{r4, r5, pc}
   b92b8:	ea6f 0404 	mvn.w	r4, r4
   b92bc:	3c1f      	subs	r4, #31
   b92be:	da1c      	bge.n	b92fa <__adddf3+0x1d2>
   b92c0:	340c      	adds	r4, #12
   b92c2:	dc0e      	bgt.n	b92e2 <__adddf3+0x1ba>
   b92c4:	f104 0414 	add.w	r4, r4, #20
   b92c8:	f1c4 0220 	rsb	r2, r4, #32
   b92cc:	fa20 f004 	lsr.w	r0, r0, r4
   b92d0:	fa01 f302 	lsl.w	r3, r1, r2
   b92d4:	ea40 0003 	orr.w	r0, r0, r3
   b92d8:	fa21 f304 	lsr.w	r3, r1, r4
   b92dc:	ea45 0103 	orr.w	r1, r5, r3
   b92e0:	bd30      	pop	{r4, r5, pc}
   b92e2:	f1c4 040c 	rsb	r4, r4, #12
   b92e6:	f1c4 0220 	rsb	r2, r4, #32
   b92ea:	fa20 f002 	lsr.w	r0, r0, r2
   b92ee:	fa01 f304 	lsl.w	r3, r1, r4
   b92f2:	ea40 0003 	orr.w	r0, r0, r3
   b92f6:	4629      	mov	r1, r5
   b92f8:	bd30      	pop	{r4, r5, pc}
   b92fa:	fa21 f004 	lsr.w	r0, r1, r4
   b92fe:	4629      	mov	r1, r5
   b9300:	bd30      	pop	{r4, r5, pc}
   b9302:	f094 0f00 	teq	r4, #0
   b9306:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b930a:	bf06      	itte	eq
   b930c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9310:	3401      	addeq	r4, #1
   b9312:	3d01      	subne	r5, #1
   b9314:	e74e      	b.n	b91b4 <__adddf3+0x8c>
   b9316:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b931a:	bf18      	it	ne
   b931c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9320:	d029      	beq.n	b9376 <__adddf3+0x24e>
   b9322:	ea94 0f05 	teq	r4, r5
   b9326:	bf08      	it	eq
   b9328:	ea90 0f02 	teqeq	r0, r2
   b932c:	d005      	beq.n	b933a <__adddf3+0x212>
   b932e:	ea54 0c00 	orrs.w	ip, r4, r0
   b9332:	bf04      	itt	eq
   b9334:	4619      	moveq	r1, r3
   b9336:	4610      	moveq	r0, r2
   b9338:	bd30      	pop	{r4, r5, pc}
   b933a:	ea91 0f03 	teq	r1, r3
   b933e:	bf1e      	ittt	ne
   b9340:	2100      	movne	r1, #0
   b9342:	2000      	movne	r0, #0
   b9344:	bd30      	popne	{r4, r5, pc}
   b9346:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b934a:	d105      	bne.n	b9358 <__adddf3+0x230>
   b934c:	0040      	lsls	r0, r0, #1
   b934e:	4149      	adcs	r1, r1
   b9350:	bf28      	it	cs
   b9352:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9356:	bd30      	pop	{r4, r5, pc}
   b9358:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b935c:	bf3c      	itt	cc
   b935e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9362:	bd30      	popcc	{r4, r5, pc}
   b9364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9368:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b936c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9370:	f04f 0000 	mov.w	r0, #0
   b9374:	bd30      	pop	{r4, r5, pc}
   b9376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b937a:	bf1a      	itte	ne
   b937c:	4619      	movne	r1, r3
   b937e:	4610      	movne	r0, r2
   b9380:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9384:	bf1c      	itt	ne
   b9386:	460b      	movne	r3, r1
   b9388:	4602      	movne	r2, r0
   b938a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b938e:	bf06      	itte	eq
   b9390:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9394:	ea91 0f03 	teqeq	r1, r3
   b9398:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b939c:	bd30      	pop	{r4, r5, pc}
   b939e:	bf00      	nop

000b93a0 <__aeabi_ui2d>:
   b93a0:	f090 0f00 	teq	r0, #0
   b93a4:	bf04      	itt	eq
   b93a6:	2100      	moveq	r1, #0
   b93a8:	4770      	bxeq	lr
   b93aa:	b530      	push	{r4, r5, lr}
   b93ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b93b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b93b4:	f04f 0500 	mov.w	r5, #0
   b93b8:	f04f 0100 	mov.w	r1, #0
   b93bc:	e750      	b.n	b9260 <__adddf3+0x138>
   b93be:	bf00      	nop

000b93c0 <__aeabi_i2d>:
   b93c0:	f090 0f00 	teq	r0, #0
   b93c4:	bf04      	itt	eq
   b93c6:	2100      	moveq	r1, #0
   b93c8:	4770      	bxeq	lr
   b93ca:	b530      	push	{r4, r5, lr}
   b93cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b93d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b93d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b93d8:	bf48      	it	mi
   b93da:	4240      	negmi	r0, r0
   b93dc:	f04f 0100 	mov.w	r1, #0
   b93e0:	e73e      	b.n	b9260 <__adddf3+0x138>
   b93e2:	bf00      	nop

000b93e4 <__aeabi_f2d>:
   b93e4:	0042      	lsls	r2, r0, #1
   b93e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b93ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b93ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b93f2:	bf1f      	itttt	ne
   b93f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b93f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b93fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9400:	4770      	bxne	lr
   b9402:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9406:	bf08      	it	eq
   b9408:	4770      	bxeq	lr
   b940a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b940e:	bf04      	itt	eq
   b9410:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9414:	4770      	bxeq	lr
   b9416:	b530      	push	{r4, r5, lr}
   b9418:	f44f 7460 	mov.w	r4, #896	; 0x380
   b941c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9420:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9424:	e71c      	b.n	b9260 <__adddf3+0x138>
   b9426:	bf00      	nop

000b9428 <__aeabi_ul2d>:
   b9428:	ea50 0201 	orrs.w	r2, r0, r1
   b942c:	bf08      	it	eq
   b942e:	4770      	bxeq	lr
   b9430:	b530      	push	{r4, r5, lr}
   b9432:	f04f 0500 	mov.w	r5, #0
   b9436:	e00a      	b.n	b944e <__aeabi_l2d+0x16>

000b9438 <__aeabi_l2d>:
   b9438:	ea50 0201 	orrs.w	r2, r0, r1
   b943c:	bf08      	it	eq
   b943e:	4770      	bxeq	lr
   b9440:	b530      	push	{r4, r5, lr}
   b9442:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9446:	d502      	bpl.n	b944e <__aeabi_l2d+0x16>
   b9448:	4240      	negs	r0, r0
   b944a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b944e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9452:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9456:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b945a:	f43f aed8 	beq.w	b920e <__adddf3+0xe6>
   b945e:	f04f 0203 	mov.w	r2, #3
   b9462:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9466:	bf18      	it	ne
   b9468:	3203      	addne	r2, #3
   b946a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b946e:	bf18      	it	ne
   b9470:	3203      	addne	r2, #3
   b9472:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9476:	f1c2 0320 	rsb	r3, r2, #32
   b947a:	fa00 fc03 	lsl.w	ip, r0, r3
   b947e:	fa20 f002 	lsr.w	r0, r0, r2
   b9482:	fa01 fe03 	lsl.w	lr, r1, r3
   b9486:	ea40 000e 	orr.w	r0, r0, lr
   b948a:	fa21 f102 	lsr.w	r1, r1, r2
   b948e:	4414      	add	r4, r2
   b9490:	e6bd      	b.n	b920e <__adddf3+0xe6>
   b9492:	bf00      	nop

000b9494 <__aeabi_dmul>:
   b9494:	b570      	push	{r4, r5, r6, lr}
   b9496:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b949a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b949e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b94a2:	bf1d      	ittte	ne
   b94a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b94a8:	ea94 0f0c 	teqne	r4, ip
   b94ac:	ea95 0f0c 	teqne	r5, ip
   b94b0:	f000 f8de 	bleq	b9670 <__aeabi_dmul+0x1dc>
   b94b4:	442c      	add	r4, r5
   b94b6:	ea81 0603 	eor.w	r6, r1, r3
   b94ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b94be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b94c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b94c6:	bf18      	it	ne
   b94c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b94cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b94d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b94d4:	d038      	beq.n	b9548 <__aeabi_dmul+0xb4>
   b94d6:	fba0 ce02 	umull	ip, lr, r0, r2
   b94da:	f04f 0500 	mov.w	r5, #0
   b94de:	fbe1 e502 	umlal	lr, r5, r1, r2
   b94e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b94e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b94ea:	f04f 0600 	mov.w	r6, #0
   b94ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   b94f2:	f09c 0f00 	teq	ip, #0
   b94f6:	bf18      	it	ne
   b94f8:	f04e 0e01 	orrne.w	lr, lr, #1
   b94fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b9500:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b9504:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b9508:	d204      	bcs.n	b9514 <__aeabi_dmul+0x80>
   b950a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b950e:	416d      	adcs	r5, r5
   b9510:	eb46 0606 	adc.w	r6, r6, r6
   b9514:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b9518:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b951c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b9520:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b9524:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b9528:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b952c:	bf88      	it	hi
   b952e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9532:	d81e      	bhi.n	b9572 <__aeabi_dmul+0xde>
   b9534:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b9538:	bf08      	it	eq
   b953a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b953e:	f150 0000 	adcs.w	r0, r0, #0
   b9542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9546:	bd70      	pop	{r4, r5, r6, pc}
   b9548:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b954c:	ea46 0101 	orr.w	r1, r6, r1
   b9550:	ea40 0002 	orr.w	r0, r0, r2
   b9554:	ea81 0103 	eor.w	r1, r1, r3
   b9558:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b955c:	bfc2      	ittt	gt
   b955e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9562:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9566:	bd70      	popgt	{r4, r5, r6, pc}
   b9568:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b956c:	f04f 0e00 	mov.w	lr, #0
   b9570:	3c01      	subs	r4, #1
   b9572:	f300 80ab 	bgt.w	b96cc <__aeabi_dmul+0x238>
   b9576:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b957a:	bfde      	ittt	le
   b957c:	2000      	movle	r0, #0
   b957e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b9582:	bd70      	pople	{r4, r5, r6, pc}
   b9584:	f1c4 0400 	rsb	r4, r4, #0
   b9588:	3c20      	subs	r4, #32
   b958a:	da35      	bge.n	b95f8 <__aeabi_dmul+0x164>
   b958c:	340c      	adds	r4, #12
   b958e:	dc1b      	bgt.n	b95c8 <__aeabi_dmul+0x134>
   b9590:	f104 0414 	add.w	r4, r4, #20
   b9594:	f1c4 0520 	rsb	r5, r4, #32
   b9598:	fa00 f305 	lsl.w	r3, r0, r5
   b959c:	fa20 f004 	lsr.w	r0, r0, r4
   b95a0:	fa01 f205 	lsl.w	r2, r1, r5
   b95a4:	ea40 0002 	orr.w	r0, r0, r2
   b95a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b95ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b95b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b95b4:	fa21 f604 	lsr.w	r6, r1, r4
   b95b8:	eb42 0106 	adc.w	r1, r2, r6
   b95bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b95c0:	bf08      	it	eq
   b95c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b95c6:	bd70      	pop	{r4, r5, r6, pc}
   b95c8:	f1c4 040c 	rsb	r4, r4, #12
   b95cc:	f1c4 0520 	rsb	r5, r4, #32
   b95d0:	fa00 f304 	lsl.w	r3, r0, r4
   b95d4:	fa20 f005 	lsr.w	r0, r0, r5
   b95d8:	fa01 f204 	lsl.w	r2, r1, r4
   b95dc:	ea40 0002 	orr.w	r0, r0, r2
   b95e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b95e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b95e8:	f141 0100 	adc.w	r1, r1, #0
   b95ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b95f0:	bf08      	it	eq
   b95f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b95f6:	bd70      	pop	{r4, r5, r6, pc}
   b95f8:	f1c4 0520 	rsb	r5, r4, #32
   b95fc:	fa00 f205 	lsl.w	r2, r0, r5
   b9600:	ea4e 0e02 	orr.w	lr, lr, r2
   b9604:	fa20 f304 	lsr.w	r3, r0, r4
   b9608:	fa01 f205 	lsl.w	r2, r1, r5
   b960c:	ea43 0302 	orr.w	r3, r3, r2
   b9610:	fa21 f004 	lsr.w	r0, r1, r4
   b9614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9618:	fa21 f204 	lsr.w	r2, r1, r4
   b961c:	ea20 0002 	bic.w	r0, r0, r2
   b9620:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9624:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9628:	bf08      	it	eq
   b962a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b962e:	bd70      	pop	{r4, r5, r6, pc}
   b9630:	f094 0f00 	teq	r4, #0
   b9634:	d10f      	bne.n	b9656 <__aeabi_dmul+0x1c2>
   b9636:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b963a:	0040      	lsls	r0, r0, #1
   b963c:	eb41 0101 	adc.w	r1, r1, r1
   b9640:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9644:	bf08      	it	eq
   b9646:	3c01      	subeq	r4, #1
   b9648:	d0f7      	beq.n	b963a <__aeabi_dmul+0x1a6>
   b964a:	ea41 0106 	orr.w	r1, r1, r6
   b964e:	f095 0f00 	teq	r5, #0
   b9652:	bf18      	it	ne
   b9654:	4770      	bxne	lr
   b9656:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b965a:	0052      	lsls	r2, r2, #1
   b965c:	eb43 0303 	adc.w	r3, r3, r3
   b9660:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b9664:	bf08      	it	eq
   b9666:	3d01      	subeq	r5, #1
   b9668:	d0f7      	beq.n	b965a <__aeabi_dmul+0x1c6>
   b966a:	ea43 0306 	orr.w	r3, r3, r6
   b966e:	4770      	bx	lr
   b9670:	ea94 0f0c 	teq	r4, ip
   b9674:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9678:	bf18      	it	ne
   b967a:	ea95 0f0c 	teqne	r5, ip
   b967e:	d00c      	beq.n	b969a <__aeabi_dmul+0x206>
   b9680:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9684:	bf18      	it	ne
   b9686:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b968a:	d1d1      	bne.n	b9630 <__aeabi_dmul+0x19c>
   b968c:	ea81 0103 	eor.w	r1, r1, r3
   b9690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9694:	f04f 0000 	mov.w	r0, #0
   b9698:	bd70      	pop	{r4, r5, r6, pc}
   b969a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b969e:	bf06      	itte	eq
   b96a0:	4610      	moveq	r0, r2
   b96a2:	4619      	moveq	r1, r3
   b96a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b96a8:	d019      	beq.n	b96de <__aeabi_dmul+0x24a>
   b96aa:	ea94 0f0c 	teq	r4, ip
   b96ae:	d102      	bne.n	b96b6 <__aeabi_dmul+0x222>
   b96b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b96b4:	d113      	bne.n	b96de <__aeabi_dmul+0x24a>
   b96b6:	ea95 0f0c 	teq	r5, ip
   b96ba:	d105      	bne.n	b96c8 <__aeabi_dmul+0x234>
   b96bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b96c0:	bf1c      	itt	ne
   b96c2:	4610      	movne	r0, r2
   b96c4:	4619      	movne	r1, r3
   b96c6:	d10a      	bne.n	b96de <__aeabi_dmul+0x24a>
   b96c8:	ea81 0103 	eor.w	r1, r1, r3
   b96cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b96d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b96d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b96d8:	f04f 0000 	mov.w	r0, #0
   b96dc:	bd70      	pop	{r4, r5, r6, pc}
   b96de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b96e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b96e6:	bd70      	pop	{r4, r5, r6, pc}

000b96e8 <__aeabi_ddiv>:
   b96e8:	b570      	push	{r4, r5, r6, lr}
   b96ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b96ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b96f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b96f6:	bf1d      	ittte	ne
   b96f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b96fc:	ea94 0f0c 	teqne	r4, ip
   b9700:	ea95 0f0c 	teqne	r5, ip
   b9704:	f000 f8a7 	bleq	b9856 <__aeabi_ddiv+0x16e>
   b9708:	eba4 0405 	sub.w	r4, r4, r5
   b970c:	ea81 0e03 	eor.w	lr, r1, r3
   b9710:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9714:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9718:	f000 8088 	beq.w	b982c <__aeabi_ddiv+0x144>
   b971c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9720:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9724:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9728:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b972c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9730:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9734:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b9738:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b973c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9740:	429d      	cmp	r5, r3
   b9742:	bf08      	it	eq
   b9744:	4296      	cmpeq	r6, r2
   b9746:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b974a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b974e:	d202      	bcs.n	b9756 <__aeabi_ddiv+0x6e>
   b9750:	085b      	lsrs	r3, r3, #1
   b9752:	ea4f 0232 	mov.w	r2, r2, rrx
   b9756:	1ab6      	subs	r6, r6, r2
   b9758:	eb65 0503 	sbc.w	r5, r5, r3
   b975c:	085b      	lsrs	r3, r3, #1
   b975e:	ea4f 0232 	mov.w	r2, r2, rrx
   b9762:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b9766:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b976a:	ebb6 0e02 	subs.w	lr, r6, r2
   b976e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9772:	bf22      	ittt	cs
   b9774:	1ab6      	subcs	r6, r6, r2
   b9776:	4675      	movcs	r5, lr
   b9778:	ea40 000c 	orrcs.w	r0, r0, ip
   b977c:	085b      	lsrs	r3, r3, #1
   b977e:	ea4f 0232 	mov.w	r2, r2, rrx
   b9782:	ebb6 0e02 	subs.w	lr, r6, r2
   b9786:	eb75 0e03 	sbcs.w	lr, r5, r3
   b978a:	bf22      	ittt	cs
   b978c:	1ab6      	subcs	r6, r6, r2
   b978e:	4675      	movcs	r5, lr
   b9790:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b9794:	085b      	lsrs	r3, r3, #1
   b9796:	ea4f 0232 	mov.w	r2, r2, rrx
   b979a:	ebb6 0e02 	subs.w	lr, r6, r2
   b979e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b97a2:	bf22      	ittt	cs
   b97a4:	1ab6      	subcs	r6, r6, r2
   b97a6:	4675      	movcs	r5, lr
   b97a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b97ac:	085b      	lsrs	r3, r3, #1
   b97ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b97b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b97b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b97ba:	bf22      	ittt	cs
   b97bc:	1ab6      	subcs	r6, r6, r2
   b97be:	4675      	movcs	r5, lr
   b97c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b97c4:	ea55 0e06 	orrs.w	lr, r5, r6
   b97c8:	d018      	beq.n	b97fc <__aeabi_ddiv+0x114>
   b97ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b97ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b97d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b97d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b97da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b97de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b97e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b97e6:	d1c0      	bne.n	b976a <__aeabi_ddiv+0x82>
   b97e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b97ec:	d10b      	bne.n	b9806 <__aeabi_ddiv+0x11e>
   b97ee:	ea41 0100 	orr.w	r1, r1, r0
   b97f2:	f04f 0000 	mov.w	r0, #0
   b97f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b97fa:	e7b6      	b.n	b976a <__aeabi_ddiv+0x82>
   b97fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9800:	bf04      	itt	eq
   b9802:	4301      	orreq	r1, r0
   b9804:	2000      	moveq	r0, #0
   b9806:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b980a:	bf88      	it	hi
   b980c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9810:	f63f aeaf 	bhi.w	b9572 <__aeabi_dmul+0xde>
   b9814:	ebb5 0c03 	subs.w	ip, r5, r3
   b9818:	bf04      	itt	eq
   b981a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b981e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9822:	f150 0000 	adcs.w	r0, r0, #0
   b9826:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b982a:	bd70      	pop	{r4, r5, r6, pc}
   b982c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9830:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9834:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b9838:	bfc2      	ittt	gt
   b983a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b983e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9842:	bd70      	popgt	{r4, r5, r6, pc}
   b9844:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9848:	f04f 0e00 	mov.w	lr, #0
   b984c:	3c01      	subs	r4, #1
   b984e:	e690      	b.n	b9572 <__aeabi_dmul+0xde>
   b9850:	ea45 0e06 	orr.w	lr, r5, r6
   b9854:	e68d      	b.n	b9572 <__aeabi_dmul+0xde>
   b9856:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b985a:	ea94 0f0c 	teq	r4, ip
   b985e:	bf08      	it	eq
   b9860:	ea95 0f0c 	teqeq	r5, ip
   b9864:	f43f af3b 	beq.w	b96de <__aeabi_dmul+0x24a>
   b9868:	ea94 0f0c 	teq	r4, ip
   b986c:	d10a      	bne.n	b9884 <__aeabi_ddiv+0x19c>
   b986e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9872:	f47f af34 	bne.w	b96de <__aeabi_dmul+0x24a>
   b9876:	ea95 0f0c 	teq	r5, ip
   b987a:	f47f af25 	bne.w	b96c8 <__aeabi_dmul+0x234>
   b987e:	4610      	mov	r0, r2
   b9880:	4619      	mov	r1, r3
   b9882:	e72c      	b.n	b96de <__aeabi_dmul+0x24a>
   b9884:	ea95 0f0c 	teq	r5, ip
   b9888:	d106      	bne.n	b9898 <__aeabi_ddiv+0x1b0>
   b988a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b988e:	f43f aefd 	beq.w	b968c <__aeabi_dmul+0x1f8>
   b9892:	4610      	mov	r0, r2
   b9894:	4619      	mov	r1, r3
   b9896:	e722      	b.n	b96de <__aeabi_dmul+0x24a>
   b9898:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b989c:	bf18      	it	ne
   b989e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b98a2:	f47f aec5 	bne.w	b9630 <__aeabi_dmul+0x19c>
   b98a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b98aa:	f47f af0d 	bne.w	b96c8 <__aeabi_dmul+0x234>
   b98ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b98b2:	f47f aeeb 	bne.w	b968c <__aeabi_dmul+0x1f8>
   b98b6:	e712      	b.n	b96de <__aeabi_dmul+0x24a>

000b98b8 <__gedf2>:
   b98b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b98bc:	e006      	b.n	b98cc <__cmpdf2+0x4>
   b98be:	bf00      	nop

000b98c0 <__ledf2>:
   b98c0:	f04f 0c01 	mov.w	ip, #1
   b98c4:	e002      	b.n	b98cc <__cmpdf2+0x4>
   b98c6:	bf00      	nop

000b98c8 <__cmpdf2>:
   b98c8:	f04f 0c01 	mov.w	ip, #1
   b98cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   b98d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b98d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b98d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b98dc:	bf18      	it	ne
   b98de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b98e2:	d01b      	beq.n	b991c <__cmpdf2+0x54>
   b98e4:	b001      	add	sp, #4
   b98e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b98ea:	bf0c      	ite	eq
   b98ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b98f0:	ea91 0f03 	teqne	r1, r3
   b98f4:	bf02      	ittt	eq
   b98f6:	ea90 0f02 	teqeq	r0, r2
   b98fa:	2000      	moveq	r0, #0
   b98fc:	4770      	bxeq	lr
   b98fe:	f110 0f00 	cmn.w	r0, #0
   b9902:	ea91 0f03 	teq	r1, r3
   b9906:	bf58      	it	pl
   b9908:	4299      	cmppl	r1, r3
   b990a:	bf08      	it	eq
   b990c:	4290      	cmpeq	r0, r2
   b990e:	bf2c      	ite	cs
   b9910:	17d8      	asrcs	r0, r3, #31
   b9912:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b9916:	f040 0001 	orr.w	r0, r0, #1
   b991a:	4770      	bx	lr
   b991c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9920:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9924:	d102      	bne.n	b992c <__cmpdf2+0x64>
   b9926:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b992a:	d107      	bne.n	b993c <__cmpdf2+0x74>
   b992c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9930:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9934:	d1d6      	bne.n	b98e4 <__cmpdf2+0x1c>
   b9936:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b993a:	d0d3      	beq.n	b98e4 <__cmpdf2+0x1c>
   b993c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b9940:	4770      	bx	lr
   b9942:	bf00      	nop

000b9944 <__aeabi_cdrcmple>:
   b9944:	4684      	mov	ip, r0
   b9946:	4610      	mov	r0, r2
   b9948:	4662      	mov	r2, ip
   b994a:	468c      	mov	ip, r1
   b994c:	4619      	mov	r1, r3
   b994e:	4663      	mov	r3, ip
   b9950:	e000      	b.n	b9954 <__aeabi_cdcmpeq>
   b9952:	bf00      	nop

000b9954 <__aeabi_cdcmpeq>:
   b9954:	b501      	push	{r0, lr}
   b9956:	f7ff ffb7 	bl	b98c8 <__cmpdf2>
   b995a:	2800      	cmp	r0, #0
   b995c:	bf48      	it	mi
   b995e:	f110 0f00 	cmnmi.w	r0, #0
   b9962:	bd01      	pop	{r0, pc}

000b9964 <__aeabi_dcmpeq>:
   b9964:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9968:	f7ff fff4 	bl	b9954 <__aeabi_cdcmpeq>
   b996c:	bf0c      	ite	eq
   b996e:	2001      	moveq	r0, #1
   b9970:	2000      	movne	r0, #0
   b9972:	f85d fb08 	ldr.w	pc, [sp], #8
   b9976:	bf00      	nop

000b9978 <__aeabi_dcmplt>:
   b9978:	f84d ed08 	str.w	lr, [sp, #-8]!
   b997c:	f7ff ffea 	bl	b9954 <__aeabi_cdcmpeq>
   b9980:	bf34      	ite	cc
   b9982:	2001      	movcc	r0, #1
   b9984:	2000      	movcs	r0, #0
   b9986:	f85d fb08 	ldr.w	pc, [sp], #8
   b998a:	bf00      	nop

000b998c <__aeabi_dcmple>:
   b998c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9990:	f7ff ffe0 	bl	b9954 <__aeabi_cdcmpeq>
   b9994:	bf94      	ite	ls
   b9996:	2001      	movls	r0, #1
   b9998:	2000      	movhi	r0, #0
   b999a:	f85d fb08 	ldr.w	pc, [sp], #8
   b999e:	bf00      	nop

000b99a0 <__aeabi_dcmpge>:
   b99a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b99a4:	f7ff ffce 	bl	b9944 <__aeabi_cdrcmple>
   b99a8:	bf94      	ite	ls
   b99aa:	2001      	movls	r0, #1
   b99ac:	2000      	movhi	r0, #0
   b99ae:	f85d fb08 	ldr.w	pc, [sp], #8
   b99b2:	bf00      	nop

000b99b4 <__aeabi_dcmpgt>:
   b99b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b99b8:	f7ff ffc4 	bl	b9944 <__aeabi_cdrcmple>
   b99bc:	bf34      	ite	cc
   b99be:	2001      	movcc	r0, #1
   b99c0:	2000      	movcs	r0, #0
   b99c2:	f85d fb08 	ldr.w	pc, [sp], #8
   b99c6:	bf00      	nop

000b99c8 <__aeabi_dcmpun>:
   b99c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b99cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b99d0:	d102      	bne.n	b99d8 <__aeabi_dcmpun+0x10>
   b99d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b99d6:	d10a      	bne.n	b99ee <__aeabi_dcmpun+0x26>
   b99d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b99dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b99e0:	d102      	bne.n	b99e8 <__aeabi_dcmpun+0x20>
   b99e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b99e6:	d102      	bne.n	b99ee <__aeabi_dcmpun+0x26>
   b99e8:	f04f 0000 	mov.w	r0, #0
   b99ec:	4770      	bx	lr
   b99ee:	f04f 0001 	mov.w	r0, #1
   b99f2:	4770      	bx	lr

000b99f4 <__aeabi_d2iz>:
   b99f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b99f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b99fc:	d215      	bcs.n	b9a2a <__aeabi_d2iz+0x36>
   b99fe:	d511      	bpl.n	b9a24 <__aeabi_d2iz+0x30>
   b9a00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9a04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9a08:	d912      	bls.n	b9a30 <__aeabi_d2iz+0x3c>
   b9a0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b9a12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b9a16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9a1a:	fa23 f002 	lsr.w	r0, r3, r2
   b9a1e:	bf18      	it	ne
   b9a20:	4240      	negne	r0, r0
   b9a22:	4770      	bx	lr
   b9a24:	f04f 0000 	mov.w	r0, #0
   b9a28:	4770      	bx	lr
   b9a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b9a2e:	d105      	bne.n	b9a3c <__aeabi_d2iz+0x48>
   b9a30:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b9a34:	bf08      	it	eq
   b9a36:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b9a3a:	4770      	bx	lr
   b9a3c:	f04f 0000 	mov.w	r0, #0
   b9a40:	4770      	bx	lr
   b9a42:	bf00      	nop

000b9a44 <__aeabi_d2uiz>:
   b9a44:	004a      	lsls	r2, r1, #1
   b9a46:	d211      	bcs.n	b9a6c <__aeabi_d2uiz+0x28>
   b9a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b9a4c:	d211      	bcs.n	b9a72 <__aeabi_d2uiz+0x2e>
   b9a4e:	d50d      	bpl.n	b9a6c <__aeabi_d2uiz+0x28>
   b9a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9a58:	d40e      	bmi.n	b9a78 <__aeabi_d2uiz+0x34>
   b9a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b9a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b9a66:	fa23 f002 	lsr.w	r0, r3, r2
   b9a6a:	4770      	bx	lr
   b9a6c:	f04f 0000 	mov.w	r0, #0
   b9a70:	4770      	bx	lr
   b9a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b9a76:	d102      	bne.n	b9a7e <__aeabi_d2uiz+0x3a>
   b9a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9a7c:	4770      	bx	lr
   b9a7e:	f04f 0000 	mov.w	r0, #0
   b9a82:	4770      	bx	lr

000b9a84 <__aeabi_d2f>:
   b9a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b9a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b9a8c:	bf24      	itt	cs
   b9a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b9a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b9a96:	d90d      	bls.n	b9ab4 <__aeabi_d2f+0x30>
   b9a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b9a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b9aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b9aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b9aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b9aac:	bf08      	it	eq
   b9aae:	f020 0001 	biceq.w	r0, r0, #1
   b9ab2:	4770      	bx	lr
   b9ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b9ab8:	d121      	bne.n	b9afe <__aeabi_d2f+0x7a>
   b9aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b9abe:	bfbc      	itt	lt
   b9ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b9ac4:	4770      	bxlt	lr
   b9ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b9ace:	f1c2 0218 	rsb	r2, r2, #24
   b9ad2:	f1c2 0c20 	rsb	ip, r2, #32
   b9ad6:	fa10 f30c 	lsls.w	r3, r0, ip
   b9ada:	fa20 f002 	lsr.w	r0, r0, r2
   b9ade:	bf18      	it	ne
   b9ae0:	f040 0001 	orrne.w	r0, r0, #1
   b9ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b9aec:	fa03 fc0c 	lsl.w	ip, r3, ip
   b9af0:	ea40 000c 	orr.w	r0, r0, ip
   b9af4:	fa23 f302 	lsr.w	r3, r3, r2
   b9af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b9afc:	e7cc      	b.n	b9a98 <__aeabi_d2f+0x14>
   b9afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b9b02:	d107      	bne.n	b9b14 <__aeabi_d2f+0x90>
   b9b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b9b08:	bf1e      	ittt	ne
   b9b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b9b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b9b12:	4770      	bxne	lr
   b9b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b9b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b9b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b9b20:	4770      	bx	lr
   b9b22:	bf00      	nop

000b9b24 <__aeabi_frsub>:
   b9b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b9b28:	e002      	b.n	b9b30 <__addsf3>
   b9b2a:	bf00      	nop

000b9b2c <__aeabi_fsub>:
   b9b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b9b30 <__addsf3>:
   b9b30:	0042      	lsls	r2, r0, #1
   b9b32:	bf1f      	itttt	ne
   b9b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b9b38:	ea92 0f03 	teqne	r2, r3
   b9b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b9b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b9b44:	d06a      	beq.n	b9c1c <__addsf3+0xec>
   b9b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b9b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b9b4e:	bfc1      	itttt	gt
   b9b50:	18d2      	addgt	r2, r2, r3
   b9b52:	4041      	eorgt	r1, r0
   b9b54:	4048      	eorgt	r0, r1
   b9b56:	4041      	eorgt	r1, r0
   b9b58:	bfb8      	it	lt
   b9b5a:	425b      	neglt	r3, r3
   b9b5c:	2b19      	cmp	r3, #25
   b9b5e:	bf88      	it	hi
   b9b60:	4770      	bxhi	lr
   b9b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b9b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b9b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b9b6e:	bf18      	it	ne
   b9b70:	4240      	negne	r0, r0
   b9b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b9b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b9b7e:	bf18      	it	ne
   b9b80:	4249      	negne	r1, r1
   b9b82:	ea92 0f03 	teq	r2, r3
   b9b86:	d03f      	beq.n	b9c08 <__addsf3+0xd8>
   b9b88:	f1a2 0201 	sub.w	r2, r2, #1
   b9b8c:	fa41 fc03 	asr.w	ip, r1, r3
   b9b90:	eb10 000c 	adds.w	r0, r0, ip
   b9b94:	f1c3 0320 	rsb	r3, r3, #32
   b9b98:	fa01 f103 	lsl.w	r1, r1, r3
   b9b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b9ba0:	d502      	bpl.n	b9ba8 <__addsf3+0x78>
   b9ba2:	4249      	negs	r1, r1
   b9ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b9ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b9bac:	d313      	bcc.n	b9bd6 <__addsf3+0xa6>
   b9bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b9bb2:	d306      	bcc.n	b9bc2 <__addsf3+0x92>
   b9bb4:	0840      	lsrs	r0, r0, #1
   b9bb6:	ea4f 0131 	mov.w	r1, r1, rrx
   b9bba:	f102 0201 	add.w	r2, r2, #1
   b9bbe:	2afe      	cmp	r2, #254	; 0xfe
   b9bc0:	d251      	bcs.n	b9c66 <__addsf3+0x136>
   b9bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b9bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b9bca:	bf08      	it	eq
   b9bcc:	f020 0001 	biceq.w	r0, r0, #1
   b9bd0:	ea40 0003 	orr.w	r0, r0, r3
   b9bd4:	4770      	bx	lr
   b9bd6:	0049      	lsls	r1, r1, #1
   b9bd8:	eb40 0000 	adc.w	r0, r0, r0
   b9bdc:	3a01      	subs	r2, #1
   b9bde:	bf28      	it	cs
   b9be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b9be4:	d2ed      	bcs.n	b9bc2 <__addsf3+0x92>
   b9be6:	fab0 fc80 	clz	ip, r0
   b9bea:	f1ac 0c08 	sub.w	ip, ip, #8
   b9bee:	ebb2 020c 	subs.w	r2, r2, ip
   b9bf2:	fa00 f00c 	lsl.w	r0, r0, ip
   b9bf6:	bfaa      	itet	ge
   b9bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b9bfc:	4252      	neglt	r2, r2
   b9bfe:	4318      	orrge	r0, r3
   b9c00:	bfbc      	itt	lt
   b9c02:	40d0      	lsrlt	r0, r2
   b9c04:	4318      	orrlt	r0, r3
   b9c06:	4770      	bx	lr
   b9c08:	f092 0f00 	teq	r2, #0
   b9c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b9c10:	bf06      	itte	eq
   b9c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b9c16:	3201      	addeq	r2, #1
   b9c18:	3b01      	subne	r3, #1
   b9c1a:	e7b5      	b.n	b9b88 <__addsf3+0x58>
   b9c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b9c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b9c24:	bf18      	it	ne
   b9c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b9c2a:	d021      	beq.n	b9c70 <__addsf3+0x140>
   b9c2c:	ea92 0f03 	teq	r2, r3
   b9c30:	d004      	beq.n	b9c3c <__addsf3+0x10c>
   b9c32:	f092 0f00 	teq	r2, #0
   b9c36:	bf08      	it	eq
   b9c38:	4608      	moveq	r0, r1
   b9c3a:	4770      	bx	lr
   b9c3c:	ea90 0f01 	teq	r0, r1
   b9c40:	bf1c      	itt	ne
   b9c42:	2000      	movne	r0, #0
   b9c44:	4770      	bxne	lr
   b9c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b9c4a:	d104      	bne.n	b9c56 <__addsf3+0x126>
   b9c4c:	0040      	lsls	r0, r0, #1
   b9c4e:	bf28      	it	cs
   b9c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b9c54:	4770      	bx	lr
   b9c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b9c5a:	bf3c      	itt	cc
   b9c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b9c60:	4770      	bxcc	lr
   b9c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b9c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b9c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b9c6e:	4770      	bx	lr
   b9c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b9c74:	bf16      	itet	ne
   b9c76:	4608      	movne	r0, r1
   b9c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b9c7c:	4601      	movne	r1, r0
   b9c7e:	0242      	lsls	r2, r0, #9
   b9c80:	bf06      	itte	eq
   b9c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b9c86:	ea90 0f01 	teqeq	r0, r1
   b9c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b9c8e:	4770      	bx	lr

000b9c90 <__aeabi_ui2f>:
   b9c90:	f04f 0300 	mov.w	r3, #0
   b9c94:	e004      	b.n	b9ca0 <__aeabi_i2f+0x8>
   b9c96:	bf00      	nop

000b9c98 <__aeabi_i2f>:
   b9c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b9c9c:	bf48      	it	mi
   b9c9e:	4240      	negmi	r0, r0
   b9ca0:	ea5f 0c00 	movs.w	ip, r0
   b9ca4:	bf08      	it	eq
   b9ca6:	4770      	bxeq	lr
   b9ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b9cac:	4601      	mov	r1, r0
   b9cae:	f04f 0000 	mov.w	r0, #0
   b9cb2:	e01c      	b.n	b9cee <__aeabi_l2f+0x2a>

000b9cb4 <__aeabi_ul2f>:
   b9cb4:	ea50 0201 	orrs.w	r2, r0, r1
   b9cb8:	bf08      	it	eq
   b9cba:	4770      	bxeq	lr
   b9cbc:	f04f 0300 	mov.w	r3, #0
   b9cc0:	e00a      	b.n	b9cd8 <__aeabi_l2f+0x14>
   b9cc2:	bf00      	nop

000b9cc4 <__aeabi_l2f>:
   b9cc4:	ea50 0201 	orrs.w	r2, r0, r1
   b9cc8:	bf08      	it	eq
   b9cca:	4770      	bxeq	lr
   b9ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b9cd0:	d502      	bpl.n	b9cd8 <__aeabi_l2f+0x14>
   b9cd2:	4240      	negs	r0, r0
   b9cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9cd8:	ea5f 0c01 	movs.w	ip, r1
   b9cdc:	bf02      	ittt	eq
   b9cde:	4684      	moveq	ip, r0
   b9ce0:	4601      	moveq	r1, r0
   b9ce2:	2000      	moveq	r0, #0
   b9ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b9ce8:	bf08      	it	eq
   b9cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b9cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b9cf2:	fabc f28c 	clz	r2, ip
   b9cf6:	3a08      	subs	r2, #8
   b9cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b9cfc:	db10      	blt.n	b9d20 <__aeabi_l2f+0x5c>
   b9cfe:	fa01 fc02 	lsl.w	ip, r1, r2
   b9d02:	4463      	add	r3, ip
   b9d04:	fa00 fc02 	lsl.w	ip, r0, r2
   b9d08:	f1c2 0220 	rsb	r2, r2, #32
   b9d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9d10:	fa20 f202 	lsr.w	r2, r0, r2
   b9d14:	eb43 0002 	adc.w	r0, r3, r2
   b9d18:	bf08      	it	eq
   b9d1a:	f020 0001 	biceq.w	r0, r0, #1
   b9d1e:	4770      	bx	lr
   b9d20:	f102 0220 	add.w	r2, r2, #32
   b9d24:	fa01 fc02 	lsl.w	ip, r1, r2
   b9d28:	f1c2 0220 	rsb	r2, r2, #32
   b9d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b9d30:	fa21 f202 	lsr.w	r2, r1, r2
   b9d34:	eb43 0002 	adc.w	r0, r3, r2
   b9d38:	bf08      	it	eq
   b9d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b9d3e:	4770      	bx	lr

000b9d40 <__aeabi_ldivmod>:
   b9d40:	b97b      	cbnz	r3, b9d62 <__aeabi_ldivmod+0x22>
   b9d42:	b972      	cbnz	r2, b9d62 <__aeabi_ldivmod+0x22>
   b9d44:	2900      	cmp	r1, #0
   b9d46:	bfbe      	ittt	lt
   b9d48:	2000      	movlt	r0, #0
   b9d4a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b9d4e:	e006      	blt.n	b9d5e <__aeabi_ldivmod+0x1e>
   b9d50:	bf08      	it	eq
   b9d52:	2800      	cmpeq	r0, #0
   b9d54:	bf1c      	itt	ne
   b9d56:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b9d5a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b9d5e:	f000 b9c5 	b.w	ba0ec <__aeabi_idiv0>
   b9d62:	f1ad 0c08 	sub.w	ip, sp, #8
   b9d66:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b9d6a:	2900      	cmp	r1, #0
   b9d6c:	db09      	blt.n	b9d82 <__aeabi_ldivmod+0x42>
   b9d6e:	2b00      	cmp	r3, #0
   b9d70:	db1a      	blt.n	b9da8 <__aeabi_ldivmod+0x68>
   b9d72:	f000 f853 	bl	b9e1c <__udivmoddi4>
   b9d76:	f8dd e004 	ldr.w	lr, [sp, #4]
   b9d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9d7e:	b004      	add	sp, #16
   b9d80:	4770      	bx	lr
   b9d82:	4240      	negs	r0, r0
   b9d84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9d88:	2b00      	cmp	r3, #0
   b9d8a:	db1b      	blt.n	b9dc4 <__aeabi_ldivmod+0x84>
   b9d8c:	f000 f846 	bl	b9e1c <__udivmoddi4>
   b9d90:	f8dd e004 	ldr.w	lr, [sp, #4]
   b9d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9d98:	b004      	add	sp, #16
   b9d9a:	4240      	negs	r0, r0
   b9d9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9da0:	4252      	negs	r2, r2
   b9da2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9da6:	4770      	bx	lr
   b9da8:	4252      	negs	r2, r2
   b9daa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9dae:	f000 f835 	bl	b9e1c <__udivmoddi4>
   b9db2:	f8dd e004 	ldr.w	lr, [sp, #4]
   b9db6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9dba:	b004      	add	sp, #16
   b9dbc:	4240      	negs	r0, r0
   b9dbe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9dc2:	4770      	bx	lr
   b9dc4:	4252      	negs	r2, r2
   b9dc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9dca:	f000 f827 	bl	b9e1c <__udivmoddi4>
   b9dce:	f8dd e004 	ldr.w	lr, [sp, #4]
   b9dd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9dd6:	b004      	add	sp, #16
   b9dd8:	4252      	negs	r2, r2
   b9dda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9dde:	4770      	bx	lr

000b9de0 <__aeabi_d2ulz>:
   b9de0:	b5d0      	push	{r4, r6, r7, lr}
   b9de2:	4b0c      	ldr	r3, [pc, #48]	; (b9e14 <__aeabi_d2ulz+0x34>)
   b9de4:	2200      	movs	r2, #0
   b9de6:	4606      	mov	r6, r0
   b9de8:	460f      	mov	r7, r1
   b9dea:	f7ff fb53 	bl	b9494 <__aeabi_dmul>
   b9dee:	f7ff fe29 	bl	b9a44 <__aeabi_d2uiz>
   b9df2:	4604      	mov	r4, r0
   b9df4:	f7ff fad4 	bl	b93a0 <__aeabi_ui2d>
   b9df8:	4b07      	ldr	r3, [pc, #28]	; (b9e18 <__aeabi_d2ulz+0x38>)
   b9dfa:	2200      	movs	r2, #0
   b9dfc:	f7ff fb4a 	bl	b9494 <__aeabi_dmul>
   b9e00:	4602      	mov	r2, r0
   b9e02:	460b      	mov	r3, r1
   b9e04:	4630      	mov	r0, r6
   b9e06:	4639      	mov	r1, r7
   b9e08:	f7ff f98c 	bl	b9124 <__aeabi_dsub>
   b9e0c:	f7ff fe1a 	bl	b9a44 <__aeabi_d2uiz>
   b9e10:	4621      	mov	r1, r4
   b9e12:	bdd0      	pop	{r4, r6, r7, pc}
   b9e14:	3df00000 	.word	0x3df00000
   b9e18:	41f00000 	.word	0x41f00000

000b9e1c <__udivmoddi4>:
   b9e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9e20:	9d08      	ldr	r5, [sp, #32]
   b9e22:	4604      	mov	r4, r0
   b9e24:	468e      	mov	lr, r1
   b9e26:	2b00      	cmp	r3, #0
   b9e28:	d14d      	bne.n	b9ec6 <__udivmoddi4+0xaa>
   b9e2a:	428a      	cmp	r2, r1
   b9e2c:	4694      	mov	ip, r2
   b9e2e:	d969      	bls.n	b9f04 <__udivmoddi4+0xe8>
   b9e30:	fab2 f282 	clz	r2, r2
   b9e34:	b152      	cbz	r2, b9e4c <__udivmoddi4+0x30>
   b9e36:	fa01 f302 	lsl.w	r3, r1, r2
   b9e3a:	f1c2 0120 	rsb	r1, r2, #32
   b9e3e:	fa20 f101 	lsr.w	r1, r0, r1
   b9e42:	fa0c fc02 	lsl.w	ip, ip, r2
   b9e46:	ea41 0e03 	orr.w	lr, r1, r3
   b9e4a:	4094      	lsls	r4, r2
   b9e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b9e50:	0c21      	lsrs	r1, r4, #16
   b9e52:	fbbe f6f8 	udiv	r6, lr, r8
   b9e56:	fa1f f78c 	uxth.w	r7, ip
   b9e5a:	fb08 e316 	mls	r3, r8, r6, lr
   b9e5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b9e62:	fb06 f107 	mul.w	r1, r6, r7
   b9e66:	4299      	cmp	r1, r3
   b9e68:	d90a      	bls.n	b9e80 <__udivmoddi4+0x64>
   b9e6a:	eb1c 0303 	adds.w	r3, ip, r3
   b9e6e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b9e72:	f080 811f 	bcs.w	ba0b4 <__udivmoddi4+0x298>
   b9e76:	4299      	cmp	r1, r3
   b9e78:	f240 811c 	bls.w	ba0b4 <__udivmoddi4+0x298>
   b9e7c:	3e02      	subs	r6, #2
   b9e7e:	4463      	add	r3, ip
   b9e80:	1a5b      	subs	r3, r3, r1
   b9e82:	b2a4      	uxth	r4, r4
   b9e84:	fbb3 f0f8 	udiv	r0, r3, r8
   b9e88:	fb08 3310 	mls	r3, r8, r0, r3
   b9e8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b9e90:	fb00 f707 	mul.w	r7, r0, r7
   b9e94:	42a7      	cmp	r7, r4
   b9e96:	d90a      	bls.n	b9eae <__udivmoddi4+0x92>
   b9e98:	eb1c 0404 	adds.w	r4, ip, r4
   b9e9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9ea0:	f080 810a 	bcs.w	ba0b8 <__udivmoddi4+0x29c>
   b9ea4:	42a7      	cmp	r7, r4
   b9ea6:	f240 8107 	bls.w	ba0b8 <__udivmoddi4+0x29c>
   b9eaa:	4464      	add	r4, ip
   b9eac:	3802      	subs	r0, #2
   b9eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b9eb2:	1be4      	subs	r4, r4, r7
   b9eb4:	2600      	movs	r6, #0
   b9eb6:	b11d      	cbz	r5, b9ec0 <__udivmoddi4+0xa4>
   b9eb8:	40d4      	lsrs	r4, r2
   b9eba:	2300      	movs	r3, #0
   b9ebc:	e9c5 4300 	strd	r4, r3, [r5]
   b9ec0:	4631      	mov	r1, r6
   b9ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9ec6:	428b      	cmp	r3, r1
   b9ec8:	d909      	bls.n	b9ede <__udivmoddi4+0xc2>
   b9eca:	2d00      	cmp	r5, #0
   b9ecc:	f000 80ef 	beq.w	ba0ae <__udivmoddi4+0x292>
   b9ed0:	2600      	movs	r6, #0
   b9ed2:	e9c5 0100 	strd	r0, r1, [r5]
   b9ed6:	4630      	mov	r0, r6
   b9ed8:	4631      	mov	r1, r6
   b9eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9ede:	fab3 f683 	clz	r6, r3
   b9ee2:	2e00      	cmp	r6, #0
   b9ee4:	d14a      	bne.n	b9f7c <__udivmoddi4+0x160>
   b9ee6:	428b      	cmp	r3, r1
   b9ee8:	d302      	bcc.n	b9ef0 <__udivmoddi4+0xd4>
   b9eea:	4282      	cmp	r2, r0
   b9eec:	f200 80f9 	bhi.w	ba0e2 <__udivmoddi4+0x2c6>
   b9ef0:	1a84      	subs	r4, r0, r2
   b9ef2:	eb61 0303 	sbc.w	r3, r1, r3
   b9ef6:	2001      	movs	r0, #1
   b9ef8:	469e      	mov	lr, r3
   b9efa:	2d00      	cmp	r5, #0
   b9efc:	d0e0      	beq.n	b9ec0 <__udivmoddi4+0xa4>
   b9efe:	e9c5 4e00 	strd	r4, lr, [r5]
   b9f02:	e7dd      	b.n	b9ec0 <__udivmoddi4+0xa4>
   b9f04:	b902      	cbnz	r2, b9f08 <__udivmoddi4+0xec>
   b9f06:	deff      	udf	#255	; 0xff
   b9f08:	fab2 f282 	clz	r2, r2
   b9f0c:	2a00      	cmp	r2, #0
   b9f0e:	f040 8092 	bne.w	ba036 <__udivmoddi4+0x21a>
   b9f12:	eba1 010c 	sub.w	r1, r1, ip
   b9f16:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b9f1a:	fa1f fe8c 	uxth.w	lr, ip
   b9f1e:	2601      	movs	r6, #1
   b9f20:	0c20      	lsrs	r0, r4, #16
   b9f22:	fbb1 f3f7 	udiv	r3, r1, r7
   b9f26:	fb07 1113 	mls	r1, r7, r3, r1
   b9f2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b9f2e:	fb0e f003 	mul.w	r0, lr, r3
   b9f32:	4288      	cmp	r0, r1
   b9f34:	d908      	bls.n	b9f48 <__udivmoddi4+0x12c>
   b9f36:	eb1c 0101 	adds.w	r1, ip, r1
   b9f3a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b9f3e:	d202      	bcs.n	b9f46 <__udivmoddi4+0x12a>
   b9f40:	4288      	cmp	r0, r1
   b9f42:	f200 80cb 	bhi.w	ba0dc <__udivmoddi4+0x2c0>
   b9f46:	4643      	mov	r3, r8
   b9f48:	1a09      	subs	r1, r1, r0
   b9f4a:	b2a4      	uxth	r4, r4
   b9f4c:	fbb1 f0f7 	udiv	r0, r1, r7
   b9f50:	fb07 1110 	mls	r1, r7, r0, r1
   b9f54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b9f58:	fb0e fe00 	mul.w	lr, lr, r0
   b9f5c:	45a6      	cmp	lr, r4
   b9f5e:	d908      	bls.n	b9f72 <__udivmoddi4+0x156>
   b9f60:	eb1c 0404 	adds.w	r4, ip, r4
   b9f64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b9f68:	d202      	bcs.n	b9f70 <__udivmoddi4+0x154>
   b9f6a:	45a6      	cmp	lr, r4
   b9f6c:	f200 80bb 	bhi.w	ba0e6 <__udivmoddi4+0x2ca>
   b9f70:	4608      	mov	r0, r1
   b9f72:	eba4 040e 	sub.w	r4, r4, lr
   b9f76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b9f7a:	e79c      	b.n	b9eb6 <__udivmoddi4+0x9a>
   b9f7c:	f1c6 0720 	rsb	r7, r6, #32
   b9f80:	40b3      	lsls	r3, r6
   b9f82:	fa22 fc07 	lsr.w	ip, r2, r7
   b9f86:	ea4c 0c03 	orr.w	ip, ip, r3
   b9f8a:	fa20 f407 	lsr.w	r4, r0, r7
   b9f8e:	fa01 f306 	lsl.w	r3, r1, r6
   b9f92:	431c      	orrs	r4, r3
   b9f94:	40f9      	lsrs	r1, r7
   b9f96:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b9f9a:	fa00 f306 	lsl.w	r3, r0, r6
   b9f9e:	fbb1 f8f9 	udiv	r8, r1, r9
   b9fa2:	0c20      	lsrs	r0, r4, #16
   b9fa4:	fa1f fe8c 	uxth.w	lr, ip
   b9fa8:	fb09 1118 	mls	r1, r9, r8, r1
   b9fac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b9fb0:	fb08 f00e 	mul.w	r0, r8, lr
   b9fb4:	4288      	cmp	r0, r1
   b9fb6:	fa02 f206 	lsl.w	r2, r2, r6
   b9fba:	d90b      	bls.n	b9fd4 <__udivmoddi4+0x1b8>
   b9fbc:	eb1c 0101 	adds.w	r1, ip, r1
   b9fc0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b9fc4:	f080 8088 	bcs.w	ba0d8 <__udivmoddi4+0x2bc>
   b9fc8:	4288      	cmp	r0, r1
   b9fca:	f240 8085 	bls.w	ba0d8 <__udivmoddi4+0x2bc>
   b9fce:	f1a8 0802 	sub.w	r8, r8, #2
   b9fd2:	4461      	add	r1, ip
   b9fd4:	1a09      	subs	r1, r1, r0
   b9fd6:	b2a4      	uxth	r4, r4
   b9fd8:	fbb1 f0f9 	udiv	r0, r1, r9
   b9fdc:	fb09 1110 	mls	r1, r9, r0, r1
   b9fe0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b9fe4:	fb00 fe0e 	mul.w	lr, r0, lr
   b9fe8:	458e      	cmp	lr, r1
   b9fea:	d908      	bls.n	b9ffe <__udivmoddi4+0x1e2>
   b9fec:	eb1c 0101 	adds.w	r1, ip, r1
   b9ff0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b9ff4:	d26c      	bcs.n	ba0d0 <__udivmoddi4+0x2b4>
   b9ff6:	458e      	cmp	lr, r1
   b9ff8:	d96a      	bls.n	ba0d0 <__udivmoddi4+0x2b4>
   b9ffa:	3802      	subs	r0, #2
   b9ffc:	4461      	add	r1, ip
   b9ffe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   ba002:	fba0 9402 	umull	r9, r4, r0, r2
   ba006:	eba1 010e 	sub.w	r1, r1, lr
   ba00a:	42a1      	cmp	r1, r4
   ba00c:	46c8      	mov	r8, r9
   ba00e:	46a6      	mov	lr, r4
   ba010:	d356      	bcc.n	ba0c0 <__udivmoddi4+0x2a4>
   ba012:	d053      	beq.n	ba0bc <__udivmoddi4+0x2a0>
   ba014:	b15d      	cbz	r5, ba02e <__udivmoddi4+0x212>
   ba016:	ebb3 0208 	subs.w	r2, r3, r8
   ba01a:	eb61 010e 	sbc.w	r1, r1, lr
   ba01e:	fa01 f707 	lsl.w	r7, r1, r7
   ba022:	fa22 f306 	lsr.w	r3, r2, r6
   ba026:	40f1      	lsrs	r1, r6
   ba028:	431f      	orrs	r7, r3
   ba02a:	e9c5 7100 	strd	r7, r1, [r5]
   ba02e:	2600      	movs	r6, #0
   ba030:	4631      	mov	r1, r6
   ba032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba036:	f1c2 0320 	rsb	r3, r2, #32
   ba03a:	40d8      	lsrs	r0, r3
   ba03c:	fa0c fc02 	lsl.w	ip, ip, r2
   ba040:	fa21 f303 	lsr.w	r3, r1, r3
   ba044:	4091      	lsls	r1, r2
   ba046:	4301      	orrs	r1, r0
   ba048:	ea4f 471c 	mov.w	r7, ip, lsr #16
   ba04c:	fa1f fe8c 	uxth.w	lr, ip
   ba050:	fbb3 f0f7 	udiv	r0, r3, r7
   ba054:	fb07 3610 	mls	r6, r7, r0, r3
   ba058:	0c0b      	lsrs	r3, r1, #16
   ba05a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   ba05e:	fb00 f60e 	mul.w	r6, r0, lr
   ba062:	429e      	cmp	r6, r3
   ba064:	fa04 f402 	lsl.w	r4, r4, r2
   ba068:	d908      	bls.n	ba07c <__udivmoddi4+0x260>
   ba06a:	eb1c 0303 	adds.w	r3, ip, r3
   ba06e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   ba072:	d22f      	bcs.n	ba0d4 <__udivmoddi4+0x2b8>
   ba074:	429e      	cmp	r6, r3
   ba076:	d92d      	bls.n	ba0d4 <__udivmoddi4+0x2b8>
   ba078:	3802      	subs	r0, #2
   ba07a:	4463      	add	r3, ip
   ba07c:	1b9b      	subs	r3, r3, r6
   ba07e:	b289      	uxth	r1, r1
   ba080:	fbb3 f6f7 	udiv	r6, r3, r7
   ba084:	fb07 3316 	mls	r3, r7, r6, r3
   ba088:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   ba08c:	fb06 f30e 	mul.w	r3, r6, lr
   ba090:	428b      	cmp	r3, r1
   ba092:	d908      	bls.n	ba0a6 <__udivmoddi4+0x28a>
   ba094:	eb1c 0101 	adds.w	r1, ip, r1
   ba098:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   ba09c:	d216      	bcs.n	ba0cc <__udivmoddi4+0x2b0>
   ba09e:	428b      	cmp	r3, r1
   ba0a0:	d914      	bls.n	ba0cc <__udivmoddi4+0x2b0>
   ba0a2:	3e02      	subs	r6, #2
   ba0a4:	4461      	add	r1, ip
   ba0a6:	1ac9      	subs	r1, r1, r3
   ba0a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   ba0ac:	e738      	b.n	b9f20 <__udivmoddi4+0x104>
   ba0ae:	462e      	mov	r6, r5
   ba0b0:	4628      	mov	r0, r5
   ba0b2:	e705      	b.n	b9ec0 <__udivmoddi4+0xa4>
   ba0b4:	4606      	mov	r6, r0
   ba0b6:	e6e3      	b.n	b9e80 <__udivmoddi4+0x64>
   ba0b8:	4618      	mov	r0, r3
   ba0ba:	e6f8      	b.n	b9eae <__udivmoddi4+0x92>
   ba0bc:	454b      	cmp	r3, r9
   ba0be:	d2a9      	bcs.n	ba014 <__udivmoddi4+0x1f8>
   ba0c0:	ebb9 0802 	subs.w	r8, r9, r2
   ba0c4:	eb64 0e0c 	sbc.w	lr, r4, ip
   ba0c8:	3801      	subs	r0, #1
   ba0ca:	e7a3      	b.n	ba014 <__udivmoddi4+0x1f8>
   ba0cc:	4646      	mov	r6, r8
   ba0ce:	e7ea      	b.n	ba0a6 <__udivmoddi4+0x28a>
   ba0d0:	4620      	mov	r0, r4
   ba0d2:	e794      	b.n	b9ffe <__udivmoddi4+0x1e2>
   ba0d4:	4640      	mov	r0, r8
   ba0d6:	e7d1      	b.n	ba07c <__udivmoddi4+0x260>
   ba0d8:	46d0      	mov	r8, sl
   ba0da:	e77b      	b.n	b9fd4 <__udivmoddi4+0x1b8>
   ba0dc:	3b02      	subs	r3, #2
   ba0de:	4461      	add	r1, ip
   ba0e0:	e732      	b.n	b9f48 <__udivmoddi4+0x12c>
   ba0e2:	4630      	mov	r0, r6
   ba0e4:	e709      	b.n	b9efa <__udivmoddi4+0xde>
   ba0e6:	4464      	add	r4, ip
   ba0e8:	3802      	subs	r0, #2
   ba0ea:	e742      	b.n	b9f72 <__udivmoddi4+0x156>

000ba0ec <__aeabi_idiv0>:
   ba0ec:	4770      	bx	lr
   ba0ee:	bf00      	nop

000ba0f0 <atexit>:
   ba0f0:	2300      	movs	r3, #0
   ba0f2:	4601      	mov	r1, r0
   ba0f4:	461a      	mov	r2, r3
   ba0f6:	4618      	mov	r0, r3
   ba0f8:	f000 bf08 	b.w	baf0c <__register_exitproc>

000ba0fc <atof>:
   ba0fc:	2100      	movs	r1, #0
   ba0fe:	f000 bef9 	b.w	baef4 <strtod>

000ba102 <ldiv>:
   ba102:	2900      	cmp	r1, #0
   ba104:	b510      	push	{r4, lr}
   ba106:	fb91 f4f2 	sdiv	r4, r1, r2
   ba10a:	fb02 1314 	mls	r3, r2, r4, r1
   ba10e:	db06      	blt.n	ba11e <ldiv+0x1c>
   ba110:	2b00      	cmp	r3, #0
   ba112:	da01      	bge.n	ba118 <ldiv+0x16>
   ba114:	3401      	adds	r4, #1
   ba116:	1a9b      	subs	r3, r3, r2
   ba118:	e9c0 4300 	strd	r4, r3, [r0]
   ba11c:	bd10      	pop	{r4, pc}
   ba11e:	2b00      	cmp	r3, #0
   ba120:	bfc4      	itt	gt
   ba122:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   ba126:	189b      	addgt	r3, r3, r2
   ba128:	e7f6      	b.n	ba118 <ldiv+0x16>

000ba12a <memcpy>:
   ba12a:	440a      	add	r2, r1
   ba12c:	4291      	cmp	r1, r2
   ba12e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   ba132:	d100      	bne.n	ba136 <memcpy+0xc>
   ba134:	4770      	bx	lr
   ba136:	b510      	push	{r4, lr}
   ba138:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba13c:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba140:	4291      	cmp	r1, r2
   ba142:	d1f9      	bne.n	ba138 <memcpy+0xe>
   ba144:	bd10      	pop	{r4, pc}

000ba146 <memmove>:
   ba146:	4288      	cmp	r0, r1
   ba148:	b510      	push	{r4, lr}
   ba14a:	eb01 0402 	add.w	r4, r1, r2
   ba14e:	d902      	bls.n	ba156 <memmove+0x10>
   ba150:	4284      	cmp	r4, r0
   ba152:	4623      	mov	r3, r4
   ba154:	d807      	bhi.n	ba166 <memmove+0x20>
   ba156:	1e43      	subs	r3, r0, #1
   ba158:	42a1      	cmp	r1, r4
   ba15a:	d008      	beq.n	ba16e <memmove+0x28>
   ba15c:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba160:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba164:	e7f8      	b.n	ba158 <memmove+0x12>
   ba166:	4402      	add	r2, r0
   ba168:	4601      	mov	r1, r0
   ba16a:	428a      	cmp	r2, r1
   ba16c:	d100      	bne.n	ba170 <memmove+0x2a>
   ba16e:	bd10      	pop	{r4, pc}
   ba170:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   ba174:	f802 4d01 	strb.w	r4, [r2, #-1]!
   ba178:	e7f7      	b.n	ba16a <memmove+0x24>

000ba17a <memset>:
   ba17a:	4402      	add	r2, r0
   ba17c:	4603      	mov	r3, r0
   ba17e:	4293      	cmp	r3, r2
   ba180:	d100      	bne.n	ba184 <memset+0xa>
   ba182:	4770      	bx	lr
   ba184:	f803 1b01 	strb.w	r1, [r3], #1
   ba188:	e7f9      	b.n	ba17e <memset+0x4>
	...

000ba18c <srand>:
   ba18c:	b538      	push	{r3, r4, r5, lr}
   ba18e:	4b10      	ldr	r3, [pc, #64]	; (ba1d0 <srand+0x44>)
   ba190:	681d      	ldr	r5, [r3, #0]
   ba192:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba194:	4604      	mov	r4, r0
   ba196:	b9b3      	cbnz	r3, ba1c6 <srand+0x3a>
   ba198:	2018      	movs	r0, #24
   ba19a:	f7fc fb9f 	bl	b68dc <malloc>
   ba19e:	4602      	mov	r2, r0
   ba1a0:	63a8      	str	r0, [r5, #56]	; 0x38
   ba1a2:	b920      	cbnz	r0, ba1ae <srand+0x22>
   ba1a4:	4b0b      	ldr	r3, [pc, #44]	; (ba1d4 <srand+0x48>)
   ba1a6:	480c      	ldr	r0, [pc, #48]	; (ba1d8 <srand+0x4c>)
   ba1a8:	2142      	movs	r1, #66	; 0x42
   ba1aa:	f7fc fbc7 	bl	b693c <__assert_func>
   ba1ae:	490b      	ldr	r1, [pc, #44]	; (ba1dc <srand+0x50>)
   ba1b0:	4b0b      	ldr	r3, [pc, #44]	; (ba1e0 <srand+0x54>)
   ba1b2:	e9c0 1300 	strd	r1, r3, [r0]
   ba1b6:	4b0b      	ldr	r3, [pc, #44]	; (ba1e4 <srand+0x58>)
   ba1b8:	6083      	str	r3, [r0, #8]
   ba1ba:	230b      	movs	r3, #11
   ba1bc:	8183      	strh	r3, [r0, #12]
   ba1be:	2100      	movs	r1, #0
   ba1c0:	2001      	movs	r0, #1
   ba1c2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba1c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba1c8:	2200      	movs	r2, #0
   ba1ca:	611c      	str	r4, [r3, #16]
   ba1cc:	615a      	str	r2, [r3, #20]
   ba1ce:	bd38      	pop	{r3, r4, r5, pc}
   ba1d0:	2003e2b0 	.word	0x2003e2b0
   ba1d4:	000bced8 	.word	0x000bced8
   ba1d8:	000bceef 	.word	0x000bceef
   ba1dc:	abcd330e 	.word	0xabcd330e
   ba1e0:	e66d1234 	.word	0xe66d1234
   ba1e4:	0005deec 	.word	0x0005deec

000ba1e8 <strcmp>:
   ba1e8:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba1ec:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba1f0:	2a01      	cmp	r2, #1
   ba1f2:	bf28      	it	cs
   ba1f4:	429a      	cmpcs	r2, r3
   ba1f6:	d0f7      	beq.n	ba1e8 <strcmp>
   ba1f8:	1ad0      	subs	r0, r2, r3
   ba1fa:	4770      	bx	lr

000ba1fc <strcpy>:
   ba1fc:	4603      	mov	r3, r0
   ba1fe:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba202:	f803 2b01 	strb.w	r2, [r3], #1
   ba206:	2a00      	cmp	r2, #0
   ba208:	d1f9      	bne.n	ba1fe <strcpy+0x2>
   ba20a:	4770      	bx	lr

000ba20c <strlen>:
   ba20c:	4603      	mov	r3, r0
   ba20e:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba212:	2a00      	cmp	r2, #0
   ba214:	d1fb      	bne.n	ba20e <strlen+0x2>
   ba216:	1a18      	subs	r0, r3, r0
   ba218:	3801      	subs	r0, #1
   ba21a:	4770      	bx	lr

000ba21c <strncasecmp>:
   ba21c:	b570      	push	{r4, r5, r6, lr}
   ba21e:	4e0f      	ldr	r6, [pc, #60]	; (ba25c <strncasecmp+0x40>)
   ba220:	4604      	mov	r4, r0
   ba222:	440a      	add	r2, r1
   ba224:	428a      	cmp	r2, r1
   ba226:	d101      	bne.n	ba22c <strncasecmp+0x10>
   ba228:	2000      	movs	r0, #0
   ba22a:	e013      	b.n	ba254 <strncasecmp+0x38>
   ba22c:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba230:	5d98      	ldrb	r0, [r3, r6]
   ba232:	f000 0003 	and.w	r0, r0, #3
   ba236:	2801      	cmp	r0, #1
   ba238:	f811 0b01 	ldrb.w	r0, [r1], #1
   ba23c:	5c35      	ldrb	r5, [r6, r0]
   ba23e:	f005 0503 	and.w	r5, r5, #3
   ba242:	bf08      	it	eq
   ba244:	3320      	addeq	r3, #32
   ba246:	2d01      	cmp	r5, #1
   ba248:	bf08      	it	eq
   ba24a:	3020      	addeq	r0, #32
   ba24c:	1a1b      	subs	r3, r3, r0
   ba24e:	d102      	bne.n	ba256 <strncasecmp+0x3a>
   ba250:	2800      	cmp	r0, #0
   ba252:	d1e7      	bne.n	ba224 <strncasecmp+0x8>
   ba254:	bd70      	pop	{r4, r5, r6, pc}
   ba256:	4618      	mov	r0, r3
   ba258:	e7fc      	b.n	ba254 <strncasecmp+0x38>
   ba25a:	bf00      	nop
   ba25c:	000bcfa9 	.word	0x000bcfa9

000ba260 <strncmp>:
   ba260:	b510      	push	{r4, lr}
   ba262:	b17a      	cbz	r2, ba284 <strncmp+0x24>
   ba264:	4603      	mov	r3, r0
   ba266:	3901      	subs	r1, #1
   ba268:	1884      	adds	r4, r0, r2
   ba26a:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba26e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   ba272:	4290      	cmp	r0, r2
   ba274:	d101      	bne.n	ba27a <strncmp+0x1a>
   ba276:	42a3      	cmp	r3, r4
   ba278:	d101      	bne.n	ba27e <strncmp+0x1e>
   ba27a:	1a80      	subs	r0, r0, r2
   ba27c:	bd10      	pop	{r4, pc}
   ba27e:	2800      	cmp	r0, #0
   ba280:	d1f3      	bne.n	ba26a <strncmp+0xa>
   ba282:	e7fa      	b.n	ba27a <strncmp+0x1a>
   ba284:	4610      	mov	r0, r2
   ba286:	e7f9      	b.n	ba27c <strncmp+0x1c>

000ba288 <strncpy>:
   ba288:	b510      	push	{r4, lr}
   ba28a:	3901      	subs	r1, #1
   ba28c:	4603      	mov	r3, r0
   ba28e:	b132      	cbz	r2, ba29e <strncpy+0x16>
   ba290:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba294:	f803 4b01 	strb.w	r4, [r3], #1
   ba298:	3a01      	subs	r2, #1
   ba29a:	2c00      	cmp	r4, #0
   ba29c:	d1f7      	bne.n	ba28e <strncpy+0x6>
   ba29e:	441a      	add	r2, r3
   ba2a0:	2100      	movs	r1, #0
   ba2a2:	4293      	cmp	r3, r2
   ba2a4:	d100      	bne.n	ba2a8 <strncpy+0x20>
   ba2a6:	bd10      	pop	{r4, pc}
   ba2a8:	f803 1b01 	strb.w	r1, [r3], #1
   ba2ac:	e7f9      	b.n	ba2a2 <strncpy+0x1a>

000ba2ae <sulp>:
   ba2ae:	b570      	push	{r4, r5, r6, lr}
   ba2b0:	4604      	mov	r4, r0
   ba2b2:	460d      	mov	r5, r1
   ba2b4:	ec45 4b10 	vmov	d0, r4, r5
   ba2b8:	4616      	mov	r6, r2
   ba2ba:	f001 fd81 	bl	bbdc0 <__ulp>
   ba2be:	ec51 0b10 	vmov	r0, r1, d0
   ba2c2:	b17e      	cbz	r6, ba2e4 <sulp+0x36>
   ba2c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
   ba2c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba2cc:	2b00      	cmp	r3, #0
   ba2ce:	dd09      	ble.n	ba2e4 <sulp+0x36>
   ba2d0:	051b      	lsls	r3, r3, #20
   ba2d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   ba2d6:	2400      	movs	r4, #0
   ba2d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   ba2dc:	4622      	mov	r2, r4
   ba2de:	462b      	mov	r3, r5
   ba2e0:	f7ff f8d8 	bl	b9494 <__aeabi_dmul>
   ba2e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba2e8 <_strtod_l>:
   ba2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba2ec:	ed2d 8b02 	vpush	{d8}
   ba2f0:	b09d      	sub	sp, #116	; 0x74
   ba2f2:	461f      	mov	r7, r3
   ba2f4:	2300      	movs	r3, #0
   ba2f6:	9318      	str	r3, [sp, #96]	; 0x60
   ba2f8:	4ba2      	ldr	r3, [pc, #648]	; (ba584 <_strtod_l+0x29c>)
   ba2fa:	9213      	str	r2, [sp, #76]	; 0x4c
   ba2fc:	681b      	ldr	r3, [r3, #0]
   ba2fe:	9305      	str	r3, [sp, #20]
   ba300:	4604      	mov	r4, r0
   ba302:	4618      	mov	r0, r3
   ba304:	4688      	mov	r8, r1
   ba306:	f7ff ff81 	bl	ba20c <strlen>
   ba30a:	f04f 0a00 	mov.w	sl, #0
   ba30e:	4605      	mov	r5, r0
   ba310:	f04f 0b00 	mov.w	fp, #0
   ba314:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba318:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba31a:	781a      	ldrb	r2, [r3, #0]
   ba31c:	2a2b      	cmp	r2, #43	; 0x2b
   ba31e:	d04e      	beq.n	ba3be <_strtod_l+0xd6>
   ba320:	d83b      	bhi.n	ba39a <_strtod_l+0xb2>
   ba322:	2a0d      	cmp	r2, #13
   ba324:	d834      	bhi.n	ba390 <_strtod_l+0xa8>
   ba326:	2a08      	cmp	r2, #8
   ba328:	d834      	bhi.n	ba394 <_strtod_l+0xac>
   ba32a:	2a00      	cmp	r2, #0
   ba32c:	d03e      	beq.n	ba3ac <_strtod_l+0xc4>
   ba32e:	2300      	movs	r3, #0
   ba330:	930a      	str	r3, [sp, #40]	; 0x28
   ba332:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   ba334:	7833      	ldrb	r3, [r6, #0]
   ba336:	2b30      	cmp	r3, #48	; 0x30
   ba338:	f040 80b0 	bne.w	ba49c <_strtod_l+0x1b4>
   ba33c:	7873      	ldrb	r3, [r6, #1]
   ba33e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba342:	2b58      	cmp	r3, #88	; 0x58
   ba344:	d168      	bne.n	ba418 <_strtod_l+0x130>
   ba346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba348:	9301      	str	r3, [sp, #4]
   ba34a:	ab18      	add	r3, sp, #96	; 0x60
   ba34c:	9702      	str	r7, [sp, #8]
   ba34e:	9300      	str	r3, [sp, #0]
   ba350:	4a8d      	ldr	r2, [pc, #564]	; (ba588 <_strtod_l+0x2a0>)
   ba352:	ab19      	add	r3, sp, #100	; 0x64
   ba354:	a917      	add	r1, sp, #92	; 0x5c
   ba356:	4620      	mov	r0, r4
   ba358:	f000 fea2 	bl	bb0a0 <__gethex>
   ba35c:	f010 0707 	ands.w	r7, r0, #7
   ba360:	4605      	mov	r5, r0
   ba362:	d005      	beq.n	ba370 <_strtod_l+0x88>
   ba364:	2f06      	cmp	r7, #6
   ba366:	d12c      	bne.n	ba3c2 <_strtod_l+0xda>
   ba368:	3601      	adds	r6, #1
   ba36a:	2300      	movs	r3, #0
   ba36c:	9617      	str	r6, [sp, #92]	; 0x5c
   ba36e:	930a      	str	r3, [sp, #40]	; 0x28
   ba370:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba372:	2b00      	cmp	r3, #0
   ba374:	f040 8590 	bne.w	bae98 <_strtod_l+0xbb0>
   ba378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba37a:	b1eb      	cbz	r3, ba3b8 <_strtod_l+0xd0>
   ba37c:	4652      	mov	r2, sl
   ba37e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ba382:	ec43 2b10 	vmov	d0, r2, r3
   ba386:	b01d      	add	sp, #116	; 0x74
   ba388:	ecbd 8b02 	vpop	{d8}
   ba38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba390:	2a20      	cmp	r2, #32
   ba392:	d1cc      	bne.n	ba32e <_strtod_l+0x46>
   ba394:	3301      	adds	r3, #1
   ba396:	9317      	str	r3, [sp, #92]	; 0x5c
   ba398:	e7be      	b.n	ba318 <_strtod_l+0x30>
   ba39a:	2a2d      	cmp	r2, #45	; 0x2d
   ba39c:	d1c7      	bne.n	ba32e <_strtod_l+0x46>
   ba39e:	2201      	movs	r2, #1
   ba3a0:	920a      	str	r2, [sp, #40]	; 0x28
   ba3a2:	1c5a      	adds	r2, r3, #1
   ba3a4:	9217      	str	r2, [sp, #92]	; 0x5c
   ba3a6:	785b      	ldrb	r3, [r3, #1]
   ba3a8:	2b00      	cmp	r3, #0
   ba3aa:	d1c2      	bne.n	ba332 <_strtod_l+0x4a>
   ba3ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba3ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba3b2:	2b00      	cmp	r3, #0
   ba3b4:	f040 856e 	bne.w	bae94 <_strtod_l+0xbac>
   ba3b8:	4652      	mov	r2, sl
   ba3ba:	465b      	mov	r3, fp
   ba3bc:	e7e1      	b.n	ba382 <_strtod_l+0x9a>
   ba3be:	2200      	movs	r2, #0
   ba3c0:	e7ee      	b.n	ba3a0 <_strtod_l+0xb8>
   ba3c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba3c4:	b13a      	cbz	r2, ba3d6 <_strtod_l+0xee>
   ba3c6:	2135      	movs	r1, #53	; 0x35
   ba3c8:	a81a      	add	r0, sp, #104	; 0x68
   ba3ca:	f001 fe04 	bl	bbfd6 <__copybits>
   ba3ce:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba3d0:	4620      	mov	r0, r4
   ba3d2:	f001 f9c3 	bl	bb75c <_Bfree>
   ba3d6:	3f01      	subs	r7, #1
   ba3d8:	2f04      	cmp	r7, #4
   ba3da:	d806      	bhi.n	ba3ea <_strtod_l+0x102>
   ba3dc:	e8df f007 	tbb	[pc, r7]
   ba3e0:	1714030a 	.word	0x1714030a
   ba3e4:	0a          	.byte	0x0a
   ba3e5:	00          	.byte	0x00
   ba3e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   ba3ea:	0728      	lsls	r0, r5, #28
   ba3ec:	d5c0      	bpl.n	ba370 <_strtod_l+0x88>
   ba3ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   ba3f2:	e7bd      	b.n	ba370 <_strtod_l+0x88>
   ba3f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   ba3f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   ba3fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   ba3fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
   ba402:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   ba406:	e7f0      	b.n	ba3ea <_strtod_l+0x102>
   ba408:	f8df b180 	ldr.w	fp, [pc, #384]	; ba58c <_strtod_l+0x2a4>
   ba40c:	e7ed      	b.n	ba3ea <_strtod_l+0x102>
   ba40e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   ba412:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   ba416:	e7e8      	b.n	ba3ea <_strtod_l+0x102>
   ba418:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba41a:	1c5a      	adds	r2, r3, #1
   ba41c:	9217      	str	r2, [sp, #92]	; 0x5c
   ba41e:	785b      	ldrb	r3, [r3, #1]
   ba420:	2b30      	cmp	r3, #48	; 0x30
   ba422:	d0f9      	beq.n	ba418 <_strtod_l+0x130>
   ba424:	2b00      	cmp	r3, #0
   ba426:	d0a3      	beq.n	ba370 <_strtod_l+0x88>
   ba428:	2301      	movs	r3, #1
   ba42a:	f04f 0900 	mov.w	r9, #0
   ba42e:	9304      	str	r3, [sp, #16]
   ba430:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba432:	9308      	str	r3, [sp, #32]
   ba434:	f8cd 901c 	str.w	r9, [sp, #28]
   ba438:	464f      	mov	r7, r9
   ba43a:	220a      	movs	r2, #10
   ba43c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   ba43e:	7806      	ldrb	r6, [r0, #0]
   ba440:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   ba444:	b2d9      	uxtb	r1, r3
   ba446:	2909      	cmp	r1, #9
   ba448:	d92a      	bls.n	ba4a0 <_strtod_l+0x1b8>
   ba44a:	9905      	ldr	r1, [sp, #20]
   ba44c:	462a      	mov	r2, r5
   ba44e:	f7ff ff07 	bl	ba260 <strncmp>
   ba452:	b398      	cbz	r0, ba4bc <_strtod_l+0x1d4>
   ba454:	2000      	movs	r0, #0
   ba456:	4632      	mov	r2, r6
   ba458:	463d      	mov	r5, r7
   ba45a:	9005      	str	r0, [sp, #20]
   ba45c:	4603      	mov	r3, r0
   ba45e:	2a65      	cmp	r2, #101	; 0x65
   ba460:	d001      	beq.n	ba466 <_strtod_l+0x17e>
   ba462:	2a45      	cmp	r2, #69	; 0x45
   ba464:	d118      	bne.n	ba498 <_strtod_l+0x1b0>
   ba466:	b91d      	cbnz	r5, ba470 <_strtod_l+0x188>
   ba468:	9a04      	ldr	r2, [sp, #16]
   ba46a:	4302      	orrs	r2, r0
   ba46c:	d09e      	beq.n	ba3ac <_strtod_l+0xc4>
   ba46e:	2500      	movs	r5, #0
   ba470:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   ba474:	f108 0201 	add.w	r2, r8, #1
   ba478:	9217      	str	r2, [sp, #92]	; 0x5c
   ba47a:	f898 2001 	ldrb.w	r2, [r8, #1]
   ba47e:	2a2b      	cmp	r2, #43	; 0x2b
   ba480:	d075      	beq.n	ba56e <_strtod_l+0x286>
   ba482:	2a2d      	cmp	r2, #45	; 0x2d
   ba484:	d07b      	beq.n	ba57e <_strtod_l+0x296>
   ba486:	f04f 0c00 	mov.w	ip, #0
   ba48a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   ba48e:	2909      	cmp	r1, #9
   ba490:	f240 8082 	bls.w	ba598 <_strtod_l+0x2b0>
   ba494:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba498:	2600      	movs	r6, #0
   ba49a:	e09d      	b.n	ba5d8 <_strtod_l+0x2f0>
   ba49c:	2300      	movs	r3, #0
   ba49e:	e7c4      	b.n	ba42a <_strtod_l+0x142>
   ba4a0:	2f08      	cmp	r7, #8
   ba4a2:	bfd8      	it	le
   ba4a4:	9907      	ldrle	r1, [sp, #28]
   ba4a6:	f100 0001 	add.w	r0, r0, #1
   ba4aa:	bfda      	itte	le
   ba4ac:	fb02 3301 	mlale	r3, r2, r1, r3
   ba4b0:	9307      	strle	r3, [sp, #28]
   ba4b2:	fb02 3909 	mlagt	r9, r2, r9, r3
   ba4b6:	3701      	adds	r7, #1
   ba4b8:	9017      	str	r0, [sp, #92]	; 0x5c
   ba4ba:	e7bf      	b.n	ba43c <_strtod_l+0x154>
   ba4bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba4be:	195a      	adds	r2, r3, r5
   ba4c0:	9217      	str	r2, [sp, #92]	; 0x5c
   ba4c2:	5d5a      	ldrb	r2, [r3, r5]
   ba4c4:	2f00      	cmp	r7, #0
   ba4c6:	d037      	beq.n	ba538 <_strtod_l+0x250>
   ba4c8:	9005      	str	r0, [sp, #20]
   ba4ca:	463d      	mov	r5, r7
   ba4cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   ba4d0:	2b09      	cmp	r3, #9
   ba4d2:	d912      	bls.n	ba4fa <_strtod_l+0x212>
   ba4d4:	2301      	movs	r3, #1
   ba4d6:	e7c2      	b.n	ba45e <_strtod_l+0x176>
   ba4d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba4da:	1c5a      	adds	r2, r3, #1
   ba4dc:	9217      	str	r2, [sp, #92]	; 0x5c
   ba4de:	785a      	ldrb	r2, [r3, #1]
   ba4e0:	3001      	adds	r0, #1
   ba4e2:	2a30      	cmp	r2, #48	; 0x30
   ba4e4:	d0f8      	beq.n	ba4d8 <_strtod_l+0x1f0>
   ba4e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   ba4ea:	2b08      	cmp	r3, #8
   ba4ec:	f200 84d9 	bhi.w	baea2 <_strtod_l+0xbba>
   ba4f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba4f2:	9005      	str	r0, [sp, #20]
   ba4f4:	2000      	movs	r0, #0
   ba4f6:	9308      	str	r3, [sp, #32]
   ba4f8:	4605      	mov	r5, r0
   ba4fa:	3a30      	subs	r2, #48	; 0x30
   ba4fc:	f100 0301 	add.w	r3, r0, #1
   ba500:	d014      	beq.n	ba52c <_strtod_l+0x244>
   ba502:	9905      	ldr	r1, [sp, #20]
   ba504:	4419      	add	r1, r3
   ba506:	9105      	str	r1, [sp, #20]
   ba508:	462b      	mov	r3, r5
   ba50a:	eb00 0e05 	add.w	lr, r0, r5
   ba50e:	210a      	movs	r1, #10
   ba510:	4573      	cmp	r3, lr
   ba512:	d113      	bne.n	ba53c <_strtod_l+0x254>
   ba514:	182b      	adds	r3, r5, r0
   ba516:	2b08      	cmp	r3, #8
   ba518:	f105 0501 	add.w	r5, r5, #1
   ba51c:	4405      	add	r5, r0
   ba51e:	dc1c      	bgt.n	ba55a <_strtod_l+0x272>
   ba520:	9907      	ldr	r1, [sp, #28]
   ba522:	230a      	movs	r3, #10
   ba524:	fb03 2301 	mla	r3, r3, r1, r2
   ba528:	9307      	str	r3, [sp, #28]
   ba52a:	2300      	movs	r3, #0
   ba52c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba52e:	1c51      	adds	r1, r2, #1
   ba530:	9117      	str	r1, [sp, #92]	; 0x5c
   ba532:	7852      	ldrb	r2, [r2, #1]
   ba534:	4618      	mov	r0, r3
   ba536:	e7c9      	b.n	ba4cc <_strtod_l+0x1e4>
   ba538:	4638      	mov	r0, r7
   ba53a:	e7d2      	b.n	ba4e2 <_strtod_l+0x1fa>
   ba53c:	2b08      	cmp	r3, #8
   ba53e:	dc04      	bgt.n	ba54a <_strtod_l+0x262>
   ba540:	9e07      	ldr	r6, [sp, #28]
   ba542:	434e      	muls	r6, r1
   ba544:	9607      	str	r6, [sp, #28]
   ba546:	3301      	adds	r3, #1
   ba548:	e7e2      	b.n	ba510 <_strtod_l+0x228>
   ba54a:	f103 0c01 	add.w	ip, r3, #1
   ba54e:	f1bc 0f10 	cmp.w	ip, #16
   ba552:	bfd8      	it	le
   ba554:	fb01 f909 	mulle.w	r9, r1, r9
   ba558:	e7f5      	b.n	ba546 <_strtod_l+0x25e>
   ba55a:	2d10      	cmp	r5, #16
   ba55c:	bfdc      	itt	le
   ba55e:	230a      	movle	r3, #10
   ba560:	fb03 2909 	mlale	r9, r3, r9, r2
   ba564:	e7e1      	b.n	ba52a <_strtod_l+0x242>
   ba566:	2300      	movs	r3, #0
   ba568:	9305      	str	r3, [sp, #20]
   ba56a:	2301      	movs	r3, #1
   ba56c:	e77c      	b.n	ba468 <_strtod_l+0x180>
   ba56e:	f04f 0c00 	mov.w	ip, #0
   ba572:	f108 0202 	add.w	r2, r8, #2
   ba576:	9217      	str	r2, [sp, #92]	; 0x5c
   ba578:	f898 2002 	ldrb.w	r2, [r8, #2]
   ba57c:	e785      	b.n	ba48a <_strtod_l+0x1a2>
   ba57e:	f04f 0c01 	mov.w	ip, #1
   ba582:	e7f6      	b.n	ba572 <_strtod_l+0x28a>
   ba584:	000bd11c 	.word	0x000bd11c
   ba588:	000bcf54 	.word	0x000bcf54
   ba58c:	7ff00000 	.word	0x7ff00000
   ba590:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba592:	1c51      	adds	r1, r2, #1
   ba594:	9117      	str	r1, [sp, #92]	; 0x5c
   ba596:	7852      	ldrb	r2, [r2, #1]
   ba598:	2a30      	cmp	r2, #48	; 0x30
   ba59a:	d0f9      	beq.n	ba590 <_strtod_l+0x2a8>
   ba59c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   ba5a0:	2908      	cmp	r1, #8
   ba5a2:	f63f af79 	bhi.w	ba498 <_strtod_l+0x1b0>
   ba5a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   ba5aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba5ac:	9206      	str	r2, [sp, #24]
   ba5ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba5b0:	1c51      	adds	r1, r2, #1
   ba5b2:	9117      	str	r1, [sp, #92]	; 0x5c
   ba5b4:	7852      	ldrb	r2, [r2, #1]
   ba5b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   ba5ba:	2e09      	cmp	r6, #9
   ba5bc:	d937      	bls.n	ba62e <_strtod_l+0x346>
   ba5be:	9e06      	ldr	r6, [sp, #24]
   ba5c0:	1b89      	subs	r1, r1, r6
   ba5c2:	2908      	cmp	r1, #8
   ba5c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   ba5c8:	dc02      	bgt.n	ba5d0 <_strtod_l+0x2e8>
   ba5ca:	4576      	cmp	r6, lr
   ba5cc:	bfa8      	it	ge
   ba5ce:	4676      	movge	r6, lr
   ba5d0:	f1bc 0f00 	cmp.w	ip, #0
   ba5d4:	d000      	beq.n	ba5d8 <_strtod_l+0x2f0>
   ba5d6:	4276      	negs	r6, r6
   ba5d8:	2d00      	cmp	r5, #0
   ba5da:	d14d      	bne.n	ba678 <_strtod_l+0x390>
   ba5dc:	9904      	ldr	r1, [sp, #16]
   ba5de:	4301      	orrs	r1, r0
   ba5e0:	f47f aec6 	bne.w	ba370 <_strtod_l+0x88>
   ba5e4:	2b00      	cmp	r3, #0
   ba5e6:	f47f aee1 	bne.w	ba3ac <_strtod_l+0xc4>
   ba5ea:	2a69      	cmp	r2, #105	; 0x69
   ba5ec:	d027      	beq.n	ba63e <_strtod_l+0x356>
   ba5ee:	dc24      	bgt.n	ba63a <_strtod_l+0x352>
   ba5f0:	2a49      	cmp	r2, #73	; 0x49
   ba5f2:	d024      	beq.n	ba63e <_strtod_l+0x356>
   ba5f4:	2a4e      	cmp	r2, #78	; 0x4e
   ba5f6:	f47f aed9 	bne.w	ba3ac <_strtod_l+0xc4>
   ba5fa:	499f      	ldr	r1, [pc, #636]	; (ba878 <_strtod_l+0x590>)
   ba5fc:	a817      	add	r0, sp, #92	; 0x5c
   ba5fe:	f000 ffa7 	bl	bb550 <__match>
   ba602:	2800      	cmp	r0, #0
   ba604:	f43f aed2 	beq.w	ba3ac <_strtod_l+0xc4>
   ba608:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba60a:	781b      	ldrb	r3, [r3, #0]
   ba60c:	2b28      	cmp	r3, #40	; 0x28
   ba60e:	d12d      	bne.n	ba66c <_strtod_l+0x384>
   ba610:	499a      	ldr	r1, [pc, #616]	; (ba87c <_strtod_l+0x594>)
   ba612:	aa1a      	add	r2, sp, #104	; 0x68
   ba614:	a817      	add	r0, sp, #92	; 0x5c
   ba616:	f000 ffaf 	bl	bb578 <__hexnan>
   ba61a:	2805      	cmp	r0, #5
   ba61c:	d126      	bne.n	ba66c <_strtod_l+0x384>
   ba61e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   ba620:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   ba624:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   ba628:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   ba62c:	e6a0      	b.n	ba370 <_strtod_l+0x88>
   ba62e:	210a      	movs	r1, #10
   ba630:	fb01 2e0e 	mla	lr, r1, lr, r2
   ba634:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   ba638:	e7b9      	b.n	ba5ae <_strtod_l+0x2c6>
   ba63a:	2a6e      	cmp	r2, #110	; 0x6e
   ba63c:	e7db      	b.n	ba5f6 <_strtod_l+0x30e>
   ba63e:	4990      	ldr	r1, [pc, #576]	; (ba880 <_strtod_l+0x598>)
   ba640:	a817      	add	r0, sp, #92	; 0x5c
   ba642:	f000 ff85 	bl	bb550 <__match>
   ba646:	2800      	cmp	r0, #0
   ba648:	f43f aeb0 	beq.w	ba3ac <_strtod_l+0xc4>
   ba64c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba64e:	498d      	ldr	r1, [pc, #564]	; (ba884 <_strtod_l+0x59c>)
   ba650:	3b01      	subs	r3, #1
   ba652:	a817      	add	r0, sp, #92	; 0x5c
   ba654:	9317      	str	r3, [sp, #92]	; 0x5c
   ba656:	f000 ff7b 	bl	bb550 <__match>
   ba65a:	b910      	cbnz	r0, ba662 <_strtod_l+0x37a>
   ba65c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba65e:	3301      	adds	r3, #1
   ba660:	9317      	str	r3, [sp, #92]	; 0x5c
   ba662:	f8df b230 	ldr.w	fp, [pc, #560]	; ba894 <_strtod_l+0x5ac>
   ba666:	f04f 0a00 	mov.w	sl, #0
   ba66a:	e681      	b.n	ba370 <_strtod_l+0x88>
   ba66c:	4886      	ldr	r0, [pc, #536]	; (ba888 <_strtod_l+0x5a0>)
   ba66e:	f7fe fc1f 	bl	b8eb0 <nan>
   ba672:	ec5b ab10 	vmov	sl, fp, d0
   ba676:	e67b      	b.n	ba370 <_strtod_l+0x88>
   ba678:	9b05      	ldr	r3, [sp, #20]
   ba67a:	9807      	ldr	r0, [sp, #28]
   ba67c:	1af3      	subs	r3, r6, r3
   ba67e:	2f00      	cmp	r7, #0
   ba680:	bf08      	it	eq
   ba682:	462f      	moveq	r7, r5
   ba684:	2d10      	cmp	r5, #16
   ba686:	9306      	str	r3, [sp, #24]
   ba688:	46a8      	mov	r8, r5
   ba68a:	bfa8      	it	ge
   ba68c:	f04f 0810 	movge.w	r8, #16
   ba690:	f7fe fe86 	bl	b93a0 <__aeabi_ui2d>
   ba694:	2d09      	cmp	r5, #9
   ba696:	4682      	mov	sl, r0
   ba698:	468b      	mov	fp, r1
   ba69a:	dd13      	ble.n	ba6c4 <_strtod_l+0x3dc>
   ba69c:	4b7b      	ldr	r3, [pc, #492]	; (ba88c <_strtod_l+0x5a4>)
   ba69e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   ba6a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   ba6a6:	f7fe fef5 	bl	b9494 <__aeabi_dmul>
   ba6aa:	4682      	mov	sl, r0
   ba6ac:	4648      	mov	r0, r9
   ba6ae:	468b      	mov	fp, r1
   ba6b0:	f7fe fe76 	bl	b93a0 <__aeabi_ui2d>
   ba6b4:	4602      	mov	r2, r0
   ba6b6:	460b      	mov	r3, r1
   ba6b8:	4650      	mov	r0, sl
   ba6ba:	4659      	mov	r1, fp
   ba6bc:	f7fe fd34 	bl	b9128 <__adddf3>
   ba6c0:	4682      	mov	sl, r0
   ba6c2:	468b      	mov	fp, r1
   ba6c4:	2d0f      	cmp	r5, #15
   ba6c6:	dc38      	bgt.n	ba73a <_strtod_l+0x452>
   ba6c8:	9b06      	ldr	r3, [sp, #24]
   ba6ca:	2b00      	cmp	r3, #0
   ba6cc:	f43f ae50 	beq.w	ba370 <_strtod_l+0x88>
   ba6d0:	dd24      	ble.n	ba71c <_strtod_l+0x434>
   ba6d2:	2b16      	cmp	r3, #22
   ba6d4:	dc0b      	bgt.n	ba6ee <_strtod_l+0x406>
   ba6d6:	496d      	ldr	r1, [pc, #436]	; (ba88c <_strtod_l+0x5a4>)
   ba6d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba6dc:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba6e0:	4652      	mov	r2, sl
   ba6e2:	465b      	mov	r3, fp
   ba6e4:	f7fe fed6 	bl	b9494 <__aeabi_dmul>
   ba6e8:	4682      	mov	sl, r0
   ba6ea:	468b      	mov	fp, r1
   ba6ec:	e640      	b.n	ba370 <_strtod_l+0x88>
   ba6ee:	9a06      	ldr	r2, [sp, #24]
   ba6f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   ba6f4:	4293      	cmp	r3, r2
   ba6f6:	db20      	blt.n	ba73a <_strtod_l+0x452>
   ba6f8:	4c64      	ldr	r4, [pc, #400]	; (ba88c <_strtod_l+0x5a4>)
   ba6fa:	f1c5 050f 	rsb	r5, r5, #15
   ba6fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   ba702:	4652      	mov	r2, sl
   ba704:	465b      	mov	r3, fp
   ba706:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba70a:	f7fe fec3 	bl	b9494 <__aeabi_dmul>
   ba70e:	9b06      	ldr	r3, [sp, #24]
   ba710:	1b5d      	subs	r5, r3, r5
   ba712:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   ba716:	e9d4 2300 	ldrd	r2, r3, [r4]
   ba71a:	e7e3      	b.n	ba6e4 <_strtod_l+0x3fc>
   ba71c:	9b06      	ldr	r3, [sp, #24]
   ba71e:	3316      	adds	r3, #22
   ba720:	db0b      	blt.n	ba73a <_strtod_l+0x452>
   ba722:	9b05      	ldr	r3, [sp, #20]
   ba724:	1b9e      	subs	r6, r3, r6
   ba726:	4b59      	ldr	r3, [pc, #356]	; (ba88c <_strtod_l+0x5a4>)
   ba728:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   ba72c:	e9d6 2300 	ldrd	r2, r3, [r6]
   ba730:	4650      	mov	r0, sl
   ba732:	4659      	mov	r1, fp
   ba734:	f7fe ffd8 	bl	b96e8 <__aeabi_ddiv>
   ba738:	e7d6      	b.n	ba6e8 <_strtod_l+0x400>
   ba73a:	9b06      	ldr	r3, [sp, #24]
   ba73c:	eba5 0808 	sub.w	r8, r5, r8
   ba740:	4498      	add	r8, r3
   ba742:	f1b8 0f00 	cmp.w	r8, #0
   ba746:	dd74      	ble.n	ba832 <_strtod_l+0x54a>
   ba748:	f018 030f 	ands.w	r3, r8, #15
   ba74c:	d00a      	beq.n	ba764 <_strtod_l+0x47c>
   ba74e:	494f      	ldr	r1, [pc, #316]	; (ba88c <_strtod_l+0x5a4>)
   ba750:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba754:	4652      	mov	r2, sl
   ba756:	465b      	mov	r3, fp
   ba758:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba75c:	f7fe fe9a 	bl	b9494 <__aeabi_dmul>
   ba760:	4682      	mov	sl, r0
   ba762:	468b      	mov	fp, r1
   ba764:	f038 080f 	bics.w	r8, r8, #15
   ba768:	d04f      	beq.n	ba80a <_strtod_l+0x522>
   ba76a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   ba76e:	dd22      	ble.n	ba7b6 <_strtod_l+0x4ce>
   ba770:	2500      	movs	r5, #0
   ba772:	462e      	mov	r6, r5
   ba774:	9507      	str	r5, [sp, #28]
   ba776:	9505      	str	r5, [sp, #20]
   ba778:	2322      	movs	r3, #34	; 0x22
   ba77a:	f8df b118 	ldr.w	fp, [pc, #280]	; ba894 <_strtod_l+0x5ac>
   ba77e:	6023      	str	r3, [r4, #0]
   ba780:	f04f 0a00 	mov.w	sl, #0
   ba784:	9b07      	ldr	r3, [sp, #28]
   ba786:	2b00      	cmp	r3, #0
   ba788:	f43f adf2 	beq.w	ba370 <_strtod_l+0x88>
   ba78c:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba78e:	4620      	mov	r0, r4
   ba790:	f000 ffe4 	bl	bb75c <_Bfree>
   ba794:	9905      	ldr	r1, [sp, #20]
   ba796:	4620      	mov	r0, r4
   ba798:	f000 ffe0 	bl	bb75c <_Bfree>
   ba79c:	4631      	mov	r1, r6
   ba79e:	4620      	mov	r0, r4
   ba7a0:	f000 ffdc 	bl	bb75c <_Bfree>
   ba7a4:	9907      	ldr	r1, [sp, #28]
   ba7a6:	4620      	mov	r0, r4
   ba7a8:	f000 ffd8 	bl	bb75c <_Bfree>
   ba7ac:	4629      	mov	r1, r5
   ba7ae:	4620      	mov	r0, r4
   ba7b0:	f000 ffd4 	bl	bb75c <_Bfree>
   ba7b4:	e5dc      	b.n	ba370 <_strtod_l+0x88>
   ba7b6:	4b36      	ldr	r3, [pc, #216]	; (ba890 <_strtod_l+0x5a8>)
   ba7b8:	9304      	str	r3, [sp, #16]
   ba7ba:	2300      	movs	r3, #0
   ba7bc:	ea4f 1828 	mov.w	r8, r8, asr #4
   ba7c0:	4650      	mov	r0, sl
   ba7c2:	4659      	mov	r1, fp
   ba7c4:	4699      	mov	r9, r3
   ba7c6:	f1b8 0f01 	cmp.w	r8, #1
   ba7ca:	dc21      	bgt.n	ba810 <_strtod_l+0x528>
   ba7cc:	b10b      	cbz	r3, ba7d2 <_strtod_l+0x4ea>
   ba7ce:	4682      	mov	sl, r0
   ba7d0:	468b      	mov	fp, r1
   ba7d2:	4b2f      	ldr	r3, [pc, #188]	; (ba890 <_strtod_l+0x5a8>)
   ba7d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   ba7d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   ba7dc:	4652      	mov	r2, sl
   ba7de:	465b      	mov	r3, fp
   ba7e0:	e9d9 0100 	ldrd	r0, r1, [r9]
   ba7e4:	f7fe fe56 	bl	b9494 <__aeabi_dmul>
   ba7e8:	4b2a      	ldr	r3, [pc, #168]	; (ba894 <_strtod_l+0x5ac>)
   ba7ea:	460a      	mov	r2, r1
   ba7ec:	400b      	ands	r3, r1
   ba7ee:	492a      	ldr	r1, [pc, #168]	; (ba898 <_strtod_l+0x5b0>)
   ba7f0:	428b      	cmp	r3, r1
   ba7f2:	4682      	mov	sl, r0
   ba7f4:	d8bc      	bhi.n	ba770 <_strtod_l+0x488>
   ba7f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   ba7fa:	428b      	cmp	r3, r1
   ba7fc:	bf86      	itte	hi
   ba7fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; ba89c <_strtod_l+0x5b4>
   ba802:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   ba806:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   ba80a:	2300      	movs	r3, #0
   ba80c:	9304      	str	r3, [sp, #16]
   ba80e:	e084      	b.n	ba91a <_strtod_l+0x632>
   ba810:	f018 0f01 	tst.w	r8, #1
   ba814:	d005      	beq.n	ba822 <_strtod_l+0x53a>
   ba816:	9b04      	ldr	r3, [sp, #16]
   ba818:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba81c:	f7fe fe3a 	bl	b9494 <__aeabi_dmul>
   ba820:	2301      	movs	r3, #1
   ba822:	9a04      	ldr	r2, [sp, #16]
   ba824:	3208      	adds	r2, #8
   ba826:	f109 0901 	add.w	r9, r9, #1
   ba82a:	ea4f 0868 	mov.w	r8, r8, asr #1
   ba82e:	9204      	str	r2, [sp, #16]
   ba830:	e7c9      	b.n	ba7c6 <_strtod_l+0x4de>
   ba832:	d0ea      	beq.n	ba80a <_strtod_l+0x522>
   ba834:	f1c8 0800 	rsb	r8, r8, #0
   ba838:	f018 020f 	ands.w	r2, r8, #15
   ba83c:	d00a      	beq.n	ba854 <_strtod_l+0x56c>
   ba83e:	4b13      	ldr	r3, [pc, #76]	; (ba88c <_strtod_l+0x5a4>)
   ba840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   ba844:	4650      	mov	r0, sl
   ba846:	4659      	mov	r1, fp
   ba848:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba84c:	f7fe ff4c 	bl	b96e8 <__aeabi_ddiv>
   ba850:	4682      	mov	sl, r0
   ba852:	468b      	mov	fp, r1
   ba854:	ea5f 1828 	movs.w	r8, r8, asr #4
   ba858:	d0d7      	beq.n	ba80a <_strtod_l+0x522>
   ba85a:	f1b8 0f1f 	cmp.w	r8, #31
   ba85e:	dd1f      	ble.n	ba8a0 <_strtod_l+0x5b8>
   ba860:	2500      	movs	r5, #0
   ba862:	462e      	mov	r6, r5
   ba864:	9507      	str	r5, [sp, #28]
   ba866:	9505      	str	r5, [sp, #20]
   ba868:	2322      	movs	r3, #34	; 0x22
   ba86a:	f04f 0a00 	mov.w	sl, #0
   ba86e:	f04f 0b00 	mov.w	fp, #0
   ba872:	6023      	str	r3, [r4, #0]
   ba874:	e786      	b.n	ba784 <_strtod_l+0x49c>
   ba876:	bf00      	nop
   ba878:	000bcf51 	.word	0x000bcf51
   ba87c:	000bcf68 	.word	0x000bcf68
   ba880:	000bcf48 	.word	0x000bcf48
   ba884:	000bcf4b 	.word	0x000bcf4b
   ba888:	000bc22a 	.word	0x000bc22a
   ba88c:	000bd1b8 	.word	0x000bd1b8
   ba890:	000bd190 	.word	0x000bd190
   ba894:	7ff00000 	.word	0x7ff00000
   ba898:	7ca00000 	.word	0x7ca00000
   ba89c:	7fefffff 	.word	0x7fefffff
   ba8a0:	f018 0310 	ands.w	r3, r8, #16
   ba8a4:	bf18      	it	ne
   ba8a6:	236a      	movne	r3, #106	; 0x6a
   ba8a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bac58 <_strtod_l+0x970>
   ba8ac:	9304      	str	r3, [sp, #16]
   ba8ae:	4650      	mov	r0, sl
   ba8b0:	4659      	mov	r1, fp
   ba8b2:	2300      	movs	r3, #0
   ba8b4:	f018 0f01 	tst.w	r8, #1
   ba8b8:	d004      	beq.n	ba8c4 <_strtod_l+0x5dc>
   ba8ba:	e9d9 2300 	ldrd	r2, r3, [r9]
   ba8be:	f7fe fde9 	bl	b9494 <__aeabi_dmul>
   ba8c2:	2301      	movs	r3, #1
   ba8c4:	ea5f 0868 	movs.w	r8, r8, asr #1
   ba8c8:	f109 0908 	add.w	r9, r9, #8
   ba8cc:	d1f2      	bne.n	ba8b4 <_strtod_l+0x5cc>
   ba8ce:	b10b      	cbz	r3, ba8d4 <_strtod_l+0x5ec>
   ba8d0:	4682      	mov	sl, r0
   ba8d2:	468b      	mov	fp, r1
   ba8d4:	9b04      	ldr	r3, [sp, #16]
   ba8d6:	b1c3      	cbz	r3, ba90a <_strtod_l+0x622>
   ba8d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   ba8dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   ba8e0:	2b00      	cmp	r3, #0
   ba8e2:	4659      	mov	r1, fp
   ba8e4:	dd11      	ble.n	ba90a <_strtod_l+0x622>
   ba8e6:	2b1f      	cmp	r3, #31
   ba8e8:	f340 8124 	ble.w	bab34 <_strtod_l+0x84c>
   ba8ec:	2b34      	cmp	r3, #52	; 0x34
   ba8ee:	bfde      	ittt	le
   ba8f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   ba8f4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   ba8f8:	fa03 f202 	lslle.w	r2, r3, r2
   ba8fc:	f04f 0a00 	mov.w	sl, #0
   ba900:	bfcc      	ite	gt
   ba902:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   ba906:	ea02 0b01 	andle.w	fp, r2, r1
   ba90a:	2200      	movs	r2, #0
   ba90c:	2300      	movs	r3, #0
   ba90e:	4650      	mov	r0, sl
   ba910:	4659      	mov	r1, fp
   ba912:	f7ff f827 	bl	b9964 <__aeabi_dcmpeq>
   ba916:	2800      	cmp	r0, #0
   ba918:	d1a2      	bne.n	ba860 <_strtod_l+0x578>
   ba91a:	9b07      	ldr	r3, [sp, #28]
   ba91c:	9300      	str	r3, [sp, #0]
   ba91e:	9908      	ldr	r1, [sp, #32]
   ba920:	462b      	mov	r3, r5
   ba922:	463a      	mov	r2, r7
   ba924:	4620      	mov	r0, r4
   ba926:	f000 ff81 	bl	bb82c <__s2b>
   ba92a:	9007      	str	r0, [sp, #28]
   ba92c:	2800      	cmp	r0, #0
   ba92e:	f43f af1f 	beq.w	ba770 <_strtod_l+0x488>
   ba932:	9b05      	ldr	r3, [sp, #20]
   ba934:	1b9e      	subs	r6, r3, r6
   ba936:	9b06      	ldr	r3, [sp, #24]
   ba938:	2b00      	cmp	r3, #0
   ba93a:	bfb4      	ite	lt
   ba93c:	4633      	movlt	r3, r6
   ba93e:	2300      	movge	r3, #0
   ba940:	930c      	str	r3, [sp, #48]	; 0x30
   ba942:	9b06      	ldr	r3, [sp, #24]
   ba944:	2500      	movs	r5, #0
   ba946:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   ba94a:	9312      	str	r3, [sp, #72]	; 0x48
   ba94c:	462e      	mov	r6, r5
   ba94e:	9b07      	ldr	r3, [sp, #28]
   ba950:	4620      	mov	r0, r4
   ba952:	6859      	ldr	r1, [r3, #4]
   ba954:	f000 fec2 	bl	bb6dc <_Balloc>
   ba958:	9005      	str	r0, [sp, #20]
   ba95a:	2800      	cmp	r0, #0
   ba95c:	f43f af0c 	beq.w	ba778 <_strtod_l+0x490>
   ba960:	9b07      	ldr	r3, [sp, #28]
   ba962:	691a      	ldr	r2, [r3, #16]
   ba964:	3202      	adds	r2, #2
   ba966:	f103 010c 	add.w	r1, r3, #12
   ba96a:	0092      	lsls	r2, r2, #2
   ba96c:	300c      	adds	r0, #12
   ba96e:	f7ff fbdc 	bl	ba12a <memcpy>
   ba972:	ec4b ab10 	vmov	d0, sl, fp
   ba976:	aa1a      	add	r2, sp, #104	; 0x68
   ba978:	a919      	add	r1, sp, #100	; 0x64
   ba97a:	4620      	mov	r0, r4
   ba97c:	f001 fa9c 	bl	bbeb8 <__d2b>
   ba980:	ec4b ab18 	vmov	d8, sl, fp
   ba984:	9018      	str	r0, [sp, #96]	; 0x60
   ba986:	2800      	cmp	r0, #0
   ba988:	f43f aef6 	beq.w	ba778 <_strtod_l+0x490>
   ba98c:	2101      	movs	r1, #1
   ba98e:	4620      	mov	r0, r4
   ba990:	f000 ffe6 	bl	bb960 <__i2b>
   ba994:	4606      	mov	r6, r0
   ba996:	2800      	cmp	r0, #0
   ba998:	f43f aeee 	beq.w	ba778 <_strtod_l+0x490>
   ba99c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   ba99e:	9904      	ldr	r1, [sp, #16]
   ba9a0:	2b00      	cmp	r3, #0
   ba9a2:	bfab      	itete	ge
   ba9a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   ba9a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   ba9a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   ba9aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   ba9ae:	bfac      	ite	ge
   ba9b0:	eb03 0902 	addge.w	r9, r3, r2
   ba9b4:	1ad7      	sublt	r7, r2, r3
   ba9b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   ba9b8:	eba3 0801 	sub.w	r8, r3, r1
   ba9bc:	4490      	add	r8, r2
   ba9be:	4ba1      	ldr	r3, [pc, #644]	; (bac44 <_strtod_l+0x95c>)
   ba9c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba9c4:	4598      	cmp	r8, r3
   ba9c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   ba9ca:	f280 80c7 	bge.w	bab5c <_strtod_l+0x874>
   ba9ce:	eba3 0308 	sub.w	r3, r3, r8
   ba9d2:	2b1f      	cmp	r3, #31
   ba9d4:	eba2 0203 	sub.w	r2, r2, r3
   ba9d8:	f04f 0101 	mov.w	r1, #1
   ba9dc:	f300 80b1 	bgt.w	bab42 <_strtod_l+0x85a>
   ba9e0:	fa01 f303 	lsl.w	r3, r1, r3
   ba9e4:	930d      	str	r3, [sp, #52]	; 0x34
   ba9e6:	2300      	movs	r3, #0
   ba9e8:	9308      	str	r3, [sp, #32]
   ba9ea:	eb09 0802 	add.w	r8, r9, r2
   ba9ee:	9b04      	ldr	r3, [sp, #16]
   ba9f0:	45c1      	cmp	r9, r8
   ba9f2:	4417      	add	r7, r2
   ba9f4:	441f      	add	r7, r3
   ba9f6:	464b      	mov	r3, r9
   ba9f8:	bfa8      	it	ge
   ba9fa:	4643      	movge	r3, r8
   ba9fc:	42bb      	cmp	r3, r7
   ba9fe:	bfa8      	it	ge
   baa00:	463b      	movge	r3, r7
   baa02:	2b00      	cmp	r3, #0
   baa04:	bfc2      	ittt	gt
   baa06:	eba8 0803 	subgt.w	r8, r8, r3
   baa0a:	1aff      	subgt	r7, r7, r3
   baa0c:	eba9 0903 	subgt.w	r9, r9, r3
   baa10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   baa12:	2b00      	cmp	r3, #0
   baa14:	dd17      	ble.n	baa46 <_strtod_l+0x75e>
   baa16:	4631      	mov	r1, r6
   baa18:	461a      	mov	r2, r3
   baa1a:	4620      	mov	r0, r4
   baa1c:	f001 f860 	bl	bbae0 <__pow5mult>
   baa20:	4606      	mov	r6, r0
   baa22:	2800      	cmp	r0, #0
   baa24:	f43f aea8 	beq.w	ba778 <_strtod_l+0x490>
   baa28:	4601      	mov	r1, r0
   baa2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   baa2c:	4620      	mov	r0, r4
   baa2e:	f000 ffad 	bl	bb98c <__multiply>
   baa32:	900b      	str	r0, [sp, #44]	; 0x2c
   baa34:	2800      	cmp	r0, #0
   baa36:	f43f ae9f 	beq.w	ba778 <_strtod_l+0x490>
   baa3a:	9918      	ldr	r1, [sp, #96]	; 0x60
   baa3c:	4620      	mov	r0, r4
   baa3e:	f000 fe8d 	bl	bb75c <_Bfree>
   baa42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baa44:	9318      	str	r3, [sp, #96]	; 0x60
   baa46:	f1b8 0f00 	cmp.w	r8, #0
   baa4a:	f300 808c 	bgt.w	bab66 <_strtod_l+0x87e>
   baa4e:	9b06      	ldr	r3, [sp, #24]
   baa50:	2b00      	cmp	r3, #0
   baa52:	dd08      	ble.n	baa66 <_strtod_l+0x77e>
   baa54:	9a12      	ldr	r2, [sp, #72]	; 0x48
   baa56:	9905      	ldr	r1, [sp, #20]
   baa58:	4620      	mov	r0, r4
   baa5a:	f001 f841 	bl	bbae0 <__pow5mult>
   baa5e:	9005      	str	r0, [sp, #20]
   baa60:	2800      	cmp	r0, #0
   baa62:	f43f ae89 	beq.w	ba778 <_strtod_l+0x490>
   baa66:	2f00      	cmp	r7, #0
   baa68:	dd08      	ble.n	baa7c <_strtod_l+0x794>
   baa6a:	9905      	ldr	r1, [sp, #20]
   baa6c:	463a      	mov	r2, r7
   baa6e:	4620      	mov	r0, r4
   baa70:	f001 f890 	bl	bbb94 <__lshift>
   baa74:	9005      	str	r0, [sp, #20]
   baa76:	2800      	cmp	r0, #0
   baa78:	f43f ae7e 	beq.w	ba778 <_strtod_l+0x490>
   baa7c:	f1b9 0f00 	cmp.w	r9, #0
   baa80:	dd08      	ble.n	baa94 <_strtod_l+0x7ac>
   baa82:	4631      	mov	r1, r6
   baa84:	464a      	mov	r2, r9
   baa86:	4620      	mov	r0, r4
   baa88:	f001 f884 	bl	bbb94 <__lshift>
   baa8c:	4606      	mov	r6, r0
   baa8e:	2800      	cmp	r0, #0
   baa90:	f43f ae72 	beq.w	ba778 <_strtod_l+0x490>
   baa94:	9a05      	ldr	r2, [sp, #20]
   baa96:	9918      	ldr	r1, [sp, #96]	; 0x60
   baa98:	4620      	mov	r0, r4
   baa9a:	f001 f907 	bl	bbcac <__mdiff>
   baa9e:	4605      	mov	r5, r0
   baaa0:	2800      	cmp	r0, #0
   baaa2:	f43f ae69 	beq.w	ba778 <_strtod_l+0x490>
   baaa6:	68c3      	ldr	r3, [r0, #12]
   baaa8:	930b      	str	r3, [sp, #44]	; 0x2c
   baaaa:	2300      	movs	r3, #0
   baaac:	60c3      	str	r3, [r0, #12]
   baaae:	4631      	mov	r1, r6
   baab0:	f001 f8e0 	bl	bbc74 <__mcmp>
   baab4:	2800      	cmp	r0, #0
   baab6:	da60      	bge.n	bab7a <_strtod_l+0x892>
   baab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baaba:	ea53 030a 	orrs.w	r3, r3, sl
   baabe:	f040 8082 	bne.w	babc6 <_strtod_l+0x8de>
   baac2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   baac6:	2b00      	cmp	r3, #0
   baac8:	d17d      	bne.n	babc6 <_strtod_l+0x8de>
   baaca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   baace:	0d1b      	lsrs	r3, r3, #20
   baad0:	051b      	lsls	r3, r3, #20
   baad2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   baad6:	d976      	bls.n	babc6 <_strtod_l+0x8de>
   baad8:	696b      	ldr	r3, [r5, #20]
   baada:	b913      	cbnz	r3, baae2 <_strtod_l+0x7fa>
   baadc:	692b      	ldr	r3, [r5, #16]
   baade:	2b01      	cmp	r3, #1
   baae0:	dd71      	ble.n	babc6 <_strtod_l+0x8de>
   baae2:	4629      	mov	r1, r5
   baae4:	2201      	movs	r2, #1
   baae6:	4620      	mov	r0, r4
   baae8:	f001 f854 	bl	bbb94 <__lshift>
   baaec:	4631      	mov	r1, r6
   baaee:	4605      	mov	r5, r0
   baaf0:	f001 f8c0 	bl	bbc74 <__mcmp>
   baaf4:	2800      	cmp	r0, #0
   baaf6:	dd66      	ble.n	babc6 <_strtod_l+0x8de>
   baaf8:	9904      	ldr	r1, [sp, #16]
   baafa:	4a53      	ldr	r2, [pc, #332]	; (bac48 <_strtod_l+0x960>)
   baafc:	465b      	mov	r3, fp
   baafe:	2900      	cmp	r1, #0
   bab00:	f000 8081 	beq.w	bac06 <_strtod_l+0x91e>
   bab04:	ea02 010b 	and.w	r1, r2, fp
   bab08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bab0c:	dc7b      	bgt.n	bac06 <_strtod_l+0x91e>
   bab0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bab12:	f77f aea9 	ble.w	ba868 <_strtod_l+0x580>
   bab16:	4b4d      	ldr	r3, [pc, #308]	; (bac4c <_strtod_l+0x964>)
   bab18:	4650      	mov	r0, sl
   bab1a:	4659      	mov	r1, fp
   bab1c:	2200      	movs	r2, #0
   bab1e:	f7fe fcb9 	bl	b9494 <__aeabi_dmul>
   bab22:	460b      	mov	r3, r1
   bab24:	4303      	orrs	r3, r0
   bab26:	bf08      	it	eq
   bab28:	2322      	moveq	r3, #34	; 0x22
   bab2a:	4682      	mov	sl, r0
   bab2c:	468b      	mov	fp, r1
   bab2e:	bf08      	it	eq
   bab30:	6023      	streq	r3, [r4, #0]
   bab32:	e62b      	b.n	ba78c <_strtod_l+0x4a4>
   bab34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bab38:	fa02 f303 	lsl.w	r3, r2, r3
   bab3c:	ea03 0a0a 	and.w	sl, r3, sl
   bab40:	e6e3      	b.n	ba90a <_strtod_l+0x622>
   bab42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bab46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bab4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bab4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bab52:	fa01 f308 	lsl.w	r3, r1, r8
   bab56:	9308      	str	r3, [sp, #32]
   bab58:	910d      	str	r1, [sp, #52]	; 0x34
   bab5a:	e746      	b.n	ba9ea <_strtod_l+0x702>
   bab5c:	2300      	movs	r3, #0
   bab5e:	9308      	str	r3, [sp, #32]
   bab60:	2301      	movs	r3, #1
   bab62:	930d      	str	r3, [sp, #52]	; 0x34
   bab64:	e741      	b.n	ba9ea <_strtod_l+0x702>
   bab66:	9918      	ldr	r1, [sp, #96]	; 0x60
   bab68:	4642      	mov	r2, r8
   bab6a:	4620      	mov	r0, r4
   bab6c:	f001 f812 	bl	bbb94 <__lshift>
   bab70:	9018      	str	r0, [sp, #96]	; 0x60
   bab72:	2800      	cmp	r0, #0
   bab74:	f47f af6b 	bne.w	baa4e <_strtod_l+0x766>
   bab78:	e5fe      	b.n	ba778 <_strtod_l+0x490>
   bab7a:	465f      	mov	r7, fp
   bab7c:	d16e      	bne.n	bac5c <_strtod_l+0x974>
   bab7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bab80:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bab84:	b342      	cbz	r2, babd8 <_strtod_l+0x8f0>
   bab86:	4a32      	ldr	r2, [pc, #200]	; (bac50 <_strtod_l+0x968>)
   bab88:	4293      	cmp	r3, r2
   bab8a:	d128      	bne.n	babde <_strtod_l+0x8f6>
   bab8c:	9b04      	ldr	r3, [sp, #16]
   bab8e:	4651      	mov	r1, sl
   bab90:	b1eb      	cbz	r3, babce <_strtod_l+0x8e6>
   bab92:	4b2d      	ldr	r3, [pc, #180]	; (bac48 <_strtod_l+0x960>)
   bab94:	403b      	ands	r3, r7
   bab96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bab9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bab9e:	d819      	bhi.n	babd4 <_strtod_l+0x8ec>
   baba0:	0d1b      	lsrs	r3, r3, #20
   baba2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   baba6:	fa02 f303 	lsl.w	r3, r2, r3
   babaa:	4299      	cmp	r1, r3
   babac:	d117      	bne.n	babde <_strtod_l+0x8f6>
   babae:	4b29      	ldr	r3, [pc, #164]	; (bac54 <_strtod_l+0x96c>)
   babb0:	429f      	cmp	r7, r3
   babb2:	d102      	bne.n	babba <_strtod_l+0x8d2>
   babb4:	3101      	adds	r1, #1
   babb6:	f43f addf 	beq.w	ba778 <_strtod_l+0x490>
   babba:	4b23      	ldr	r3, [pc, #140]	; (bac48 <_strtod_l+0x960>)
   babbc:	403b      	ands	r3, r7
   babbe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   babc2:	f04f 0a00 	mov.w	sl, #0
   babc6:	9b04      	ldr	r3, [sp, #16]
   babc8:	2b00      	cmp	r3, #0
   babca:	d1a4      	bne.n	bab16 <_strtod_l+0x82e>
   babcc:	e5de      	b.n	ba78c <_strtod_l+0x4a4>
   babce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   babd2:	e7ea      	b.n	babaa <_strtod_l+0x8c2>
   babd4:	4613      	mov	r3, r2
   babd6:	e7e8      	b.n	babaa <_strtod_l+0x8c2>
   babd8:	ea53 030a 	orrs.w	r3, r3, sl
   babdc:	d08c      	beq.n	baaf8 <_strtod_l+0x810>
   babde:	9b08      	ldr	r3, [sp, #32]
   babe0:	b1db      	cbz	r3, bac1a <_strtod_l+0x932>
   babe2:	423b      	tst	r3, r7
   babe4:	d0ef      	beq.n	babc6 <_strtod_l+0x8de>
   babe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   babe8:	9a04      	ldr	r2, [sp, #16]
   babea:	4650      	mov	r0, sl
   babec:	4659      	mov	r1, fp
   babee:	b1c3      	cbz	r3, bac22 <_strtod_l+0x93a>
   babf0:	f7ff fb5d 	bl	ba2ae <sulp>
   babf4:	4602      	mov	r2, r0
   babf6:	460b      	mov	r3, r1
   babf8:	ec51 0b18 	vmov	r0, r1, d8
   babfc:	f7fe fa94 	bl	b9128 <__adddf3>
   bac00:	4682      	mov	sl, r0
   bac02:	468b      	mov	fp, r1
   bac04:	e7df      	b.n	babc6 <_strtod_l+0x8de>
   bac06:	4013      	ands	r3, r2
   bac08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bac0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bac10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bac14:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bac18:	e7d5      	b.n	babc6 <_strtod_l+0x8de>
   bac1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bac1c:	ea13 0f0a 	tst.w	r3, sl
   bac20:	e7e0      	b.n	babe4 <_strtod_l+0x8fc>
   bac22:	f7ff fb44 	bl	ba2ae <sulp>
   bac26:	4602      	mov	r2, r0
   bac28:	460b      	mov	r3, r1
   bac2a:	ec51 0b18 	vmov	r0, r1, d8
   bac2e:	f7fe fa79 	bl	b9124 <__aeabi_dsub>
   bac32:	2200      	movs	r2, #0
   bac34:	2300      	movs	r3, #0
   bac36:	4682      	mov	sl, r0
   bac38:	468b      	mov	fp, r1
   bac3a:	f7fe fe93 	bl	b9964 <__aeabi_dcmpeq>
   bac3e:	2800      	cmp	r0, #0
   bac40:	d0c1      	beq.n	babc6 <_strtod_l+0x8de>
   bac42:	e611      	b.n	ba868 <_strtod_l+0x580>
   bac44:	fffffc02 	.word	0xfffffc02
   bac48:	7ff00000 	.word	0x7ff00000
   bac4c:	39500000 	.word	0x39500000
   bac50:	000fffff 	.word	0x000fffff
   bac54:	7fefffff 	.word	0x7fefffff
   bac58:	000bcf80 	.word	0x000bcf80
   bac5c:	4631      	mov	r1, r6
   bac5e:	4628      	mov	r0, r5
   bac60:	f001 f986 	bl	bbf70 <__ratio>
   bac64:	ec59 8b10 	vmov	r8, r9, d0
   bac68:	ee10 0a10 	vmov	r0, s0
   bac6c:	2200      	movs	r2, #0
   bac6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bac72:	4649      	mov	r1, r9
   bac74:	f7fe fe8a 	bl	b998c <__aeabi_dcmple>
   bac78:	2800      	cmp	r0, #0
   bac7a:	d07a      	beq.n	bad72 <_strtod_l+0xa8a>
   bac7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bac7e:	2b00      	cmp	r3, #0
   bac80:	d04a      	beq.n	bad18 <_strtod_l+0xa30>
   bac82:	4b95      	ldr	r3, [pc, #596]	; (baed8 <_strtod_l+0xbf0>)
   bac84:	2200      	movs	r2, #0
   bac86:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bac8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; baed8 <_strtod_l+0xbf0>
   bac8e:	f04f 0800 	mov.w	r8, #0
   bac92:	4b92      	ldr	r3, [pc, #584]	; (baedc <_strtod_l+0xbf4>)
   bac94:	403b      	ands	r3, r7
   bac96:	930d      	str	r3, [sp, #52]	; 0x34
   bac98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bac9a:	4b91      	ldr	r3, [pc, #580]	; (baee0 <_strtod_l+0xbf8>)
   bac9c:	429a      	cmp	r2, r3
   bac9e:	f040 80b0 	bne.w	bae02 <_strtod_l+0xb1a>
   baca2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   baca6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bacaa:	ec4b ab10 	vmov	d0, sl, fp
   bacae:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bacb2:	f001 f885 	bl	bbdc0 <__ulp>
   bacb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bacba:	ec53 2b10 	vmov	r2, r3, d0
   bacbe:	f7fe fbe9 	bl	b9494 <__aeabi_dmul>
   bacc2:	4652      	mov	r2, sl
   bacc4:	465b      	mov	r3, fp
   bacc6:	f7fe fa2f 	bl	b9128 <__adddf3>
   bacca:	460b      	mov	r3, r1
   baccc:	4983      	ldr	r1, [pc, #524]	; (baedc <_strtod_l+0xbf4>)
   bacce:	4a85      	ldr	r2, [pc, #532]	; (baee4 <_strtod_l+0xbfc>)
   bacd0:	4019      	ands	r1, r3
   bacd2:	4291      	cmp	r1, r2
   bacd4:	4682      	mov	sl, r0
   bacd6:	d960      	bls.n	bad9a <_strtod_l+0xab2>
   bacd8:	ee18 3a90 	vmov	r3, s17
   bacdc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bace0:	4293      	cmp	r3, r2
   bace2:	d104      	bne.n	bacee <_strtod_l+0xa06>
   bace4:	ee18 3a10 	vmov	r3, s16
   bace8:	3301      	adds	r3, #1
   bacea:	f43f ad45 	beq.w	ba778 <_strtod_l+0x490>
   bacee:	f8df b200 	ldr.w	fp, [pc, #512]	; baef0 <_strtod_l+0xc08>
   bacf2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bacf6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bacf8:	4620      	mov	r0, r4
   bacfa:	f000 fd2f 	bl	bb75c <_Bfree>
   bacfe:	9905      	ldr	r1, [sp, #20]
   bad00:	4620      	mov	r0, r4
   bad02:	f000 fd2b 	bl	bb75c <_Bfree>
   bad06:	4631      	mov	r1, r6
   bad08:	4620      	mov	r0, r4
   bad0a:	f000 fd27 	bl	bb75c <_Bfree>
   bad0e:	4629      	mov	r1, r5
   bad10:	4620      	mov	r0, r4
   bad12:	f000 fd23 	bl	bb75c <_Bfree>
   bad16:	e61a      	b.n	ba94e <_strtod_l+0x666>
   bad18:	f1ba 0f00 	cmp.w	sl, #0
   bad1c:	d11b      	bne.n	bad56 <_strtod_l+0xa6e>
   bad1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bad22:	b9f3      	cbnz	r3, bad62 <_strtod_l+0xa7a>
   bad24:	4b6c      	ldr	r3, [pc, #432]	; (baed8 <_strtod_l+0xbf0>)
   bad26:	2200      	movs	r2, #0
   bad28:	4640      	mov	r0, r8
   bad2a:	4649      	mov	r1, r9
   bad2c:	f7fe fe24 	bl	b9978 <__aeabi_dcmplt>
   bad30:	b9d0      	cbnz	r0, bad68 <_strtod_l+0xa80>
   bad32:	4640      	mov	r0, r8
   bad34:	4649      	mov	r1, r9
   bad36:	4b6c      	ldr	r3, [pc, #432]	; (baee8 <_strtod_l+0xc00>)
   bad38:	2200      	movs	r2, #0
   bad3a:	f7fe fbab 	bl	b9494 <__aeabi_dmul>
   bad3e:	4680      	mov	r8, r0
   bad40:	4689      	mov	r9, r1
   bad42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bad46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bad4a:	9315      	str	r3, [sp, #84]	; 0x54
   bad4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bad50:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bad54:	e79d      	b.n	bac92 <_strtod_l+0x9aa>
   bad56:	f1ba 0f01 	cmp.w	sl, #1
   bad5a:	d102      	bne.n	bad62 <_strtod_l+0xa7a>
   bad5c:	2f00      	cmp	r7, #0
   bad5e:	f43f ad83 	beq.w	ba868 <_strtod_l+0x580>
   bad62:	4b62      	ldr	r3, [pc, #392]	; (baeec <_strtod_l+0xc04>)
   bad64:	2200      	movs	r2, #0
   bad66:	e78e      	b.n	bac86 <_strtod_l+0x99e>
   bad68:	f8df 917c 	ldr.w	r9, [pc, #380]	; baee8 <_strtod_l+0xc00>
   bad6c:	f04f 0800 	mov.w	r8, #0
   bad70:	e7e7      	b.n	bad42 <_strtod_l+0xa5a>
   bad72:	4b5d      	ldr	r3, [pc, #372]	; (baee8 <_strtod_l+0xc00>)
   bad74:	4640      	mov	r0, r8
   bad76:	4649      	mov	r1, r9
   bad78:	2200      	movs	r2, #0
   bad7a:	f7fe fb8b 	bl	b9494 <__aeabi_dmul>
   bad7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bad80:	4680      	mov	r8, r0
   bad82:	4689      	mov	r9, r1
   bad84:	b933      	cbnz	r3, bad94 <_strtod_l+0xaac>
   bad86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bad8a:	900e      	str	r0, [sp, #56]	; 0x38
   bad8c:	930f      	str	r3, [sp, #60]	; 0x3c
   bad8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bad92:	e7dd      	b.n	bad50 <_strtod_l+0xa68>
   bad94:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bad98:	e7f9      	b.n	bad8e <_strtod_l+0xaa6>
   bad9a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bad9e:	9b04      	ldr	r3, [sp, #16]
   bada0:	2b00      	cmp	r3, #0
   bada2:	d1a8      	bne.n	bacf6 <_strtod_l+0xa0e>
   bada4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bada8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   badaa:	0d1b      	lsrs	r3, r3, #20
   badac:	051b      	lsls	r3, r3, #20
   badae:	429a      	cmp	r2, r3
   badb0:	d1a1      	bne.n	bacf6 <_strtod_l+0xa0e>
   badb2:	4640      	mov	r0, r8
   badb4:	4649      	mov	r1, r9
   badb6:	f001 f96f 	bl	bc098 <__aeabi_d2lz>
   badba:	f7fe fb3d 	bl	b9438 <__aeabi_l2d>
   badbe:	4602      	mov	r2, r0
   badc0:	460b      	mov	r3, r1
   badc2:	4640      	mov	r0, r8
   badc4:	4649      	mov	r1, r9
   badc6:	f7fe f9ad 	bl	b9124 <__aeabi_dsub>
   badca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   badcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   badd0:	ea43 030a 	orr.w	r3, r3, sl
   badd4:	4313      	orrs	r3, r2
   badd6:	4680      	mov	r8, r0
   badd8:	4689      	mov	r9, r1
   badda:	d055      	beq.n	bae88 <_strtod_l+0xba0>
   baddc:	a336      	add	r3, pc, #216	; (adr r3, baeb8 <_strtod_l+0xbd0>)
   badde:	e9d3 2300 	ldrd	r2, r3, [r3]
   bade2:	f7fe fdc9 	bl	b9978 <__aeabi_dcmplt>
   bade6:	2800      	cmp	r0, #0
   bade8:	f47f acd0 	bne.w	ba78c <_strtod_l+0x4a4>
   badec:	a334      	add	r3, pc, #208	; (adr r3, baec0 <_strtod_l+0xbd8>)
   badee:	e9d3 2300 	ldrd	r2, r3, [r3]
   badf2:	4640      	mov	r0, r8
   badf4:	4649      	mov	r1, r9
   badf6:	f7fe fddd 	bl	b99b4 <__aeabi_dcmpgt>
   badfa:	2800      	cmp	r0, #0
   badfc:	f43f af7b 	beq.w	bacf6 <_strtod_l+0xa0e>
   bae00:	e4c4      	b.n	ba78c <_strtod_l+0x4a4>
   bae02:	9b04      	ldr	r3, [sp, #16]
   bae04:	b333      	cbz	r3, bae54 <_strtod_l+0xb6c>
   bae06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bae08:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bae0c:	d822      	bhi.n	bae54 <_strtod_l+0xb6c>
   bae0e:	a32e      	add	r3, pc, #184	; (adr r3, baec8 <_strtod_l+0xbe0>)
   bae10:	e9d3 2300 	ldrd	r2, r3, [r3]
   bae14:	4640      	mov	r0, r8
   bae16:	4649      	mov	r1, r9
   bae18:	f7fe fdb8 	bl	b998c <__aeabi_dcmple>
   bae1c:	b1a0      	cbz	r0, bae48 <_strtod_l+0xb60>
   bae1e:	4649      	mov	r1, r9
   bae20:	4640      	mov	r0, r8
   bae22:	f7fe fe0f 	bl	b9a44 <__aeabi_d2uiz>
   bae26:	2801      	cmp	r0, #1
   bae28:	bf38      	it	cc
   bae2a:	2001      	movcc	r0, #1
   bae2c:	f7fe fab8 	bl	b93a0 <__aeabi_ui2d>
   bae30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bae32:	4680      	mov	r8, r0
   bae34:	4689      	mov	r9, r1
   bae36:	bb23      	cbnz	r3, bae82 <_strtod_l+0xb9a>
   bae38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bae3c:	9010      	str	r0, [sp, #64]	; 0x40
   bae3e:	9311      	str	r3, [sp, #68]	; 0x44
   bae40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bae44:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bae48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bae4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bae4c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bae50:	1a9b      	subs	r3, r3, r2
   bae52:	9309      	str	r3, [sp, #36]	; 0x24
   bae54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bae58:	eeb0 0a48 	vmov.f32	s0, s16
   bae5c:	eef0 0a68 	vmov.f32	s1, s17
   bae60:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bae64:	f000 ffac 	bl	bbdc0 <__ulp>
   bae68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bae6c:	ec53 2b10 	vmov	r2, r3, d0
   bae70:	f7fe fb10 	bl	b9494 <__aeabi_dmul>
   bae74:	ec53 2b18 	vmov	r2, r3, d8
   bae78:	f7fe f956 	bl	b9128 <__adddf3>
   bae7c:	4682      	mov	sl, r0
   bae7e:	468b      	mov	fp, r1
   bae80:	e78d      	b.n	bad9e <_strtod_l+0xab6>
   bae82:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bae86:	e7db      	b.n	bae40 <_strtod_l+0xb58>
   bae88:	a311      	add	r3, pc, #68	; (adr r3, baed0 <_strtod_l+0xbe8>)
   bae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bae8e:	f7fe fd73 	bl	b9978 <__aeabi_dcmplt>
   bae92:	e7b2      	b.n	badfa <_strtod_l+0xb12>
   bae94:	2300      	movs	r3, #0
   bae96:	930a      	str	r3, [sp, #40]	; 0x28
   bae98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bae9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bae9c:	6013      	str	r3, [r2, #0]
   bae9e:	f7ff ba6b 	b.w	ba378 <_strtod_l+0x90>
   baea2:	2a65      	cmp	r2, #101	; 0x65
   baea4:	f43f ab5f 	beq.w	ba566 <_strtod_l+0x27e>
   baea8:	2a45      	cmp	r2, #69	; 0x45
   baeaa:	f43f ab5c 	beq.w	ba566 <_strtod_l+0x27e>
   baeae:	2301      	movs	r3, #1
   baeb0:	f7ff bb94 	b.w	ba5dc <_strtod_l+0x2f4>
   baeb4:	f3af 8000 	nop.w
   baeb8:	94a03595 	.word	0x94a03595
   baebc:	3fdfffff 	.word	0x3fdfffff
   baec0:	35afe535 	.word	0x35afe535
   baec4:	3fe00000 	.word	0x3fe00000
   baec8:	ffc00000 	.word	0xffc00000
   baecc:	41dfffff 	.word	0x41dfffff
   baed0:	94a03595 	.word	0x94a03595
   baed4:	3fcfffff 	.word	0x3fcfffff
   baed8:	3ff00000 	.word	0x3ff00000
   baedc:	7ff00000 	.word	0x7ff00000
   baee0:	7fe00000 	.word	0x7fe00000
   baee4:	7c9fffff 	.word	0x7c9fffff
   baee8:	3fe00000 	.word	0x3fe00000
   baeec:	bff00000 	.word	0xbff00000
   baef0:	7fefffff 	.word	0x7fefffff

000baef4 <strtod>:
   baef4:	460a      	mov	r2, r1
   baef6:	4601      	mov	r1, r0
   baef8:	4802      	ldr	r0, [pc, #8]	; (baf04 <strtod+0x10>)
   baefa:	4b03      	ldr	r3, [pc, #12]	; (baf08 <strtod+0x14>)
   baefc:	6800      	ldr	r0, [r0, #0]
   baefe:	f7ff b9f3 	b.w	ba2e8 <_strtod_l>
   baf02:	bf00      	nop
   baf04:	2003e2b0 	.word	0x2003e2b0
   baf08:	2003e31c 	.word	0x2003e31c

000baf0c <__register_exitproc>:
   baf0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baf10:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bafcc <__register_exitproc+0xc0>
   baf14:	4606      	mov	r6, r0
   baf16:	f8d8 0000 	ldr.w	r0, [r8]
   baf1a:	461f      	mov	r7, r3
   baf1c:	460d      	mov	r5, r1
   baf1e:	4691      	mov	r9, r2
   baf20:	f000 fbc6 	bl	bb6b0 <__retarget_lock_acquire_recursive>
   baf24:	4b25      	ldr	r3, [pc, #148]	; (bafbc <__register_exitproc+0xb0>)
   baf26:	681c      	ldr	r4, [r3, #0]
   baf28:	b934      	cbnz	r4, baf38 <__register_exitproc+0x2c>
   baf2a:	4c25      	ldr	r4, [pc, #148]	; (bafc0 <__register_exitproc+0xb4>)
   baf2c:	601c      	str	r4, [r3, #0]
   baf2e:	4b25      	ldr	r3, [pc, #148]	; (bafc4 <__register_exitproc+0xb8>)
   baf30:	b113      	cbz	r3, baf38 <__register_exitproc+0x2c>
   baf32:	681b      	ldr	r3, [r3, #0]
   baf34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   baf38:	6863      	ldr	r3, [r4, #4]
   baf3a:	2b1f      	cmp	r3, #31
   baf3c:	dd07      	ble.n	baf4e <__register_exitproc+0x42>
   baf3e:	f8d8 0000 	ldr.w	r0, [r8]
   baf42:	f000 fbb7 	bl	bb6b4 <__retarget_lock_release_recursive>
   baf46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   baf4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   baf4e:	b34e      	cbz	r6, bafa4 <__register_exitproc+0x98>
   baf50:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   baf54:	b988      	cbnz	r0, baf7a <__register_exitproc+0x6e>
   baf56:	4b1c      	ldr	r3, [pc, #112]	; (bafc8 <__register_exitproc+0xbc>)
   baf58:	b923      	cbnz	r3, baf64 <__register_exitproc+0x58>
   baf5a:	f8d8 0000 	ldr.w	r0, [r8]
   baf5e:	f000 fba8 	bl	bb6b2 <__retarget_lock_release>
   baf62:	e7f0      	b.n	baf46 <__register_exitproc+0x3a>
   baf64:	f44f 7084 	mov.w	r0, #264	; 0x108
   baf68:	f7fb fcb8 	bl	b68dc <malloc>
   baf6c:	2800      	cmp	r0, #0
   baf6e:	d0f4      	beq.n	baf5a <__register_exitproc+0x4e>
   baf70:	2300      	movs	r3, #0
   baf72:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   baf76:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   baf7a:	6863      	ldr	r3, [r4, #4]
   baf7c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   baf80:	2201      	movs	r2, #1
   baf82:	409a      	lsls	r2, r3
   baf84:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   baf88:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   baf8c:	4313      	orrs	r3, r2
   baf8e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   baf92:	2e02      	cmp	r6, #2
   baf94:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   baf98:	bf02      	ittt	eq
   baf9a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   baf9e:	4313      	orreq	r3, r2
   bafa0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bafa4:	6863      	ldr	r3, [r4, #4]
   bafa6:	f8d8 0000 	ldr.w	r0, [r8]
   bafaa:	1c5a      	adds	r2, r3, #1
   bafac:	3302      	adds	r3, #2
   bafae:	6062      	str	r2, [r4, #4]
   bafb0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bafb4:	f000 fb7e 	bl	bb6b4 <__retarget_lock_release_recursive>
   bafb8:	2000      	movs	r0, #0
   bafba:	e7c6      	b.n	baf4a <__register_exitproc+0x3e>
   bafbc:	2003e7e8 	.word	0x2003e7e8
   bafc0:	2003e75c 	.word	0x2003e75c
   bafc4:	00000000 	.word	0x00000000
   bafc8:	000b68dd 	.word	0x000b68dd
   bafcc:	2003e314 	.word	0x2003e314

000bafd0 <rshift>:
   bafd0:	6903      	ldr	r3, [r0, #16]
   bafd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bafd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bafda:	ea4f 1261 	mov.w	r2, r1, asr #5
   bafde:	f100 0414 	add.w	r4, r0, #20
   bafe2:	dd45      	ble.n	bb070 <rshift+0xa0>
   bafe4:	f011 011f 	ands.w	r1, r1, #31
   bafe8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bafec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   baff0:	d10c      	bne.n	bb00c <rshift+0x3c>
   baff2:	f100 0710 	add.w	r7, r0, #16
   baff6:	4629      	mov	r1, r5
   baff8:	42b1      	cmp	r1, r6
   baffa:	d334      	bcc.n	bb066 <rshift+0x96>
   baffc:	1a9b      	subs	r3, r3, r2
   baffe:	009b      	lsls	r3, r3, #2
   bb000:	1eea      	subs	r2, r5, #3
   bb002:	4296      	cmp	r6, r2
   bb004:	bf38      	it	cc
   bb006:	2300      	movcc	r3, #0
   bb008:	4423      	add	r3, r4
   bb00a:	e015      	b.n	bb038 <rshift+0x68>
   bb00c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bb010:	f1c1 0820 	rsb	r8, r1, #32
   bb014:	40cf      	lsrs	r7, r1
   bb016:	f105 0e04 	add.w	lr, r5, #4
   bb01a:	46a1      	mov	r9, r4
   bb01c:	4576      	cmp	r6, lr
   bb01e:	46f4      	mov	ip, lr
   bb020:	d815      	bhi.n	bb04e <rshift+0x7e>
   bb022:	1a9a      	subs	r2, r3, r2
   bb024:	0092      	lsls	r2, r2, #2
   bb026:	3a04      	subs	r2, #4
   bb028:	3501      	adds	r5, #1
   bb02a:	42ae      	cmp	r6, r5
   bb02c:	bf38      	it	cc
   bb02e:	2200      	movcc	r2, #0
   bb030:	18a3      	adds	r3, r4, r2
   bb032:	50a7      	str	r7, [r4, r2]
   bb034:	b107      	cbz	r7, bb038 <rshift+0x68>
   bb036:	3304      	adds	r3, #4
   bb038:	1b1a      	subs	r2, r3, r4
   bb03a:	42a3      	cmp	r3, r4
   bb03c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bb040:	bf08      	it	eq
   bb042:	2300      	moveq	r3, #0
   bb044:	6102      	str	r2, [r0, #16]
   bb046:	bf08      	it	eq
   bb048:	6143      	streq	r3, [r0, #20]
   bb04a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb04e:	f8dc c000 	ldr.w	ip, [ip]
   bb052:	fa0c fc08 	lsl.w	ip, ip, r8
   bb056:	ea4c 0707 	orr.w	r7, ip, r7
   bb05a:	f849 7b04 	str.w	r7, [r9], #4
   bb05e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bb062:	40cf      	lsrs	r7, r1
   bb064:	e7da      	b.n	bb01c <rshift+0x4c>
   bb066:	f851 cb04 	ldr.w	ip, [r1], #4
   bb06a:	f847 cf04 	str.w	ip, [r7, #4]!
   bb06e:	e7c3      	b.n	baff8 <rshift+0x28>
   bb070:	4623      	mov	r3, r4
   bb072:	e7e1      	b.n	bb038 <rshift+0x68>

000bb074 <__hexdig_fun>:
   bb074:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb078:	2b09      	cmp	r3, #9
   bb07a:	d802      	bhi.n	bb082 <__hexdig_fun+0xe>
   bb07c:	3820      	subs	r0, #32
   bb07e:	b2c0      	uxtb	r0, r0
   bb080:	4770      	bx	lr
   bb082:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bb086:	2b05      	cmp	r3, #5
   bb088:	d801      	bhi.n	bb08e <__hexdig_fun+0x1a>
   bb08a:	3847      	subs	r0, #71	; 0x47
   bb08c:	e7f7      	b.n	bb07e <__hexdig_fun+0xa>
   bb08e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bb092:	2b05      	cmp	r3, #5
   bb094:	d801      	bhi.n	bb09a <__hexdig_fun+0x26>
   bb096:	3827      	subs	r0, #39	; 0x27
   bb098:	e7f1      	b.n	bb07e <__hexdig_fun+0xa>
   bb09a:	2000      	movs	r0, #0
   bb09c:	4770      	bx	lr
	...

000bb0a0 <__gethex>:
   bb0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb0a4:	ed2d 8b02 	vpush	{d8}
   bb0a8:	b089      	sub	sp, #36	; 0x24
   bb0aa:	ee08 0a10 	vmov	s16, r0
   bb0ae:	9304      	str	r3, [sp, #16]
   bb0b0:	4bb4      	ldr	r3, [pc, #720]	; (bb384 <__gethex+0x2e4>)
   bb0b2:	681b      	ldr	r3, [r3, #0]
   bb0b4:	9301      	str	r3, [sp, #4]
   bb0b6:	4618      	mov	r0, r3
   bb0b8:	468b      	mov	fp, r1
   bb0ba:	4690      	mov	r8, r2
   bb0bc:	f7ff f8a6 	bl	ba20c <strlen>
   bb0c0:	9b01      	ldr	r3, [sp, #4]
   bb0c2:	f8db 2000 	ldr.w	r2, [fp]
   bb0c6:	4403      	add	r3, r0
   bb0c8:	4682      	mov	sl, r0
   bb0ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bb0ce:	9305      	str	r3, [sp, #20]
   bb0d0:	1c93      	adds	r3, r2, #2
   bb0d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bb0d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bb0da:	32fe      	adds	r2, #254	; 0xfe
   bb0dc:	18d1      	adds	r1, r2, r3
   bb0de:	461f      	mov	r7, r3
   bb0e0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb0e4:	9100      	str	r1, [sp, #0]
   bb0e6:	2830      	cmp	r0, #48	; 0x30
   bb0e8:	d0f8      	beq.n	bb0dc <__gethex+0x3c>
   bb0ea:	f7ff ffc3 	bl	bb074 <__hexdig_fun>
   bb0ee:	4604      	mov	r4, r0
   bb0f0:	2800      	cmp	r0, #0
   bb0f2:	d13a      	bne.n	bb16a <__gethex+0xca>
   bb0f4:	9901      	ldr	r1, [sp, #4]
   bb0f6:	4652      	mov	r2, sl
   bb0f8:	4638      	mov	r0, r7
   bb0fa:	f7ff f8b1 	bl	ba260 <strncmp>
   bb0fe:	4605      	mov	r5, r0
   bb100:	2800      	cmp	r0, #0
   bb102:	d168      	bne.n	bb1d6 <__gethex+0x136>
   bb104:	f817 000a 	ldrb.w	r0, [r7, sl]
   bb108:	eb07 060a 	add.w	r6, r7, sl
   bb10c:	f7ff ffb2 	bl	bb074 <__hexdig_fun>
   bb110:	2800      	cmp	r0, #0
   bb112:	d062      	beq.n	bb1da <__gethex+0x13a>
   bb114:	4633      	mov	r3, r6
   bb116:	7818      	ldrb	r0, [r3, #0]
   bb118:	2830      	cmp	r0, #48	; 0x30
   bb11a:	461f      	mov	r7, r3
   bb11c:	f103 0301 	add.w	r3, r3, #1
   bb120:	d0f9      	beq.n	bb116 <__gethex+0x76>
   bb122:	f7ff ffa7 	bl	bb074 <__hexdig_fun>
   bb126:	2301      	movs	r3, #1
   bb128:	fab0 f480 	clz	r4, r0
   bb12c:	0964      	lsrs	r4, r4, #5
   bb12e:	4635      	mov	r5, r6
   bb130:	9300      	str	r3, [sp, #0]
   bb132:	463a      	mov	r2, r7
   bb134:	4616      	mov	r6, r2
   bb136:	3201      	adds	r2, #1
   bb138:	7830      	ldrb	r0, [r6, #0]
   bb13a:	f7ff ff9b 	bl	bb074 <__hexdig_fun>
   bb13e:	2800      	cmp	r0, #0
   bb140:	d1f8      	bne.n	bb134 <__gethex+0x94>
   bb142:	9901      	ldr	r1, [sp, #4]
   bb144:	4652      	mov	r2, sl
   bb146:	4630      	mov	r0, r6
   bb148:	f7ff f88a 	bl	ba260 <strncmp>
   bb14c:	b980      	cbnz	r0, bb170 <__gethex+0xd0>
   bb14e:	b94d      	cbnz	r5, bb164 <__gethex+0xc4>
   bb150:	eb06 050a 	add.w	r5, r6, sl
   bb154:	462a      	mov	r2, r5
   bb156:	4616      	mov	r6, r2
   bb158:	3201      	adds	r2, #1
   bb15a:	7830      	ldrb	r0, [r6, #0]
   bb15c:	f7ff ff8a 	bl	bb074 <__hexdig_fun>
   bb160:	2800      	cmp	r0, #0
   bb162:	d1f8      	bne.n	bb156 <__gethex+0xb6>
   bb164:	1bad      	subs	r5, r5, r6
   bb166:	00ad      	lsls	r5, r5, #2
   bb168:	e004      	b.n	bb174 <__gethex+0xd4>
   bb16a:	2400      	movs	r4, #0
   bb16c:	4625      	mov	r5, r4
   bb16e:	e7e0      	b.n	bb132 <__gethex+0x92>
   bb170:	2d00      	cmp	r5, #0
   bb172:	d1f7      	bne.n	bb164 <__gethex+0xc4>
   bb174:	7833      	ldrb	r3, [r6, #0]
   bb176:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb17a:	2b50      	cmp	r3, #80	; 0x50
   bb17c:	d13b      	bne.n	bb1f6 <__gethex+0x156>
   bb17e:	7873      	ldrb	r3, [r6, #1]
   bb180:	2b2b      	cmp	r3, #43	; 0x2b
   bb182:	d02c      	beq.n	bb1de <__gethex+0x13e>
   bb184:	2b2d      	cmp	r3, #45	; 0x2d
   bb186:	d02e      	beq.n	bb1e6 <__gethex+0x146>
   bb188:	1c71      	adds	r1, r6, #1
   bb18a:	f04f 0900 	mov.w	r9, #0
   bb18e:	7808      	ldrb	r0, [r1, #0]
   bb190:	f7ff ff70 	bl	bb074 <__hexdig_fun>
   bb194:	1e43      	subs	r3, r0, #1
   bb196:	b2db      	uxtb	r3, r3
   bb198:	2b18      	cmp	r3, #24
   bb19a:	d82c      	bhi.n	bb1f6 <__gethex+0x156>
   bb19c:	f1a0 0210 	sub.w	r2, r0, #16
   bb1a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bb1a4:	f7ff ff66 	bl	bb074 <__hexdig_fun>
   bb1a8:	1e43      	subs	r3, r0, #1
   bb1aa:	b2db      	uxtb	r3, r3
   bb1ac:	2b18      	cmp	r3, #24
   bb1ae:	d91d      	bls.n	bb1ec <__gethex+0x14c>
   bb1b0:	f1b9 0f00 	cmp.w	r9, #0
   bb1b4:	d000      	beq.n	bb1b8 <__gethex+0x118>
   bb1b6:	4252      	negs	r2, r2
   bb1b8:	4415      	add	r5, r2
   bb1ba:	f8cb 1000 	str.w	r1, [fp]
   bb1be:	b1e4      	cbz	r4, bb1fa <__gethex+0x15a>
   bb1c0:	9b00      	ldr	r3, [sp, #0]
   bb1c2:	2b00      	cmp	r3, #0
   bb1c4:	bf14      	ite	ne
   bb1c6:	2700      	movne	r7, #0
   bb1c8:	2706      	moveq	r7, #6
   bb1ca:	4638      	mov	r0, r7
   bb1cc:	b009      	add	sp, #36	; 0x24
   bb1ce:	ecbd 8b02 	vpop	{d8}
   bb1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb1d6:	463e      	mov	r6, r7
   bb1d8:	4625      	mov	r5, r4
   bb1da:	2401      	movs	r4, #1
   bb1dc:	e7ca      	b.n	bb174 <__gethex+0xd4>
   bb1de:	f04f 0900 	mov.w	r9, #0
   bb1e2:	1cb1      	adds	r1, r6, #2
   bb1e4:	e7d3      	b.n	bb18e <__gethex+0xee>
   bb1e6:	f04f 0901 	mov.w	r9, #1
   bb1ea:	e7fa      	b.n	bb1e2 <__gethex+0x142>
   bb1ec:	230a      	movs	r3, #10
   bb1ee:	fb03 0202 	mla	r2, r3, r2, r0
   bb1f2:	3a10      	subs	r2, #16
   bb1f4:	e7d4      	b.n	bb1a0 <__gethex+0x100>
   bb1f6:	4631      	mov	r1, r6
   bb1f8:	e7df      	b.n	bb1ba <__gethex+0x11a>
   bb1fa:	1bf3      	subs	r3, r6, r7
   bb1fc:	3b01      	subs	r3, #1
   bb1fe:	4621      	mov	r1, r4
   bb200:	2b07      	cmp	r3, #7
   bb202:	dc0b      	bgt.n	bb21c <__gethex+0x17c>
   bb204:	ee18 0a10 	vmov	r0, s16
   bb208:	f000 fa68 	bl	bb6dc <_Balloc>
   bb20c:	4604      	mov	r4, r0
   bb20e:	b940      	cbnz	r0, bb222 <__gethex+0x182>
   bb210:	4b5d      	ldr	r3, [pc, #372]	; (bb388 <__gethex+0x2e8>)
   bb212:	4602      	mov	r2, r0
   bb214:	21de      	movs	r1, #222	; 0xde
   bb216:	485d      	ldr	r0, [pc, #372]	; (bb38c <__gethex+0x2ec>)
   bb218:	f7fb fb90 	bl	b693c <__assert_func>
   bb21c:	3101      	adds	r1, #1
   bb21e:	105b      	asrs	r3, r3, #1
   bb220:	e7ee      	b.n	bb200 <__gethex+0x160>
   bb222:	f100 0914 	add.w	r9, r0, #20
   bb226:	f04f 0b00 	mov.w	fp, #0
   bb22a:	f1ca 0301 	rsb	r3, sl, #1
   bb22e:	f8cd 9008 	str.w	r9, [sp, #8]
   bb232:	f8cd b000 	str.w	fp, [sp]
   bb236:	9306      	str	r3, [sp, #24]
   bb238:	42b7      	cmp	r7, r6
   bb23a:	d340      	bcc.n	bb2be <__gethex+0x21e>
   bb23c:	9802      	ldr	r0, [sp, #8]
   bb23e:	9b00      	ldr	r3, [sp, #0]
   bb240:	f840 3b04 	str.w	r3, [r0], #4
   bb244:	eba0 0009 	sub.w	r0, r0, r9
   bb248:	1080      	asrs	r0, r0, #2
   bb24a:	0146      	lsls	r6, r0, #5
   bb24c:	6120      	str	r0, [r4, #16]
   bb24e:	4618      	mov	r0, r3
   bb250:	f000 fb36 	bl	bb8c0 <__hi0bits>
   bb254:	1a30      	subs	r0, r6, r0
   bb256:	f8d8 6000 	ldr.w	r6, [r8]
   bb25a:	42b0      	cmp	r0, r6
   bb25c:	dd63      	ble.n	bb326 <__gethex+0x286>
   bb25e:	1b87      	subs	r7, r0, r6
   bb260:	4639      	mov	r1, r7
   bb262:	4620      	mov	r0, r4
   bb264:	f000 feda 	bl	bc01c <__any_on>
   bb268:	4682      	mov	sl, r0
   bb26a:	b1a8      	cbz	r0, bb298 <__gethex+0x1f8>
   bb26c:	1e7b      	subs	r3, r7, #1
   bb26e:	1159      	asrs	r1, r3, #5
   bb270:	f003 021f 	and.w	r2, r3, #31
   bb274:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bb278:	f04f 0a01 	mov.w	sl, #1
   bb27c:	fa0a f202 	lsl.w	r2, sl, r2
   bb280:	420a      	tst	r2, r1
   bb282:	d009      	beq.n	bb298 <__gethex+0x1f8>
   bb284:	4553      	cmp	r3, sl
   bb286:	dd05      	ble.n	bb294 <__gethex+0x1f4>
   bb288:	1eb9      	subs	r1, r7, #2
   bb28a:	4620      	mov	r0, r4
   bb28c:	f000 fec6 	bl	bc01c <__any_on>
   bb290:	2800      	cmp	r0, #0
   bb292:	d145      	bne.n	bb320 <__gethex+0x280>
   bb294:	f04f 0a02 	mov.w	sl, #2
   bb298:	4639      	mov	r1, r7
   bb29a:	4620      	mov	r0, r4
   bb29c:	f7ff fe98 	bl	bafd0 <rshift>
   bb2a0:	443d      	add	r5, r7
   bb2a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb2a6:	42ab      	cmp	r3, r5
   bb2a8:	da4c      	bge.n	bb344 <__gethex+0x2a4>
   bb2aa:	ee18 0a10 	vmov	r0, s16
   bb2ae:	4621      	mov	r1, r4
   bb2b0:	f000 fa54 	bl	bb75c <_Bfree>
   bb2b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb2b6:	2300      	movs	r3, #0
   bb2b8:	6013      	str	r3, [r2, #0]
   bb2ba:	27a3      	movs	r7, #163	; 0xa3
   bb2bc:	e785      	b.n	bb1ca <__gethex+0x12a>
   bb2be:	1e73      	subs	r3, r6, #1
   bb2c0:	9a05      	ldr	r2, [sp, #20]
   bb2c2:	9303      	str	r3, [sp, #12]
   bb2c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bb2c8:	4293      	cmp	r3, r2
   bb2ca:	d019      	beq.n	bb300 <__gethex+0x260>
   bb2cc:	f1bb 0f20 	cmp.w	fp, #32
   bb2d0:	d107      	bne.n	bb2e2 <__gethex+0x242>
   bb2d2:	9b02      	ldr	r3, [sp, #8]
   bb2d4:	9a00      	ldr	r2, [sp, #0]
   bb2d6:	f843 2b04 	str.w	r2, [r3], #4
   bb2da:	9302      	str	r3, [sp, #8]
   bb2dc:	2300      	movs	r3, #0
   bb2de:	9300      	str	r3, [sp, #0]
   bb2e0:	469b      	mov	fp, r3
   bb2e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bb2e6:	f7ff fec5 	bl	bb074 <__hexdig_fun>
   bb2ea:	9b00      	ldr	r3, [sp, #0]
   bb2ec:	f000 000f 	and.w	r0, r0, #15
   bb2f0:	fa00 f00b 	lsl.w	r0, r0, fp
   bb2f4:	4303      	orrs	r3, r0
   bb2f6:	9300      	str	r3, [sp, #0]
   bb2f8:	f10b 0b04 	add.w	fp, fp, #4
   bb2fc:	9b03      	ldr	r3, [sp, #12]
   bb2fe:	e00d      	b.n	bb31c <__gethex+0x27c>
   bb300:	9b03      	ldr	r3, [sp, #12]
   bb302:	9a06      	ldr	r2, [sp, #24]
   bb304:	4413      	add	r3, r2
   bb306:	42bb      	cmp	r3, r7
   bb308:	d3e0      	bcc.n	bb2cc <__gethex+0x22c>
   bb30a:	4618      	mov	r0, r3
   bb30c:	9901      	ldr	r1, [sp, #4]
   bb30e:	9307      	str	r3, [sp, #28]
   bb310:	4652      	mov	r2, sl
   bb312:	f7fe ffa5 	bl	ba260 <strncmp>
   bb316:	9b07      	ldr	r3, [sp, #28]
   bb318:	2800      	cmp	r0, #0
   bb31a:	d1d7      	bne.n	bb2cc <__gethex+0x22c>
   bb31c:	461e      	mov	r6, r3
   bb31e:	e78b      	b.n	bb238 <__gethex+0x198>
   bb320:	f04f 0a03 	mov.w	sl, #3
   bb324:	e7b8      	b.n	bb298 <__gethex+0x1f8>
   bb326:	da0a      	bge.n	bb33e <__gethex+0x29e>
   bb328:	1a37      	subs	r7, r6, r0
   bb32a:	4621      	mov	r1, r4
   bb32c:	ee18 0a10 	vmov	r0, s16
   bb330:	463a      	mov	r2, r7
   bb332:	f000 fc2f 	bl	bbb94 <__lshift>
   bb336:	1bed      	subs	r5, r5, r7
   bb338:	4604      	mov	r4, r0
   bb33a:	f100 0914 	add.w	r9, r0, #20
   bb33e:	f04f 0a00 	mov.w	sl, #0
   bb342:	e7ae      	b.n	bb2a2 <__gethex+0x202>
   bb344:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bb348:	42a8      	cmp	r0, r5
   bb34a:	dd72      	ble.n	bb432 <__gethex+0x392>
   bb34c:	1b45      	subs	r5, r0, r5
   bb34e:	42ae      	cmp	r6, r5
   bb350:	dc36      	bgt.n	bb3c0 <__gethex+0x320>
   bb352:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb356:	2b02      	cmp	r3, #2
   bb358:	d02a      	beq.n	bb3b0 <__gethex+0x310>
   bb35a:	2b03      	cmp	r3, #3
   bb35c:	d02c      	beq.n	bb3b8 <__gethex+0x318>
   bb35e:	2b01      	cmp	r3, #1
   bb360:	d11c      	bne.n	bb39c <__gethex+0x2fc>
   bb362:	42ae      	cmp	r6, r5
   bb364:	d11a      	bne.n	bb39c <__gethex+0x2fc>
   bb366:	2e01      	cmp	r6, #1
   bb368:	d112      	bne.n	bb390 <__gethex+0x2f0>
   bb36a:	9a04      	ldr	r2, [sp, #16]
   bb36c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb370:	6013      	str	r3, [r2, #0]
   bb372:	2301      	movs	r3, #1
   bb374:	6123      	str	r3, [r4, #16]
   bb376:	f8c9 3000 	str.w	r3, [r9]
   bb37a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb37c:	2762      	movs	r7, #98	; 0x62
   bb37e:	601c      	str	r4, [r3, #0]
   bb380:	e723      	b.n	bb1ca <__gethex+0x12a>
   bb382:	bf00      	nop
   bb384:	000bd11c 	.word	0x000bd11c
   bb388:	000bd0a9 	.word	0x000bd0a9
   bb38c:	000bd0ba 	.word	0x000bd0ba
   bb390:	1e71      	subs	r1, r6, #1
   bb392:	4620      	mov	r0, r4
   bb394:	f000 fe42 	bl	bc01c <__any_on>
   bb398:	2800      	cmp	r0, #0
   bb39a:	d1e6      	bne.n	bb36a <__gethex+0x2ca>
   bb39c:	ee18 0a10 	vmov	r0, s16
   bb3a0:	4621      	mov	r1, r4
   bb3a2:	f000 f9db 	bl	bb75c <_Bfree>
   bb3a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb3a8:	2300      	movs	r3, #0
   bb3aa:	6013      	str	r3, [r2, #0]
   bb3ac:	2750      	movs	r7, #80	; 0x50
   bb3ae:	e70c      	b.n	bb1ca <__gethex+0x12a>
   bb3b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb3b2:	2b00      	cmp	r3, #0
   bb3b4:	d1f2      	bne.n	bb39c <__gethex+0x2fc>
   bb3b6:	e7d8      	b.n	bb36a <__gethex+0x2ca>
   bb3b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb3ba:	2b00      	cmp	r3, #0
   bb3bc:	d1d5      	bne.n	bb36a <__gethex+0x2ca>
   bb3be:	e7ed      	b.n	bb39c <__gethex+0x2fc>
   bb3c0:	1e6f      	subs	r7, r5, #1
   bb3c2:	f1ba 0f00 	cmp.w	sl, #0
   bb3c6:	d131      	bne.n	bb42c <__gethex+0x38c>
   bb3c8:	b127      	cbz	r7, bb3d4 <__gethex+0x334>
   bb3ca:	4639      	mov	r1, r7
   bb3cc:	4620      	mov	r0, r4
   bb3ce:	f000 fe25 	bl	bc01c <__any_on>
   bb3d2:	4682      	mov	sl, r0
   bb3d4:	117b      	asrs	r3, r7, #5
   bb3d6:	2101      	movs	r1, #1
   bb3d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bb3dc:	f007 071f 	and.w	r7, r7, #31
   bb3e0:	fa01 f707 	lsl.w	r7, r1, r7
   bb3e4:	421f      	tst	r7, r3
   bb3e6:	4629      	mov	r1, r5
   bb3e8:	4620      	mov	r0, r4
   bb3ea:	bf18      	it	ne
   bb3ec:	f04a 0a02 	orrne.w	sl, sl, #2
   bb3f0:	1b76      	subs	r6, r6, r5
   bb3f2:	f7ff fded 	bl	bafd0 <rshift>
   bb3f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bb3fa:	2702      	movs	r7, #2
   bb3fc:	f1ba 0f00 	cmp.w	sl, #0
   bb400:	d048      	beq.n	bb494 <__gethex+0x3f4>
   bb402:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb406:	2b02      	cmp	r3, #2
   bb408:	d015      	beq.n	bb436 <__gethex+0x396>
   bb40a:	2b03      	cmp	r3, #3
   bb40c:	d017      	beq.n	bb43e <__gethex+0x39e>
   bb40e:	2b01      	cmp	r3, #1
   bb410:	d109      	bne.n	bb426 <__gethex+0x386>
   bb412:	f01a 0f02 	tst.w	sl, #2
   bb416:	d006      	beq.n	bb426 <__gethex+0x386>
   bb418:	f8d9 0000 	ldr.w	r0, [r9]
   bb41c:	ea4a 0a00 	orr.w	sl, sl, r0
   bb420:	f01a 0f01 	tst.w	sl, #1
   bb424:	d10e      	bne.n	bb444 <__gethex+0x3a4>
   bb426:	f047 0710 	orr.w	r7, r7, #16
   bb42a:	e033      	b.n	bb494 <__gethex+0x3f4>
   bb42c:	f04f 0a01 	mov.w	sl, #1
   bb430:	e7d0      	b.n	bb3d4 <__gethex+0x334>
   bb432:	2701      	movs	r7, #1
   bb434:	e7e2      	b.n	bb3fc <__gethex+0x35c>
   bb436:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb438:	f1c3 0301 	rsb	r3, r3, #1
   bb43c:	9315      	str	r3, [sp, #84]	; 0x54
   bb43e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb440:	2b00      	cmp	r3, #0
   bb442:	d0f0      	beq.n	bb426 <__gethex+0x386>
   bb444:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bb448:	f104 0314 	add.w	r3, r4, #20
   bb44c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bb450:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bb454:	f04f 0c00 	mov.w	ip, #0
   bb458:	4618      	mov	r0, r3
   bb45a:	f853 2b04 	ldr.w	r2, [r3], #4
   bb45e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bb462:	d01c      	beq.n	bb49e <__gethex+0x3fe>
   bb464:	3201      	adds	r2, #1
   bb466:	6002      	str	r2, [r0, #0]
   bb468:	2f02      	cmp	r7, #2
   bb46a:	f104 0314 	add.w	r3, r4, #20
   bb46e:	d13f      	bne.n	bb4f0 <__gethex+0x450>
   bb470:	f8d8 2000 	ldr.w	r2, [r8]
   bb474:	3a01      	subs	r2, #1
   bb476:	42b2      	cmp	r2, r6
   bb478:	d10a      	bne.n	bb490 <__gethex+0x3f0>
   bb47a:	1171      	asrs	r1, r6, #5
   bb47c:	2201      	movs	r2, #1
   bb47e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bb482:	f006 061f 	and.w	r6, r6, #31
   bb486:	fa02 f606 	lsl.w	r6, r2, r6
   bb48a:	421e      	tst	r6, r3
   bb48c:	bf18      	it	ne
   bb48e:	4617      	movne	r7, r2
   bb490:	f047 0720 	orr.w	r7, r7, #32
   bb494:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb496:	601c      	str	r4, [r3, #0]
   bb498:	9b04      	ldr	r3, [sp, #16]
   bb49a:	601d      	str	r5, [r3, #0]
   bb49c:	e695      	b.n	bb1ca <__gethex+0x12a>
   bb49e:	4299      	cmp	r1, r3
   bb4a0:	f843 cc04 	str.w	ip, [r3, #-4]
   bb4a4:	d8d8      	bhi.n	bb458 <__gethex+0x3b8>
   bb4a6:	68a3      	ldr	r3, [r4, #8]
   bb4a8:	459b      	cmp	fp, r3
   bb4aa:	db19      	blt.n	bb4e0 <__gethex+0x440>
   bb4ac:	6861      	ldr	r1, [r4, #4]
   bb4ae:	ee18 0a10 	vmov	r0, s16
   bb4b2:	3101      	adds	r1, #1
   bb4b4:	f000 f912 	bl	bb6dc <_Balloc>
   bb4b8:	4681      	mov	r9, r0
   bb4ba:	b918      	cbnz	r0, bb4c4 <__gethex+0x424>
   bb4bc:	4b1a      	ldr	r3, [pc, #104]	; (bb528 <__gethex+0x488>)
   bb4be:	4602      	mov	r2, r0
   bb4c0:	2184      	movs	r1, #132	; 0x84
   bb4c2:	e6a8      	b.n	bb216 <__gethex+0x176>
   bb4c4:	6922      	ldr	r2, [r4, #16]
   bb4c6:	3202      	adds	r2, #2
   bb4c8:	f104 010c 	add.w	r1, r4, #12
   bb4cc:	0092      	lsls	r2, r2, #2
   bb4ce:	300c      	adds	r0, #12
   bb4d0:	f7fe fe2b 	bl	ba12a <memcpy>
   bb4d4:	4621      	mov	r1, r4
   bb4d6:	ee18 0a10 	vmov	r0, s16
   bb4da:	f000 f93f 	bl	bb75c <_Bfree>
   bb4de:	464c      	mov	r4, r9
   bb4e0:	6923      	ldr	r3, [r4, #16]
   bb4e2:	1c5a      	adds	r2, r3, #1
   bb4e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bb4e8:	6122      	str	r2, [r4, #16]
   bb4ea:	2201      	movs	r2, #1
   bb4ec:	615a      	str	r2, [r3, #20]
   bb4ee:	e7bb      	b.n	bb468 <__gethex+0x3c8>
   bb4f0:	6922      	ldr	r2, [r4, #16]
   bb4f2:	455a      	cmp	r2, fp
   bb4f4:	dd0b      	ble.n	bb50e <__gethex+0x46e>
   bb4f6:	2101      	movs	r1, #1
   bb4f8:	4620      	mov	r0, r4
   bb4fa:	f7ff fd69 	bl	bafd0 <rshift>
   bb4fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb502:	3501      	adds	r5, #1
   bb504:	42ab      	cmp	r3, r5
   bb506:	f6ff aed0 	blt.w	bb2aa <__gethex+0x20a>
   bb50a:	2701      	movs	r7, #1
   bb50c:	e7c0      	b.n	bb490 <__gethex+0x3f0>
   bb50e:	f016 061f 	ands.w	r6, r6, #31
   bb512:	d0fa      	beq.n	bb50a <__gethex+0x46a>
   bb514:	4453      	add	r3, sl
   bb516:	f1c6 0620 	rsb	r6, r6, #32
   bb51a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bb51e:	f000 f9cf 	bl	bb8c0 <__hi0bits>
   bb522:	42b0      	cmp	r0, r6
   bb524:	dbe7      	blt.n	bb4f6 <__gethex+0x456>
   bb526:	e7f0      	b.n	bb50a <__gethex+0x46a>
   bb528:	000bd0a9 	.word	0x000bd0a9

000bb52c <L_shift>:
   bb52c:	f1c2 0208 	rsb	r2, r2, #8
   bb530:	0092      	lsls	r2, r2, #2
   bb532:	b570      	push	{r4, r5, r6, lr}
   bb534:	f1c2 0620 	rsb	r6, r2, #32
   bb538:	6843      	ldr	r3, [r0, #4]
   bb53a:	6804      	ldr	r4, [r0, #0]
   bb53c:	fa03 f506 	lsl.w	r5, r3, r6
   bb540:	432c      	orrs	r4, r5
   bb542:	40d3      	lsrs	r3, r2
   bb544:	6004      	str	r4, [r0, #0]
   bb546:	f840 3f04 	str.w	r3, [r0, #4]!
   bb54a:	4288      	cmp	r0, r1
   bb54c:	d3f4      	bcc.n	bb538 <L_shift+0xc>
   bb54e:	bd70      	pop	{r4, r5, r6, pc}

000bb550 <__match>:
   bb550:	b530      	push	{r4, r5, lr}
   bb552:	6803      	ldr	r3, [r0, #0]
   bb554:	3301      	adds	r3, #1
   bb556:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb55a:	b914      	cbnz	r4, bb562 <__match+0x12>
   bb55c:	6003      	str	r3, [r0, #0]
   bb55e:	2001      	movs	r0, #1
   bb560:	bd30      	pop	{r4, r5, pc}
   bb562:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb566:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bb56a:	2d19      	cmp	r5, #25
   bb56c:	bf98      	it	ls
   bb56e:	3220      	addls	r2, #32
   bb570:	42a2      	cmp	r2, r4
   bb572:	d0f0      	beq.n	bb556 <__match+0x6>
   bb574:	2000      	movs	r0, #0
   bb576:	e7f3      	b.n	bb560 <__match+0x10>

000bb578 <__hexnan>:
   bb578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb57c:	680b      	ldr	r3, [r1, #0]
   bb57e:	115e      	asrs	r6, r3, #5
   bb580:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bb584:	f013 031f 	ands.w	r3, r3, #31
   bb588:	b087      	sub	sp, #28
   bb58a:	bf18      	it	ne
   bb58c:	3604      	addne	r6, #4
   bb58e:	2500      	movs	r5, #0
   bb590:	1f37      	subs	r7, r6, #4
   bb592:	4690      	mov	r8, r2
   bb594:	6802      	ldr	r2, [r0, #0]
   bb596:	9301      	str	r3, [sp, #4]
   bb598:	4682      	mov	sl, r0
   bb59a:	f846 5c04 	str.w	r5, [r6, #-4]
   bb59e:	46b9      	mov	r9, r7
   bb5a0:	463c      	mov	r4, r7
   bb5a2:	9502      	str	r5, [sp, #8]
   bb5a4:	46ab      	mov	fp, r5
   bb5a6:	7851      	ldrb	r1, [r2, #1]
   bb5a8:	1c53      	adds	r3, r2, #1
   bb5aa:	9303      	str	r3, [sp, #12]
   bb5ac:	b341      	cbz	r1, bb600 <__hexnan+0x88>
   bb5ae:	4608      	mov	r0, r1
   bb5b0:	9205      	str	r2, [sp, #20]
   bb5b2:	9104      	str	r1, [sp, #16]
   bb5b4:	f7ff fd5e 	bl	bb074 <__hexdig_fun>
   bb5b8:	2800      	cmp	r0, #0
   bb5ba:	d14f      	bne.n	bb65c <__hexnan+0xe4>
   bb5bc:	9904      	ldr	r1, [sp, #16]
   bb5be:	9a05      	ldr	r2, [sp, #20]
   bb5c0:	2920      	cmp	r1, #32
   bb5c2:	d818      	bhi.n	bb5f6 <__hexnan+0x7e>
   bb5c4:	9b02      	ldr	r3, [sp, #8]
   bb5c6:	459b      	cmp	fp, r3
   bb5c8:	dd13      	ble.n	bb5f2 <__hexnan+0x7a>
   bb5ca:	454c      	cmp	r4, r9
   bb5cc:	d206      	bcs.n	bb5dc <__hexnan+0x64>
   bb5ce:	2d07      	cmp	r5, #7
   bb5d0:	dc04      	bgt.n	bb5dc <__hexnan+0x64>
   bb5d2:	462a      	mov	r2, r5
   bb5d4:	4649      	mov	r1, r9
   bb5d6:	4620      	mov	r0, r4
   bb5d8:	f7ff ffa8 	bl	bb52c <L_shift>
   bb5dc:	4544      	cmp	r4, r8
   bb5de:	d950      	bls.n	bb682 <__hexnan+0x10a>
   bb5e0:	2300      	movs	r3, #0
   bb5e2:	f1a4 0904 	sub.w	r9, r4, #4
   bb5e6:	f844 3c04 	str.w	r3, [r4, #-4]
   bb5ea:	f8cd b008 	str.w	fp, [sp, #8]
   bb5ee:	464c      	mov	r4, r9
   bb5f0:	461d      	mov	r5, r3
   bb5f2:	9a03      	ldr	r2, [sp, #12]
   bb5f4:	e7d7      	b.n	bb5a6 <__hexnan+0x2e>
   bb5f6:	2929      	cmp	r1, #41	; 0x29
   bb5f8:	d156      	bne.n	bb6a8 <__hexnan+0x130>
   bb5fa:	3202      	adds	r2, #2
   bb5fc:	f8ca 2000 	str.w	r2, [sl]
   bb600:	f1bb 0f00 	cmp.w	fp, #0
   bb604:	d050      	beq.n	bb6a8 <__hexnan+0x130>
   bb606:	454c      	cmp	r4, r9
   bb608:	d206      	bcs.n	bb618 <__hexnan+0xa0>
   bb60a:	2d07      	cmp	r5, #7
   bb60c:	dc04      	bgt.n	bb618 <__hexnan+0xa0>
   bb60e:	462a      	mov	r2, r5
   bb610:	4649      	mov	r1, r9
   bb612:	4620      	mov	r0, r4
   bb614:	f7ff ff8a 	bl	bb52c <L_shift>
   bb618:	4544      	cmp	r4, r8
   bb61a:	d934      	bls.n	bb686 <__hexnan+0x10e>
   bb61c:	f1a8 0204 	sub.w	r2, r8, #4
   bb620:	4623      	mov	r3, r4
   bb622:	f853 1b04 	ldr.w	r1, [r3], #4
   bb626:	f842 1f04 	str.w	r1, [r2, #4]!
   bb62a:	429f      	cmp	r7, r3
   bb62c:	d2f9      	bcs.n	bb622 <__hexnan+0xaa>
   bb62e:	1b3b      	subs	r3, r7, r4
   bb630:	f023 0303 	bic.w	r3, r3, #3
   bb634:	3304      	adds	r3, #4
   bb636:	3401      	adds	r4, #1
   bb638:	3e03      	subs	r6, #3
   bb63a:	42b4      	cmp	r4, r6
   bb63c:	bf88      	it	hi
   bb63e:	2304      	movhi	r3, #4
   bb640:	4443      	add	r3, r8
   bb642:	2200      	movs	r2, #0
   bb644:	f843 2b04 	str.w	r2, [r3], #4
   bb648:	429f      	cmp	r7, r3
   bb64a:	d2fb      	bcs.n	bb644 <__hexnan+0xcc>
   bb64c:	683b      	ldr	r3, [r7, #0]
   bb64e:	b91b      	cbnz	r3, bb658 <__hexnan+0xe0>
   bb650:	4547      	cmp	r7, r8
   bb652:	d127      	bne.n	bb6a4 <__hexnan+0x12c>
   bb654:	2301      	movs	r3, #1
   bb656:	603b      	str	r3, [r7, #0]
   bb658:	2005      	movs	r0, #5
   bb65a:	e026      	b.n	bb6aa <__hexnan+0x132>
   bb65c:	3501      	adds	r5, #1
   bb65e:	2d08      	cmp	r5, #8
   bb660:	f10b 0b01 	add.w	fp, fp, #1
   bb664:	dd06      	ble.n	bb674 <__hexnan+0xfc>
   bb666:	4544      	cmp	r4, r8
   bb668:	d9c3      	bls.n	bb5f2 <__hexnan+0x7a>
   bb66a:	2300      	movs	r3, #0
   bb66c:	f844 3c04 	str.w	r3, [r4, #-4]
   bb670:	2501      	movs	r5, #1
   bb672:	3c04      	subs	r4, #4
   bb674:	6822      	ldr	r2, [r4, #0]
   bb676:	f000 000f 	and.w	r0, r0, #15
   bb67a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bb67e:	6022      	str	r2, [r4, #0]
   bb680:	e7b7      	b.n	bb5f2 <__hexnan+0x7a>
   bb682:	2508      	movs	r5, #8
   bb684:	e7b5      	b.n	bb5f2 <__hexnan+0x7a>
   bb686:	9b01      	ldr	r3, [sp, #4]
   bb688:	2b00      	cmp	r3, #0
   bb68a:	d0df      	beq.n	bb64c <__hexnan+0xd4>
   bb68c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb690:	f1c3 0320 	rsb	r3, r3, #32
   bb694:	fa22 f303 	lsr.w	r3, r2, r3
   bb698:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bb69c:	401a      	ands	r2, r3
   bb69e:	f846 2c04 	str.w	r2, [r6, #-4]
   bb6a2:	e7d3      	b.n	bb64c <__hexnan+0xd4>
   bb6a4:	3f04      	subs	r7, #4
   bb6a6:	e7d1      	b.n	bb64c <__hexnan+0xd4>
   bb6a8:	2004      	movs	r0, #4
   bb6aa:	b007      	add	sp, #28
   bb6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb6b0 <__retarget_lock_acquire_recursive>:
   bb6b0:	4770      	bx	lr

000bb6b2 <__retarget_lock_release>:
   bb6b2:	4770      	bx	lr

000bb6b4 <__retarget_lock_release_recursive>:
   bb6b4:	4770      	bx	lr

000bb6b6 <__ascii_mbtowc>:
   bb6b6:	b082      	sub	sp, #8
   bb6b8:	b901      	cbnz	r1, bb6bc <__ascii_mbtowc+0x6>
   bb6ba:	a901      	add	r1, sp, #4
   bb6bc:	b142      	cbz	r2, bb6d0 <__ascii_mbtowc+0x1a>
   bb6be:	b14b      	cbz	r3, bb6d4 <__ascii_mbtowc+0x1e>
   bb6c0:	7813      	ldrb	r3, [r2, #0]
   bb6c2:	600b      	str	r3, [r1, #0]
   bb6c4:	7812      	ldrb	r2, [r2, #0]
   bb6c6:	1e10      	subs	r0, r2, #0
   bb6c8:	bf18      	it	ne
   bb6ca:	2001      	movne	r0, #1
   bb6cc:	b002      	add	sp, #8
   bb6ce:	4770      	bx	lr
   bb6d0:	4610      	mov	r0, r2
   bb6d2:	e7fb      	b.n	bb6cc <__ascii_mbtowc+0x16>
   bb6d4:	f06f 0001 	mvn.w	r0, #1
   bb6d8:	e7f8      	b.n	bb6cc <__ascii_mbtowc+0x16>
	...

000bb6dc <_Balloc>:
   bb6dc:	b570      	push	{r4, r5, r6, lr}
   bb6de:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bb6e0:	4604      	mov	r4, r0
   bb6e2:	460d      	mov	r5, r1
   bb6e4:	b976      	cbnz	r6, bb704 <_Balloc+0x28>
   bb6e6:	2010      	movs	r0, #16
   bb6e8:	f7fb f8f8 	bl	b68dc <malloc>
   bb6ec:	4602      	mov	r2, r0
   bb6ee:	6260      	str	r0, [r4, #36]	; 0x24
   bb6f0:	b920      	cbnz	r0, bb6fc <_Balloc+0x20>
   bb6f2:	4b18      	ldr	r3, [pc, #96]	; (bb754 <_Balloc+0x78>)
   bb6f4:	4818      	ldr	r0, [pc, #96]	; (bb758 <_Balloc+0x7c>)
   bb6f6:	2166      	movs	r1, #102	; 0x66
   bb6f8:	f7fb f920 	bl	b693c <__assert_func>
   bb6fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bb700:	6006      	str	r6, [r0, #0]
   bb702:	60c6      	str	r6, [r0, #12]
   bb704:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bb706:	68f3      	ldr	r3, [r6, #12]
   bb708:	b183      	cbz	r3, bb72c <_Balloc+0x50>
   bb70a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb70c:	68db      	ldr	r3, [r3, #12]
   bb70e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bb712:	b9b8      	cbnz	r0, bb744 <_Balloc+0x68>
   bb714:	2101      	movs	r1, #1
   bb716:	fa01 f605 	lsl.w	r6, r1, r5
   bb71a:	1d72      	adds	r2, r6, #5
   bb71c:	0092      	lsls	r2, r2, #2
   bb71e:	4620      	mov	r0, r4
   bb720:	f000 fc9d 	bl	bc05e <_calloc_r>
   bb724:	b160      	cbz	r0, bb740 <_Balloc+0x64>
   bb726:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bb72a:	e00e      	b.n	bb74a <_Balloc+0x6e>
   bb72c:	2221      	movs	r2, #33	; 0x21
   bb72e:	2104      	movs	r1, #4
   bb730:	4620      	mov	r0, r4
   bb732:	f000 fc94 	bl	bc05e <_calloc_r>
   bb736:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb738:	60f0      	str	r0, [r6, #12]
   bb73a:	68db      	ldr	r3, [r3, #12]
   bb73c:	2b00      	cmp	r3, #0
   bb73e:	d1e4      	bne.n	bb70a <_Balloc+0x2e>
   bb740:	2000      	movs	r0, #0
   bb742:	bd70      	pop	{r4, r5, r6, pc}
   bb744:	6802      	ldr	r2, [r0, #0]
   bb746:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bb74a:	2300      	movs	r3, #0
   bb74c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bb750:	e7f7      	b.n	bb742 <_Balloc+0x66>
   bb752:	bf00      	nop
   bb754:	000bced8 	.word	0x000bced8
   bb758:	000bd130 	.word	0x000bd130

000bb75c <_Bfree>:
   bb75c:	b570      	push	{r4, r5, r6, lr}
   bb75e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bb760:	4605      	mov	r5, r0
   bb762:	460c      	mov	r4, r1
   bb764:	b976      	cbnz	r6, bb784 <_Bfree+0x28>
   bb766:	2010      	movs	r0, #16
   bb768:	f7fb f8b8 	bl	b68dc <malloc>
   bb76c:	4602      	mov	r2, r0
   bb76e:	6268      	str	r0, [r5, #36]	; 0x24
   bb770:	b920      	cbnz	r0, bb77c <_Bfree+0x20>
   bb772:	4b09      	ldr	r3, [pc, #36]	; (bb798 <_Bfree+0x3c>)
   bb774:	4809      	ldr	r0, [pc, #36]	; (bb79c <_Bfree+0x40>)
   bb776:	218a      	movs	r1, #138	; 0x8a
   bb778:	f7fb f8e0 	bl	b693c <__assert_func>
   bb77c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bb780:	6006      	str	r6, [r0, #0]
   bb782:	60c6      	str	r6, [r0, #12]
   bb784:	b13c      	cbz	r4, bb796 <_Bfree+0x3a>
   bb786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bb788:	6862      	ldr	r2, [r4, #4]
   bb78a:	68db      	ldr	r3, [r3, #12]
   bb78c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bb790:	6021      	str	r1, [r4, #0]
   bb792:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bb796:	bd70      	pop	{r4, r5, r6, pc}
   bb798:	000bced8 	.word	0x000bced8
   bb79c:	000bd130 	.word	0x000bd130

000bb7a0 <__multadd>:
   bb7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb7a4:	690d      	ldr	r5, [r1, #16]
   bb7a6:	4607      	mov	r7, r0
   bb7a8:	460c      	mov	r4, r1
   bb7aa:	461e      	mov	r6, r3
   bb7ac:	f101 0c14 	add.w	ip, r1, #20
   bb7b0:	2000      	movs	r0, #0
   bb7b2:	f8dc 3000 	ldr.w	r3, [ip]
   bb7b6:	b299      	uxth	r1, r3
   bb7b8:	fb02 6101 	mla	r1, r2, r1, r6
   bb7bc:	0c1e      	lsrs	r6, r3, #16
   bb7be:	0c0b      	lsrs	r3, r1, #16
   bb7c0:	fb02 3306 	mla	r3, r2, r6, r3
   bb7c4:	b289      	uxth	r1, r1
   bb7c6:	3001      	adds	r0, #1
   bb7c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bb7cc:	4285      	cmp	r5, r0
   bb7ce:	f84c 1b04 	str.w	r1, [ip], #4
   bb7d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bb7d6:	dcec      	bgt.n	bb7b2 <__multadd+0x12>
   bb7d8:	b30e      	cbz	r6, bb81e <__multadd+0x7e>
   bb7da:	68a3      	ldr	r3, [r4, #8]
   bb7dc:	42ab      	cmp	r3, r5
   bb7de:	dc19      	bgt.n	bb814 <__multadd+0x74>
   bb7e0:	6861      	ldr	r1, [r4, #4]
   bb7e2:	4638      	mov	r0, r7
   bb7e4:	3101      	adds	r1, #1
   bb7e6:	f7ff ff79 	bl	bb6dc <_Balloc>
   bb7ea:	4680      	mov	r8, r0
   bb7ec:	b928      	cbnz	r0, bb7fa <__multadd+0x5a>
   bb7ee:	4602      	mov	r2, r0
   bb7f0:	4b0c      	ldr	r3, [pc, #48]	; (bb824 <__multadd+0x84>)
   bb7f2:	480d      	ldr	r0, [pc, #52]	; (bb828 <__multadd+0x88>)
   bb7f4:	21b5      	movs	r1, #181	; 0xb5
   bb7f6:	f7fb f8a1 	bl	b693c <__assert_func>
   bb7fa:	6922      	ldr	r2, [r4, #16]
   bb7fc:	3202      	adds	r2, #2
   bb7fe:	f104 010c 	add.w	r1, r4, #12
   bb802:	0092      	lsls	r2, r2, #2
   bb804:	300c      	adds	r0, #12
   bb806:	f7fe fc90 	bl	ba12a <memcpy>
   bb80a:	4621      	mov	r1, r4
   bb80c:	4638      	mov	r0, r7
   bb80e:	f7ff ffa5 	bl	bb75c <_Bfree>
   bb812:	4644      	mov	r4, r8
   bb814:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bb818:	3501      	adds	r5, #1
   bb81a:	615e      	str	r6, [r3, #20]
   bb81c:	6125      	str	r5, [r4, #16]
   bb81e:	4620      	mov	r0, r4
   bb820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb824:	000bd0a9 	.word	0x000bd0a9
   bb828:	000bd130 	.word	0x000bd130

000bb82c <__s2b>:
   bb82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb830:	460c      	mov	r4, r1
   bb832:	4615      	mov	r5, r2
   bb834:	461f      	mov	r7, r3
   bb836:	2209      	movs	r2, #9
   bb838:	3308      	adds	r3, #8
   bb83a:	4606      	mov	r6, r0
   bb83c:	fb93 f3f2 	sdiv	r3, r3, r2
   bb840:	2100      	movs	r1, #0
   bb842:	2201      	movs	r2, #1
   bb844:	429a      	cmp	r2, r3
   bb846:	db09      	blt.n	bb85c <__s2b+0x30>
   bb848:	4630      	mov	r0, r6
   bb84a:	f7ff ff47 	bl	bb6dc <_Balloc>
   bb84e:	b940      	cbnz	r0, bb862 <__s2b+0x36>
   bb850:	4602      	mov	r2, r0
   bb852:	4b19      	ldr	r3, [pc, #100]	; (bb8b8 <__s2b+0x8c>)
   bb854:	4819      	ldr	r0, [pc, #100]	; (bb8bc <__s2b+0x90>)
   bb856:	21ce      	movs	r1, #206	; 0xce
   bb858:	f7fb f870 	bl	b693c <__assert_func>
   bb85c:	0052      	lsls	r2, r2, #1
   bb85e:	3101      	adds	r1, #1
   bb860:	e7f0      	b.n	bb844 <__s2b+0x18>
   bb862:	9b08      	ldr	r3, [sp, #32]
   bb864:	6143      	str	r3, [r0, #20]
   bb866:	2d09      	cmp	r5, #9
   bb868:	f04f 0301 	mov.w	r3, #1
   bb86c:	6103      	str	r3, [r0, #16]
   bb86e:	dd16      	ble.n	bb89e <__s2b+0x72>
   bb870:	f104 0909 	add.w	r9, r4, #9
   bb874:	46c8      	mov	r8, r9
   bb876:	442c      	add	r4, r5
   bb878:	f818 3b01 	ldrb.w	r3, [r8], #1
   bb87c:	4601      	mov	r1, r0
   bb87e:	3b30      	subs	r3, #48	; 0x30
   bb880:	220a      	movs	r2, #10
   bb882:	4630      	mov	r0, r6
   bb884:	f7ff ff8c 	bl	bb7a0 <__multadd>
   bb888:	45a0      	cmp	r8, r4
   bb88a:	d1f5      	bne.n	bb878 <__s2b+0x4c>
   bb88c:	f1a5 0408 	sub.w	r4, r5, #8
   bb890:	444c      	add	r4, r9
   bb892:	1b2d      	subs	r5, r5, r4
   bb894:	1963      	adds	r3, r4, r5
   bb896:	42bb      	cmp	r3, r7
   bb898:	db04      	blt.n	bb8a4 <__s2b+0x78>
   bb89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb89e:	340a      	adds	r4, #10
   bb8a0:	2509      	movs	r5, #9
   bb8a2:	e7f6      	b.n	bb892 <__s2b+0x66>
   bb8a4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bb8a8:	4601      	mov	r1, r0
   bb8aa:	3b30      	subs	r3, #48	; 0x30
   bb8ac:	220a      	movs	r2, #10
   bb8ae:	4630      	mov	r0, r6
   bb8b0:	f7ff ff76 	bl	bb7a0 <__multadd>
   bb8b4:	e7ee      	b.n	bb894 <__s2b+0x68>
   bb8b6:	bf00      	nop
   bb8b8:	000bd0a9 	.word	0x000bd0a9
   bb8bc:	000bd130 	.word	0x000bd130

000bb8c0 <__hi0bits>:
   bb8c0:	0c03      	lsrs	r3, r0, #16
   bb8c2:	041b      	lsls	r3, r3, #16
   bb8c4:	b9d3      	cbnz	r3, bb8fc <__hi0bits+0x3c>
   bb8c6:	0400      	lsls	r0, r0, #16
   bb8c8:	2310      	movs	r3, #16
   bb8ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bb8ce:	bf04      	itt	eq
   bb8d0:	0200      	lsleq	r0, r0, #8
   bb8d2:	3308      	addeq	r3, #8
   bb8d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bb8d8:	bf04      	itt	eq
   bb8da:	0100      	lsleq	r0, r0, #4
   bb8dc:	3304      	addeq	r3, #4
   bb8de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bb8e2:	bf04      	itt	eq
   bb8e4:	0080      	lsleq	r0, r0, #2
   bb8e6:	3302      	addeq	r3, #2
   bb8e8:	2800      	cmp	r0, #0
   bb8ea:	db05      	blt.n	bb8f8 <__hi0bits+0x38>
   bb8ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bb8f0:	f103 0301 	add.w	r3, r3, #1
   bb8f4:	bf08      	it	eq
   bb8f6:	2320      	moveq	r3, #32
   bb8f8:	4618      	mov	r0, r3
   bb8fa:	4770      	bx	lr
   bb8fc:	2300      	movs	r3, #0
   bb8fe:	e7e4      	b.n	bb8ca <__hi0bits+0xa>

000bb900 <__lo0bits>:
   bb900:	6803      	ldr	r3, [r0, #0]
   bb902:	f013 0207 	ands.w	r2, r3, #7
   bb906:	4601      	mov	r1, r0
   bb908:	d00b      	beq.n	bb922 <__lo0bits+0x22>
   bb90a:	07da      	lsls	r2, r3, #31
   bb90c:	d423      	bmi.n	bb956 <__lo0bits+0x56>
   bb90e:	0798      	lsls	r0, r3, #30
   bb910:	bf49      	itett	mi
   bb912:	085b      	lsrmi	r3, r3, #1
   bb914:	089b      	lsrpl	r3, r3, #2
   bb916:	2001      	movmi	r0, #1
   bb918:	600b      	strmi	r3, [r1, #0]
   bb91a:	bf5c      	itt	pl
   bb91c:	600b      	strpl	r3, [r1, #0]
   bb91e:	2002      	movpl	r0, #2
   bb920:	4770      	bx	lr
   bb922:	b298      	uxth	r0, r3
   bb924:	b9a8      	cbnz	r0, bb952 <__lo0bits+0x52>
   bb926:	0c1b      	lsrs	r3, r3, #16
   bb928:	2010      	movs	r0, #16
   bb92a:	b2da      	uxtb	r2, r3
   bb92c:	b90a      	cbnz	r2, bb932 <__lo0bits+0x32>
   bb92e:	3008      	adds	r0, #8
   bb930:	0a1b      	lsrs	r3, r3, #8
   bb932:	071a      	lsls	r2, r3, #28
   bb934:	bf04      	itt	eq
   bb936:	091b      	lsreq	r3, r3, #4
   bb938:	3004      	addeq	r0, #4
   bb93a:	079a      	lsls	r2, r3, #30
   bb93c:	bf04      	itt	eq
   bb93e:	089b      	lsreq	r3, r3, #2
   bb940:	3002      	addeq	r0, #2
   bb942:	07da      	lsls	r2, r3, #31
   bb944:	d403      	bmi.n	bb94e <__lo0bits+0x4e>
   bb946:	085b      	lsrs	r3, r3, #1
   bb948:	f100 0001 	add.w	r0, r0, #1
   bb94c:	d005      	beq.n	bb95a <__lo0bits+0x5a>
   bb94e:	600b      	str	r3, [r1, #0]
   bb950:	4770      	bx	lr
   bb952:	4610      	mov	r0, r2
   bb954:	e7e9      	b.n	bb92a <__lo0bits+0x2a>
   bb956:	2000      	movs	r0, #0
   bb958:	4770      	bx	lr
   bb95a:	2020      	movs	r0, #32
   bb95c:	4770      	bx	lr
	...

000bb960 <__i2b>:
   bb960:	b510      	push	{r4, lr}
   bb962:	460c      	mov	r4, r1
   bb964:	2101      	movs	r1, #1
   bb966:	f7ff feb9 	bl	bb6dc <_Balloc>
   bb96a:	4602      	mov	r2, r0
   bb96c:	b928      	cbnz	r0, bb97a <__i2b+0x1a>
   bb96e:	4b05      	ldr	r3, [pc, #20]	; (bb984 <__i2b+0x24>)
   bb970:	4805      	ldr	r0, [pc, #20]	; (bb988 <__i2b+0x28>)
   bb972:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bb976:	f7fa ffe1 	bl	b693c <__assert_func>
   bb97a:	2301      	movs	r3, #1
   bb97c:	6144      	str	r4, [r0, #20]
   bb97e:	6103      	str	r3, [r0, #16]
   bb980:	bd10      	pop	{r4, pc}
   bb982:	bf00      	nop
   bb984:	000bd0a9 	.word	0x000bd0a9
   bb988:	000bd130 	.word	0x000bd130

000bb98c <__multiply>:
   bb98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb990:	4691      	mov	r9, r2
   bb992:	690a      	ldr	r2, [r1, #16]
   bb994:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb998:	429a      	cmp	r2, r3
   bb99a:	bfb8      	it	lt
   bb99c:	460b      	movlt	r3, r1
   bb99e:	460c      	mov	r4, r1
   bb9a0:	bfbc      	itt	lt
   bb9a2:	464c      	movlt	r4, r9
   bb9a4:	4699      	movlt	r9, r3
   bb9a6:	6927      	ldr	r7, [r4, #16]
   bb9a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bb9ac:	68a3      	ldr	r3, [r4, #8]
   bb9ae:	6861      	ldr	r1, [r4, #4]
   bb9b0:	eb07 060a 	add.w	r6, r7, sl
   bb9b4:	42b3      	cmp	r3, r6
   bb9b6:	b085      	sub	sp, #20
   bb9b8:	bfb8      	it	lt
   bb9ba:	3101      	addlt	r1, #1
   bb9bc:	f7ff fe8e 	bl	bb6dc <_Balloc>
   bb9c0:	b930      	cbnz	r0, bb9d0 <__multiply+0x44>
   bb9c2:	4602      	mov	r2, r0
   bb9c4:	4b44      	ldr	r3, [pc, #272]	; (bbad8 <__multiply+0x14c>)
   bb9c6:	4845      	ldr	r0, [pc, #276]	; (bbadc <__multiply+0x150>)
   bb9c8:	f240 115d 	movw	r1, #349	; 0x15d
   bb9cc:	f7fa ffb6 	bl	b693c <__assert_func>
   bb9d0:	f100 0514 	add.w	r5, r0, #20
   bb9d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bb9d8:	462b      	mov	r3, r5
   bb9da:	2200      	movs	r2, #0
   bb9dc:	4543      	cmp	r3, r8
   bb9de:	d321      	bcc.n	bba24 <__multiply+0x98>
   bb9e0:	f104 0314 	add.w	r3, r4, #20
   bb9e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bb9e8:	f109 0314 	add.w	r3, r9, #20
   bb9ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bb9f0:	9202      	str	r2, [sp, #8]
   bb9f2:	1b3a      	subs	r2, r7, r4
   bb9f4:	3a15      	subs	r2, #21
   bb9f6:	f022 0203 	bic.w	r2, r2, #3
   bb9fa:	3204      	adds	r2, #4
   bb9fc:	f104 0115 	add.w	r1, r4, #21
   bba00:	428f      	cmp	r7, r1
   bba02:	bf38      	it	cc
   bba04:	2204      	movcc	r2, #4
   bba06:	9201      	str	r2, [sp, #4]
   bba08:	9a02      	ldr	r2, [sp, #8]
   bba0a:	9303      	str	r3, [sp, #12]
   bba0c:	429a      	cmp	r2, r3
   bba0e:	d80c      	bhi.n	bba2a <__multiply+0x9e>
   bba10:	2e00      	cmp	r6, #0
   bba12:	dd03      	ble.n	bba1c <__multiply+0x90>
   bba14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bba18:	2b00      	cmp	r3, #0
   bba1a:	d05a      	beq.n	bbad2 <__multiply+0x146>
   bba1c:	6106      	str	r6, [r0, #16]
   bba1e:	b005      	add	sp, #20
   bba20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bba24:	f843 2b04 	str.w	r2, [r3], #4
   bba28:	e7d8      	b.n	bb9dc <__multiply+0x50>
   bba2a:	f8b3 a000 	ldrh.w	sl, [r3]
   bba2e:	f1ba 0f00 	cmp.w	sl, #0
   bba32:	d024      	beq.n	bba7e <__multiply+0xf2>
   bba34:	f104 0e14 	add.w	lr, r4, #20
   bba38:	46a9      	mov	r9, r5
   bba3a:	f04f 0c00 	mov.w	ip, #0
   bba3e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bba42:	f8d9 1000 	ldr.w	r1, [r9]
   bba46:	fa1f fb82 	uxth.w	fp, r2
   bba4a:	b289      	uxth	r1, r1
   bba4c:	fb0a 110b 	mla	r1, sl, fp, r1
   bba50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bba54:	f8d9 2000 	ldr.w	r2, [r9]
   bba58:	4461      	add	r1, ip
   bba5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bba5e:	fb0a c20b 	mla	r2, sl, fp, ip
   bba62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bba66:	b289      	uxth	r1, r1
   bba68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bba6c:	4577      	cmp	r7, lr
   bba6e:	f849 1b04 	str.w	r1, [r9], #4
   bba72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bba76:	d8e2      	bhi.n	bba3e <__multiply+0xb2>
   bba78:	9a01      	ldr	r2, [sp, #4]
   bba7a:	f845 c002 	str.w	ip, [r5, r2]
   bba7e:	9a03      	ldr	r2, [sp, #12]
   bba80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bba84:	3304      	adds	r3, #4
   bba86:	f1b9 0f00 	cmp.w	r9, #0
   bba8a:	d020      	beq.n	bbace <__multiply+0x142>
   bba8c:	6829      	ldr	r1, [r5, #0]
   bba8e:	f104 0c14 	add.w	ip, r4, #20
   bba92:	46ae      	mov	lr, r5
   bba94:	f04f 0a00 	mov.w	sl, #0
   bba98:	f8bc b000 	ldrh.w	fp, [ip]
   bba9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bbaa0:	fb09 220b 	mla	r2, r9, fp, r2
   bbaa4:	4492      	add	sl, r2
   bbaa6:	b289      	uxth	r1, r1
   bbaa8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bbaac:	f84e 1b04 	str.w	r1, [lr], #4
   bbab0:	f85c 2b04 	ldr.w	r2, [ip], #4
   bbab4:	f8be 1000 	ldrh.w	r1, [lr]
   bbab8:	0c12      	lsrs	r2, r2, #16
   bbaba:	fb09 1102 	mla	r1, r9, r2, r1
   bbabe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bbac2:	4567      	cmp	r7, ip
   bbac4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bbac8:	d8e6      	bhi.n	bba98 <__multiply+0x10c>
   bbaca:	9a01      	ldr	r2, [sp, #4]
   bbacc:	50a9      	str	r1, [r5, r2]
   bbace:	3504      	adds	r5, #4
   bbad0:	e79a      	b.n	bba08 <__multiply+0x7c>
   bbad2:	3e01      	subs	r6, #1
   bbad4:	e79c      	b.n	bba10 <__multiply+0x84>
   bbad6:	bf00      	nop
   bbad8:	000bd0a9 	.word	0x000bd0a9
   bbadc:	000bd130 	.word	0x000bd130

000bbae0 <__pow5mult>:
   bbae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbae4:	4615      	mov	r5, r2
   bbae6:	f012 0203 	ands.w	r2, r2, #3
   bbaea:	4606      	mov	r6, r0
   bbaec:	460f      	mov	r7, r1
   bbaee:	d007      	beq.n	bbb00 <__pow5mult+0x20>
   bbaf0:	4c25      	ldr	r4, [pc, #148]	; (bbb88 <__pow5mult+0xa8>)
   bbaf2:	3a01      	subs	r2, #1
   bbaf4:	2300      	movs	r3, #0
   bbaf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bbafa:	f7ff fe51 	bl	bb7a0 <__multadd>
   bbafe:	4607      	mov	r7, r0
   bbb00:	10ad      	asrs	r5, r5, #2
   bbb02:	d03d      	beq.n	bbb80 <__pow5mult+0xa0>
   bbb04:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bbb06:	b97c      	cbnz	r4, bbb28 <__pow5mult+0x48>
   bbb08:	2010      	movs	r0, #16
   bbb0a:	f7fa fee7 	bl	b68dc <malloc>
   bbb0e:	4602      	mov	r2, r0
   bbb10:	6270      	str	r0, [r6, #36]	; 0x24
   bbb12:	b928      	cbnz	r0, bbb20 <__pow5mult+0x40>
   bbb14:	4b1d      	ldr	r3, [pc, #116]	; (bbb8c <__pow5mult+0xac>)
   bbb16:	481e      	ldr	r0, [pc, #120]	; (bbb90 <__pow5mult+0xb0>)
   bbb18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bbb1c:	f7fa ff0e 	bl	b693c <__assert_func>
   bbb20:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bbb24:	6004      	str	r4, [r0, #0]
   bbb26:	60c4      	str	r4, [r0, #12]
   bbb28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bbb2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bbb30:	b94c      	cbnz	r4, bbb46 <__pow5mult+0x66>
   bbb32:	f240 2171 	movw	r1, #625	; 0x271
   bbb36:	4630      	mov	r0, r6
   bbb38:	f7ff ff12 	bl	bb960 <__i2b>
   bbb3c:	2300      	movs	r3, #0
   bbb3e:	f8c8 0008 	str.w	r0, [r8, #8]
   bbb42:	4604      	mov	r4, r0
   bbb44:	6003      	str	r3, [r0, #0]
   bbb46:	f04f 0900 	mov.w	r9, #0
   bbb4a:	07eb      	lsls	r3, r5, #31
   bbb4c:	d50a      	bpl.n	bbb64 <__pow5mult+0x84>
   bbb4e:	4639      	mov	r1, r7
   bbb50:	4622      	mov	r2, r4
   bbb52:	4630      	mov	r0, r6
   bbb54:	f7ff ff1a 	bl	bb98c <__multiply>
   bbb58:	4639      	mov	r1, r7
   bbb5a:	4680      	mov	r8, r0
   bbb5c:	4630      	mov	r0, r6
   bbb5e:	f7ff fdfd 	bl	bb75c <_Bfree>
   bbb62:	4647      	mov	r7, r8
   bbb64:	106d      	asrs	r5, r5, #1
   bbb66:	d00b      	beq.n	bbb80 <__pow5mult+0xa0>
   bbb68:	6820      	ldr	r0, [r4, #0]
   bbb6a:	b938      	cbnz	r0, bbb7c <__pow5mult+0x9c>
   bbb6c:	4622      	mov	r2, r4
   bbb6e:	4621      	mov	r1, r4
   bbb70:	4630      	mov	r0, r6
   bbb72:	f7ff ff0b 	bl	bb98c <__multiply>
   bbb76:	6020      	str	r0, [r4, #0]
   bbb78:	f8c0 9000 	str.w	r9, [r0]
   bbb7c:	4604      	mov	r4, r0
   bbb7e:	e7e4      	b.n	bbb4a <__pow5mult+0x6a>
   bbb80:	4638      	mov	r0, r7
   bbb82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbb86:	bf00      	nop
   bbb88:	000bd280 	.word	0x000bd280
   bbb8c:	000bced8 	.word	0x000bced8
   bbb90:	000bd130 	.word	0x000bd130

000bbb94 <__lshift>:
   bbb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbb98:	460c      	mov	r4, r1
   bbb9a:	6849      	ldr	r1, [r1, #4]
   bbb9c:	6923      	ldr	r3, [r4, #16]
   bbb9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bbba2:	68a3      	ldr	r3, [r4, #8]
   bbba4:	4607      	mov	r7, r0
   bbba6:	4691      	mov	r9, r2
   bbba8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bbbac:	f108 0601 	add.w	r6, r8, #1
   bbbb0:	42b3      	cmp	r3, r6
   bbbb2:	db0b      	blt.n	bbbcc <__lshift+0x38>
   bbbb4:	4638      	mov	r0, r7
   bbbb6:	f7ff fd91 	bl	bb6dc <_Balloc>
   bbbba:	4605      	mov	r5, r0
   bbbbc:	b948      	cbnz	r0, bbbd2 <__lshift+0x3e>
   bbbbe:	4602      	mov	r2, r0
   bbbc0:	4b2a      	ldr	r3, [pc, #168]	; (bbc6c <__lshift+0xd8>)
   bbbc2:	482b      	ldr	r0, [pc, #172]	; (bbc70 <__lshift+0xdc>)
   bbbc4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bbbc8:	f7fa feb8 	bl	b693c <__assert_func>
   bbbcc:	3101      	adds	r1, #1
   bbbce:	005b      	lsls	r3, r3, #1
   bbbd0:	e7ee      	b.n	bbbb0 <__lshift+0x1c>
   bbbd2:	2300      	movs	r3, #0
   bbbd4:	f100 0114 	add.w	r1, r0, #20
   bbbd8:	f100 0210 	add.w	r2, r0, #16
   bbbdc:	4618      	mov	r0, r3
   bbbde:	4553      	cmp	r3, sl
   bbbe0:	db37      	blt.n	bbc52 <__lshift+0xbe>
   bbbe2:	6920      	ldr	r0, [r4, #16]
   bbbe4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bbbe8:	f104 0314 	add.w	r3, r4, #20
   bbbec:	f019 091f 	ands.w	r9, r9, #31
   bbbf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bbbf4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bbbf8:	d02f      	beq.n	bbc5a <__lshift+0xc6>
   bbbfa:	f1c9 0e20 	rsb	lr, r9, #32
   bbbfe:	468a      	mov	sl, r1
   bbc00:	f04f 0c00 	mov.w	ip, #0
   bbc04:	681a      	ldr	r2, [r3, #0]
   bbc06:	fa02 f209 	lsl.w	r2, r2, r9
   bbc0a:	ea42 020c 	orr.w	r2, r2, ip
   bbc0e:	f84a 2b04 	str.w	r2, [sl], #4
   bbc12:	f853 2b04 	ldr.w	r2, [r3], #4
   bbc16:	4298      	cmp	r0, r3
   bbc18:	fa22 fc0e 	lsr.w	ip, r2, lr
   bbc1c:	d8f2      	bhi.n	bbc04 <__lshift+0x70>
   bbc1e:	1b03      	subs	r3, r0, r4
   bbc20:	3b15      	subs	r3, #21
   bbc22:	f023 0303 	bic.w	r3, r3, #3
   bbc26:	3304      	adds	r3, #4
   bbc28:	f104 0215 	add.w	r2, r4, #21
   bbc2c:	4290      	cmp	r0, r2
   bbc2e:	bf38      	it	cc
   bbc30:	2304      	movcc	r3, #4
   bbc32:	f841 c003 	str.w	ip, [r1, r3]
   bbc36:	f1bc 0f00 	cmp.w	ip, #0
   bbc3a:	d001      	beq.n	bbc40 <__lshift+0xac>
   bbc3c:	f108 0602 	add.w	r6, r8, #2
   bbc40:	3e01      	subs	r6, #1
   bbc42:	4638      	mov	r0, r7
   bbc44:	612e      	str	r6, [r5, #16]
   bbc46:	4621      	mov	r1, r4
   bbc48:	f7ff fd88 	bl	bb75c <_Bfree>
   bbc4c:	4628      	mov	r0, r5
   bbc4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbc52:	f842 0f04 	str.w	r0, [r2, #4]!
   bbc56:	3301      	adds	r3, #1
   bbc58:	e7c1      	b.n	bbbde <__lshift+0x4a>
   bbc5a:	3904      	subs	r1, #4
   bbc5c:	f853 2b04 	ldr.w	r2, [r3], #4
   bbc60:	f841 2f04 	str.w	r2, [r1, #4]!
   bbc64:	4298      	cmp	r0, r3
   bbc66:	d8f9      	bhi.n	bbc5c <__lshift+0xc8>
   bbc68:	e7ea      	b.n	bbc40 <__lshift+0xac>
   bbc6a:	bf00      	nop
   bbc6c:	000bd0a9 	.word	0x000bd0a9
   bbc70:	000bd130 	.word	0x000bd130

000bbc74 <__mcmp>:
   bbc74:	b530      	push	{r4, r5, lr}
   bbc76:	6902      	ldr	r2, [r0, #16]
   bbc78:	690c      	ldr	r4, [r1, #16]
   bbc7a:	1b12      	subs	r2, r2, r4
   bbc7c:	d10e      	bne.n	bbc9c <__mcmp+0x28>
   bbc7e:	f100 0314 	add.w	r3, r0, #20
   bbc82:	3114      	adds	r1, #20
   bbc84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bbc88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bbc8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bbc90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bbc94:	42a5      	cmp	r5, r4
   bbc96:	d003      	beq.n	bbca0 <__mcmp+0x2c>
   bbc98:	d305      	bcc.n	bbca6 <__mcmp+0x32>
   bbc9a:	2201      	movs	r2, #1
   bbc9c:	4610      	mov	r0, r2
   bbc9e:	bd30      	pop	{r4, r5, pc}
   bbca0:	4283      	cmp	r3, r0
   bbca2:	d3f3      	bcc.n	bbc8c <__mcmp+0x18>
   bbca4:	e7fa      	b.n	bbc9c <__mcmp+0x28>
   bbca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbcaa:	e7f7      	b.n	bbc9c <__mcmp+0x28>

000bbcac <__mdiff>:
   bbcac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbcb0:	460c      	mov	r4, r1
   bbcb2:	4606      	mov	r6, r0
   bbcb4:	4611      	mov	r1, r2
   bbcb6:	4620      	mov	r0, r4
   bbcb8:	4690      	mov	r8, r2
   bbcba:	f7ff ffdb 	bl	bbc74 <__mcmp>
   bbcbe:	1e05      	subs	r5, r0, #0
   bbcc0:	d110      	bne.n	bbce4 <__mdiff+0x38>
   bbcc2:	4629      	mov	r1, r5
   bbcc4:	4630      	mov	r0, r6
   bbcc6:	f7ff fd09 	bl	bb6dc <_Balloc>
   bbcca:	b930      	cbnz	r0, bbcda <__mdiff+0x2e>
   bbccc:	4b3a      	ldr	r3, [pc, #232]	; (bbdb8 <__mdiff+0x10c>)
   bbcce:	4602      	mov	r2, r0
   bbcd0:	f240 2132 	movw	r1, #562	; 0x232
   bbcd4:	4839      	ldr	r0, [pc, #228]	; (bbdbc <__mdiff+0x110>)
   bbcd6:	f7fa fe31 	bl	b693c <__assert_func>
   bbcda:	2301      	movs	r3, #1
   bbcdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bbce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbce4:	bfa4      	itt	ge
   bbce6:	4643      	movge	r3, r8
   bbce8:	46a0      	movge	r8, r4
   bbcea:	4630      	mov	r0, r6
   bbcec:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bbcf0:	bfa6      	itte	ge
   bbcf2:	461c      	movge	r4, r3
   bbcf4:	2500      	movge	r5, #0
   bbcf6:	2501      	movlt	r5, #1
   bbcf8:	f7ff fcf0 	bl	bb6dc <_Balloc>
   bbcfc:	b920      	cbnz	r0, bbd08 <__mdiff+0x5c>
   bbcfe:	4b2e      	ldr	r3, [pc, #184]	; (bbdb8 <__mdiff+0x10c>)
   bbd00:	4602      	mov	r2, r0
   bbd02:	f44f 7110 	mov.w	r1, #576	; 0x240
   bbd06:	e7e5      	b.n	bbcd4 <__mdiff+0x28>
   bbd08:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bbd0c:	6926      	ldr	r6, [r4, #16]
   bbd0e:	60c5      	str	r5, [r0, #12]
   bbd10:	f104 0914 	add.w	r9, r4, #20
   bbd14:	f108 0514 	add.w	r5, r8, #20
   bbd18:	f100 0e14 	add.w	lr, r0, #20
   bbd1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bbd20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bbd24:	f108 0210 	add.w	r2, r8, #16
   bbd28:	46f2      	mov	sl, lr
   bbd2a:	2100      	movs	r1, #0
   bbd2c:	f859 3b04 	ldr.w	r3, [r9], #4
   bbd30:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bbd34:	fa1f f883 	uxth.w	r8, r3
   bbd38:	fa11 f18b 	uxtah	r1, r1, fp
   bbd3c:	0c1b      	lsrs	r3, r3, #16
   bbd3e:	eba1 0808 	sub.w	r8, r1, r8
   bbd42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bbd46:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bbd4a:	fa1f f888 	uxth.w	r8, r8
   bbd4e:	1419      	asrs	r1, r3, #16
   bbd50:	454e      	cmp	r6, r9
   bbd52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bbd56:	f84a 3b04 	str.w	r3, [sl], #4
   bbd5a:	d8e7      	bhi.n	bbd2c <__mdiff+0x80>
   bbd5c:	1b33      	subs	r3, r6, r4
   bbd5e:	3b15      	subs	r3, #21
   bbd60:	f023 0303 	bic.w	r3, r3, #3
   bbd64:	3304      	adds	r3, #4
   bbd66:	3415      	adds	r4, #21
   bbd68:	42a6      	cmp	r6, r4
   bbd6a:	bf38      	it	cc
   bbd6c:	2304      	movcc	r3, #4
   bbd6e:	441d      	add	r5, r3
   bbd70:	4473      	add	r3, lr
   bbd72:	469e      	mov	lr, r3
   bbd74:	462e      	mov	r6, r5
   bbd76:	4566      	cmp	r6, ip
   bbd78:	d30e      	bcc.n	bbd98 <__mdiff+0xec>
   bbd7a:	f10c 0203 	add.w	r2, ip, #3
   bbd7e:	1b52      	subs	r2, r2, r5
   bbd80:	f022 0203 	bic.w	r2, r2, #3
   bbd84:	3d03      	subs	r5, #3
   bbd86:	45ac      	cmp	ip, r5
   bbd88:	bf38      	it	cc
   bbd8a:	2200      	movcc	r2, #0
   bbd8c:	441a      	add	r2, r3
   bbd8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bbd92:	b17b      	cbz	r3, bbdb4 <__mdiff+0x108>
   bbd94:	6107      	str	r7, [r0, #16]
   bbd96:	e7a3      	b.n	bbce0 <__mdiff+0x34>
   bbd98:	f856 8b04 	ldr.w	r8, [r6], #4
   bbd9c:	fa11 f288 	uxtah	r2, r1, r8
   bbda0:	1414      	asrs	r4, r2, #16
   bbda2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bbda6:	b292      	uxth	r2, r2
   bbda8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bbdac:	f84e 2b04 	str.w	r2, [lr], #4
   bbdb0:	1421      	asrs	r1, r4, #16
   bbdb2:	e7e0      	b.n	bbd76 <__mdiff+0xca>
   bbdb4:	3f01      	subs	r7, #1
   bbdb6:	e7ea      	b.n	bbd8e <__mdiff+0xe2>
   bbdb8:	000bd0a9 	.word	0x000bd0a9
   bbdbc:	000bd130 	.word	0x000bd130

000bbdc0 <__ulp>:
   bbdc0:	b082      	sub	sp, #8
   bbdc2:	ed8d 0b00 	vstr	d0, [sp]
   bbdc6:	9b01      	ldr	r3, [sp, #4]
   bbdc8:	4912      	ldr	r1, [pc, #72]	; (bbe14 <__ulp+0x54>)
   bbdca:	4019      	ands	r1, r3
   bbdcc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bbdd0:	2900      	cmp	r1, #0
   bbdd2:	dd05      	ble.n	bbde0 <__ulp+0x20>
   bbdd4:	2200      	movs	r2, #0
   bbdd6:	460b      	mov	r3, r1
   bbdd8:	ec43 2b10 	vmov	d0, r2, r3
   bbddc:	b002      	add	sp, #8
   bbdde:	4770      	bx	lr
   bbde0:	4249      	negs	r1, r1
   bbde2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bbde6:	ea4f 5021 	mov.w	r0, r1, asr #20
   bbdea:	f04f 0200 	mov.w	r2, #0
   bbdee:	f04f 0300 	mov.w	r3, #0
   bbdf2:	da04      	bge.n	bbdfe <__ulp+0x3e>
   bbdf4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bbdf8:	fa41 f300 	asr.w	r3, r1, r0
   bbdfc:	e7ec      	b.n	bbdd8 <__ulp+0x18>
   bbdfe:	f1a0 0114 	sub.w	r1, r0, #20
   bbe02:	291e      	cmp	r1, #30
   bbe04:	bfda      	itte	le
   bbe06:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bbe0a:	fa20 f101 	lsrle.w	r1, r0, r1
   bbe0e:	2101      	movgt	r1, #1
   bbe10:	460a      	mov	r2, r1
   bbe12:	e7e1      	b.n	bbdd8 <__ulp+0x18>
   bbe14:	7ff00000 	.word	0x7ff00000

000bbe18 <__b2d>:
   bbe18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbe1a:	6905      	ldr	r5, [r0, #16]
   bbe1c:	f100 0714 	add.w	r7, r0, #20
   bbe20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bbe24:	1f2e      	subs	r6, r5, #4
   bbe26:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bbe2a:	4620      	mov	r0, r4
   bbe2c:	f7ff fd48 	bl	bb8c0 <__hi0bits>
   bbe30:	f1c0 0320 	rsb	r3, r0, #32
   bbe34:	280a      	cmp	r0, #10
   bbe36:	f8df c07c 	ldr.w	ip, [pc, #124]	; bbeb4 <__b2d+0x9c>
   bbe3a:	600b      	str	r3, [r1, #0]
   bbe3c:	dc14      	bgt.n	bbe68 <__b2d+0x50>
   bbe3e:	f1c0 0e0b 	rsb	lr, r0, #11
   bbe42:	fa24 f10e 	lsr.w	r1, r4, lr
   bbe46:	42b7      	cmp	r7, r6
   bbe48:	ea41 030c 	orr.w	r3, r1, ip
   bbe4c:	bf34      	ite	cc
   bbe4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bbe52:	2100      	movcs	r1, #0
   bbe54:	3015      	adds	r0, #21
   bbe56:	fa04 f000 	lsl.w	r0, r4, r0
   bbe5a:	fa21 f10e 	lsr.w	r1, r1, lr
   bbe5e:	ea40 0201 	orr.w	r2, r0, r1
   bbe62:	ec43 2b10 	vmov	d0, r2, r3
   bbe66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbe68:	42b7      	cmp	r7, r6
   bbe6a:	bf3a      	itte	cc
   bbe6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bbe70:	f1a5 0608 	subcc.w	r6, r5, #8
   bbe74:	2100      	movcs	r1, #0
   bbe76:	380b      	subs	r0, #11
   bbe78:	d017      	beq.n	bbeaa <__b2d+0x92>
   bbe7a:	f1c0 0c20 	rsb	ip, r0, #32
   bbe7e:	fa04 f500 	lsl.w	r5, r4, r0
   bbe82:	42be      	cmp	r6, r7
   bbe84:	fa21 f40c 	lsr.w	r4, r1, ip
   bbe88:	ea45 0504 	orr.w	r5, r5, r4
   bbe8c:	bf8c      	ite	hi
   bbe8e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bbe92:	2400      	movls	r4, #0
   bbe94:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bbe98:	fa01 f000 	lsl.w	r0, r1, r0
   bbe9c:	fa24 f40c 	lsr.w	r4, r4, ip
   bbea0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bbea4:	ea40 0204 	orr.w	r2, r0, r4
   bbea8:	e7db      	b.n	bbe62 <__b2d+0x4a>
   bbeaa:	ea44 030c 	orr.w	r3, r4, ip
   bbeae:	460a      	mov	r2, r1
   bbeb0:	e7d7      	b.n	bbe62 <__b2d+0x4a>
   bbeb2:	bf00      	nop
   bbeb4:	3ff00000 	.word	0x3ff00000

000bbeb8 <__d2b>:
   bbeb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bbebc:	4689      	mov	r9, r1
   bbebe:	2101      	movs	r1, #1
   bbec0:	ec57 6b10 	vmov	r6, r7, d0
   bbec4:	4690      	mov	r8, r2
   bbec6:	f7ff fc09 	bl	bb6dc <_Balloc>
   bbeca:	4604      	mov	r4, r0
   bbecc:	b930      	cbnz	r0, bbedc <__d2b+0x24>
   bbece:	4602      	mov	r2, r0
   bbed0:	4b25      	ldr	r3, [pc, #148]	; (bbf68 <__d2b+0xb0>)
   bbed2:	4826      	ldr	r0, [pc, #152]	; (bbf6c <__d2b+0xb4>)
   bbed4:	f240 310a 	movw	r1, #778	; 0x30a
   bbed8:	f7fa fd30 	bl	b693c <__assert_func>
   bbedc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bbee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bbee4:	bb35      	cbnz	r5, bbf34 <__d2b+0x7c>
   bbee6:	2e00      	cmp	r6, #0
   bbee8:	9301      	str	r3, [sp, #4]
   bbeea:	d028      	beq.n	bbf3e <__d2b+0x86>
   bbeec:	4668      	mov	r0, sp
   bbeee:	9600      	str	r6, [sp, #0]
   bbef0:	f7ff fd06 	bl	bb900 <__lo0bits>
   bbef4:	9900      	ldr	r1, [sp, #0]
   bbef6:	b300      	cbz	r0, bbf3a <__d2b+0x82>
   bbef8:	9a01      	ldr	r2, [sp, #4]
   bbefa:	f1c0 0320 	rsb	r3, r0, #32
   bbefe:	fa02 f303 	lsl.w	r3, r2, r3
   bbf02:	430b      	orrs	r3, r1
   bbf04:	40c2      	lsrs	r2, r0
   bbf06:	6163      	str	r3, [r4, #20]
   bbf08:	9201      	str	r2, [sp, #4]
   bbf0a:	9b01      	ldr	r3, [sp, #4]
   bbf0c:	61a3      	str	r3, [r4, #24]
   bbf0e:	2b00      	cmp	r3, #0
   bbf10:	bf14      	ite	ne
   bbf12:	2202      	movne	r2, #2
   bbf14:	2201      	moveq	r2, #1
   bbf16:	6122      	str	r2, [r4, #16]
   bbf18:	b1d5      	cbz	r5, bbf50 <__d2b+0x98>
   bbf1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bbf1e:	4405      	add	r5, r0
   bbf20:	f8c9 5000 	str.w	r5, [r9]
   bbf24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bbf28:	f8c8 0000 	str.w	r0, [r8]
   bbf2c:	4620      	mov	r0, r4
   bbf2e:	b003      	add	sp, #12
   bbf30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bbf34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bbf38:	e7d5      	b.n	bbee6 <__d2b+0x2e>
   bbf3a:	6161      	str	r1, [r4, #20]
   bbf3c:	e7e5      	b.n	bbf0a <__d2b+0x52>
   bbf3e:	a801      	add	r0, sp, #4
   bbf40:	f7ff fcde 	bl	bb900 <__lo0bits>
   bbf44:	9b01      	ldr	r3, [sp, #4]
   bbf46:	6163      	str	r3, [r4, #20]
   bbf48:	2201      	movs	r2, #1
   bbf4a:	6122      	str	r2, [r4, #16]
   bbf4c:	3020      	adds	r0, #32
   bbf4e:	e7e3      	b.n	bbf18 <__d2b+0x60>
   bbf50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bbf54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bbf58:	f8c9 0000 	str.w	r0, [r9]
   bbf5c:	6918      	ldr	r0, [r3, #16]
   bbf5e:	f7ff fcaf 	bl	bb8c0 <__hi0bits>
   bbf62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bbf66:	e7df      	b.n	bbf28 <__d2b+0x70>
   bbf68:	000bd0a9 	.word	0x000bd0a9
   bbf6c:	000bd130 	.word	0x000bd130

000bbf70 <__ratio>:
   bbf70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbf74:	4688      	mov	r8, r1
   bbf76:	4669      	mov	r1, sp
   bbf78:	4681      	mov	r9, r0
   bbf7a:	f7ff ff4d 	bl	bbe18 <__b2d>
   bbf7e:	a901      	add	r1, sp, #4
   bbf80:	4640      	mov	r0, r8
   bbf82:	ec55 4b10 	vmov	r4, r5, d0
   bbf86:	f7ff ff47 	bl	bbe18 <__b2d>
   bbf8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bbf8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bbf92:	eba3 0c02 	sub.w	ip, r3, r2
   bbf96:	e9dd 3200 	ldrd	r3, r2, [sp]
   bbf9a:	1a9b      	subs	r3, r3, r2
   bbf9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bbfa0:	ec51 0b10 	vmov	r0, r1, d0
   bbfa4:	2b00      	cmp	r3, #0
   bbfa6:	bfd6      	itet	le
   bbfa8:	460a      	movle	r2, r1
   bbfaa:	462a      	movgt	r2, r5
   bbfac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bbfb0:	468b      	mov	fp, r1
   bbfb2:	462f      	mov	r7, r5
   bbfb4:	bfd4      	ite	le
   bbfb6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bbfba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bbfbe:	4620      	mov	r0, r4
   bbfc0:	ee10 2a10 	vmov	r2, s0
   bbfc4:	465b      	mov	r3, fp
   bbfc6:	4639      	mov	r1, r7
   bbfc8:	f7fd fb8e 	bl	b96e8 <__aeabi_ddiv>
   bbfcc:	ec41 0b10 	vmov	d0, r0, r1
   bbfd0:	b003      	add	sp, #12
   bbfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bbfd6 <__copybits>:
   bbfd6:	3901      	subs	r1, #1
   bbfd8:	b570      	push	{r4, r5, r6, lr}
   bbfda:	1149      	asrs	r1, r1, #5
   bbfdc:	6914      	ldr	r4, [r2, #16]
   bbfde:	3101      	adds	r1, #1
   bbfe0:	f102 0314 	add.w	r3, r2, #20
   bbfe4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bbfe8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bbfec:	1f05      	subs	r5, r0, #4
   bbfee:	42a3      	cmp	r3, r4
   bbff0:	d30c      	bcc.n	bc00c <__copybits+0x36>
   bbff2:	1aa3      	subs	r3, r4, r2
   bbff4:	3b11      	subs	r3, #17
   bbff6:	f023 0303 	bic.w	r3, r3, #3
   bbffa:	3211      	adds	r2, #17
   bbffc:	42a2      	cmp	r2, r4
   bbffe:	bf88      	it	hi
   bc000:	2300      	movhi	r3, #0
   bc002:	4418      	add	r0, r3
   bc004:	2300      	movs	r3, #0
   bc006:	4288      	cmp	r0, r1
   bc008:	d305      	bcc.n	bc016 <__copybits+0x40>
   bc00a:	bd70      	pop	{r4, r5, r6, pc}
   bc00c:	f853 6b04 	ldr.w	r6, [r3], #4
   bc010:	f845 6f04 	str.w	r6, [r5, #4]!
   bc014:	e7eb      	b.n	bbfee <__copybits+0x18>
   bc016:	f840 3b04 	str.w	r3, [r0], #4
   bc01a:	e7f4      	b.n	bc006 <__copybits+0x30>

000bc01c <__any_on>:
   bc01c:	f100 0214 	add.w	r2, r0, #20
   bc020:	6900      	ldr	r0, [r0, #16]
   bc022:	114b      	asrs	r3, r1, #5
   bc024:	4298      	cmp	r0, r3
   bc026:	b510      	push	{r4, lr}
   bc028:	db11      	blt.n	bc04e <__any_on+0x32>
   bc02a:	dd0a      	ble.n	bc042 <__any_on+0x26>
   bc02c:	f011 011f 	ands.w	r1, r1, #31
   bc030:	d007      	beq.n	bc042 <__any_on+0x26>
   bc032:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bc036:	fa24 f001 	lsr.w	r0, r4, r1
   bc03a:	fa00 f101 	lsl.w	r1, r0, r1
   bc03e:	428c      	cmp	r4, r1
   bc040:	d10b      	bne.n	bc05a <__any_on+0x3e>
   bc042:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bc046:	4293      	cmp	r3, r2
   bc048:	d803      	bhi.n	bc052 <__any_on+0x36>
   bc04a:	2000      	movs	r0, #0
   bc04c:	bd10      	pop	{r4, pc}
   bc04e:	4603      	mov	r3, r0
   bc050:	e7f7      	b.n	bc042 <__any_on+0x26>
   bc052:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bc056:	2900      	cmp	r1, #0
   bc058:	d0f5      	beq.n	bc046 <__any_on+0x2a>
   bc05a:	2001      	movs	r0, #1
   bc05c:	e7f6      	b.n	bc04c <__any_on+0x30>

000bc05e <_calloc_r>:
   bc05e:	b513      	push	{r0, r1, r4, lr}
   bc060:	434a      	muls	r2, r1
   bc062:	4611      	mov	r1, r2
   bc064:	9201      	str	r2, [sp, #4]
   bc066:	f7fa fc59 	bl	b691c <_malloc_r>
   bc06a:	4604      	mov	r4, r0
   bc06c:	b118      	cbz	r0, bc076 <_calloc_r+0x18>
   bc06e:	9a01      	ldr	r2, [sp, #4]
   bc070:	2100      	movs	r1, #0
   bc072:	f7fe f882 	bl	ba17a <memset>
   bc076:	4620      	mov	r0, r4
   bc078:	b002      	add	sp, #8
   bc07a:	bd10      	pop	{r4, pc}

000bc07c <__ascii_wctomb>:
   bc07c:	b149      	cbz	r1, bc092 <__ascii_wctomb+0x16>
   bc07e:	2aff      	cmp	r2, #255	; 0xff
   bc080:	bf85      	ittet	hi
   bc082:	238a      	movhi	r3, #138	; 0x8a
   bc084:	6003      	strhi	r3, [r0, #0]
   bc086:	700a      	strbls	r2, [r1, #0]
   bc088:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bc08c:	bf98      	it	ls
   bc08e:	2001      	movls	r0, #1
   bc090:	4770      	bx	lr
   bc092:	4608      	mov	r0, r1
   bc094:	4770      	bx	lr
	...

000bc098 <__aeabi_d2lz>:
   bc098:	b538      	push	{r3, r4, r5, lr}
   bc09a:	2200      	movs	r2, #0
   bc09c:	2300      	movs	r3, #0
   bc09e:	4604      	mov	r4, r0
   bc0a0:	460d      	mov	r5, r1
   bc0a2:	f7fd fc69 	bl	b9978 <__aeabi_dcmplt>
   bc0a6:	b928      	cbnz	r0, bc0b4 <__aeabi_d2lz+0x1c>
   bc0a8:	4620      	mov	r0, r4
   bc0aa:	4629      	mov	r1, r5
   bc0ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc0b0:	f7fd be96 	b.w	b9de0 <__aeabi_d2ulz>
   bc0b4:	4620      	mov	r0, r4
   bc0b6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bc0ba:	f7fd fe91 	bl	b9de0 <__aeabi_d2ulz>
   bc0be:	4240      	negs	r0, r0
   bc0c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc0c4:	bd38      	pop	{r3, r4, r5, pc}
   bc0c6:	bf00      	nop

000bc0c8 <dynalib_user>:
   bc0c8:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc0d8:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bc0e8:	7620 7269 7574 6c61 5300 6e65 6f73 2072      virtual.Sensor 
   bc0f8:	6572 6461 2e79 5300 6e65 6f73 2072 5245     ready..Sensor ER
   bc108:	4f52 2152 4300 6e6f 656e 7463 6e69 2067     ROR!.Connecting 
   bc118:	6f74 4d20 5451 2e54 2e2e 0020 6552 7274     to MQTT... .Retr
   bc128:	6979 676e 4d20 5451 2054 6f63 6e6e 6365     ying MQTT connec
   bc138:	6974 6e6f 6920 206e 2035 6573 6f63 646e     tion in 5 second
   bc148:	2e73 2e2e 4d00 5451 2054 6f43 6e6e 6365     s....MQTT Connec
   bc158:	6574 2164 4300 6e6f 6563 746e 6172 6974     ted!.Concentrati
   bc168:	6e6f 3d20 2520 2066 6370 2f73 2e30 3130     on = %f pcs/0.01
   bc178:	6663 4800 6769 2068 6f70 6c6c 7475 6f69     cf.High pollutio
   bc188:	216e 4620 726f 6563 7320 6769 616e 206c     n! Force signal 
   bc198:	6361 6974 6576 002e 6948 6867 7020 6c6f     active..High pol
   bc1a8:	756c 6974 6e6f 0021 6f4c 2077 6f70 6c6c     lution!.Low poll
   bc1b8:	7475 6f69 216e 4600 6572 6873 6120 7269     ution!.Fresh air
   bc1c8:	002e 6f53 6c69 203a 6925 540a 6d65 3a70     ..Soil: %i.Temp:
   bc1d8:	2520 322e 2566 0a63 7250 7365 7573 6572      %.2f%c.Pressure
   bc1e8:	203a 2e25 6632 480a 6d75 6469 7469 3a79     : %.2f.Humidity:
   bc1f8:	2520 322e 2566 0a63 6941 2072 7551 6c61      %.2f%c.Air Qual
   bc208:	7469 3a79 2520 0a69 7544 7473 203a 2e25     ity: %i.Dust: %.
   bc218:	6632 000a 6950 676e 6e69 2067 514d 5454     2f..Pinging MQTT
   bc228:	0a20 4400 7369 6f63 6e6e 6365 6974 676e      ..Disconnecting
   bc238:	0a20 5300 696f 206c 6552 6461 203a 6925      ..Soil Read: %i
   bc248:	5420 6d65 3a70 2520 2066 7250 7365 7573      Temp: %f Pressu
   bc258:	6572 203a 6625 4820 6d75 6469 7469 2079     re: %f Humidity 
   bc268:	6625 4120 7269 5120 6175 696c 7974 203a     %f Air Quality: 
   bc278:	6925 4420 7375 3a74 2520 0a66 5300 6f74     %i Dust: %f..Sto
   bc288:	2070 6157 6574 6972 676e 7020 616c 746e     p Watering plant
   bc298:	000a 424a 616c 6b63 6f49 0054 6f69 612e     ..JBlackIoT.io.a
   bc2a8:	6164 7266 6975 2e74 6f63 006d 6961 5f6f     dafruit.com.aio_
   bc2b8:	6168 4371 3739 5952 5444 7738 7934 6c6c     haqC97RYDT8w4yll
   bc2c8:	4769 306d 4f5a 316a 5342 5931 4a00 6c42     iGm0ZOj1BS1Y.JBl
   bc2d8:	6361 496b 546f 662f 6565 7364 622f 7475     ackIoT/feeds/but
   bc2e8:	6f74 4f6e 4f6e 6666 4a00 6c42 6361 496b     tonOnOff.JBlackI
   bc2f8:	546f 662f 6565 7364 6d2f 696f 7473 7275     oT/feeds/moistur
   bc308:	6c65 7665 6c65 4a00 6c42 6361 496b 546f     elevel.JBlackIoT
   bc318:	662f 6565 7364 742f 6d65 6570 6172 7574     /feeds/temperatu
   bc328:	6572 4a00 6c42 6361 496b 546f 662f 6565     re.JBlackIoT/fee
   bc338:	7364 702f 6572 7373 7275 0065 424a 616c     ds/pressure.JBla
   bc348:	6b63 6f49 2f54 6566 6465 2f73 7568 696d     ckIoT/feeds/humi
   bc358:	6964 7974 4a00 6c42 6361 496b 546f 662f     dity.JBlackIoT/f
   bc368:	6565 7364 612f 7269 712d 6175 696c 7974     eeds/air-quality
   bc378:	732d 6e65 6f73 0072 424a 616c 6b63 6f49     -sensor.JBlackIo
   bc388:	2f54 6566 6465 2f73 7564 7473 6573 736e     T/feeds/dustsens
   bc398:	726f 6400 6665 7561 746c 0020 534d 0042     or.default .MSB.
   bc3a8:	534c 0042 533c 4950 6553 7474 6e69 7367     LSB.<SPISettings
   bc3b8:	6420 6665 7561 746c 003e 533c 4950 6553      default>.<SPISe
   bc3c8:	7474 6e69 7367 2520 2573 2075 7325 4d20     ttings %s%u %s M
   bc3d8:	444f 2545 3e75 0000                         ODE%u>..

000bc3e0 <_ZTVN8particle11SPISettingsE>:
	...
   bc3e8:	480d 000b 47fd 000b 47ff 000b 7244 706f     .H...G...G..Drop
   bc3f8:	6570 2064 2061 6170 6b63 7465 5500 6b6e     ped a packet.Unk
   bc408:	6f6e 6e77 6520 7272 726f 4d00 5451 0054     nown error.MQTT.
   bc418:	2525 6425 252e 6664 4600 6961 656c 2064     %%%d.%df.Failed 
   bc428:	6f74 7320 6275 6373 6972 6562 4300 6e6f     to subscribe.Con
   bc438:	656e 7463 6f69 206e 6166 6c69 6465 5400     nection failed.T
   bc448:	6568 5320 7265 6576 2072 6f64 7365 6e20     he Server does n
   bc458:	746f 7320 7075 6f70 7472 7420 6568 6c20     ot support the l
   bc468:	7665 6c65 6f20 2066 6874 2065 514d 5454     evel of the MQTT
   bc478:	7020 6f72 6f74 6f63 206c 6572 7571 7365      protocol reques
   bc488:	6574 0064 6854 2065 6c43 6569 746e 6920     ted.The Client i
   bc498:	6564 746e 6669 6569 2072 7369 6320 726f     dentifier is cor
   bc4a8:	6572 7463 5520 4654 382d 6220 7475 6e20     rect UTF-8 but n
   bc4b8:	746f 6120 6c6c 776f 6465 6220 2079 6874     ot allowed by th
   bc4c8:	2065 6553 7672 7265 5400 6568 4d20 5451     e Server.The MQT
   bc4d8:	2054 6573 7672 6369 2065 7369 7520 616e     T service is una
   bc4e8:	6176 6c69 6261 656c 5400 6568 6420 7461     vailable.The dat
   bc4f8:	2061 6e69 7420 6568 7520 6573 2072 616e     a in the user na
   bc508:	656d 6f20 2072 6170 7373 6f77 6472 6920     me or password i
   bc518:	2073 616d 666c 726f 656d 0064 6f4e 2074     s malformed.Not 
   bc528:	7561 6874 726f 7a69 6465 7420 206f 6f63     authorized to co
   bc538:	6e6e 6365 0074 7845 6563 6465 6465 7220     nnect.Exceeded r
   bc548:	6365 6e6f 656e 7463 7220 7461 2065 696c     econnect rate li
   bc558:	696d 2e74 5020 656c 7361 2065 7274 2079     mit. Please try 
   bc568:	6761 6961 206e 616c 6574 2e72 5900 756f     again later..You
   bc578:	6820 7661 2065 6562 6e65 6220 6e61 656e      have been banne
   bc588:	2064 7266 6d6f 6320 6e6f 656e 7463 6e69     d from connectin
   bc598:	2e67 5020 656c 7361 2065 6f63 746e 6361     g. Please contac
   bc5a8:	2074 6874 2065 514d 5454 7320 7265 6576     t the MQTT serve
   bc5b8:	2072 6461 696d 696e 7473 6172 6f74 2072     r administrator 
   bc5c8:	6f66 2072 6f6d 6572 6420 7465 6961 736c     for more details
   bc5d8:	002e 0000                                   ....

000bc5dc <_ZTV13Adafruit_MQTT>:
	...
   bc5ec:	40a5 000b 40a5 000b 40a5 000b 40a5 000b     .@...@...@...@..
   bc5fc:	40a5 000b                                   .@..

000bc600 <CSWTCH.45>:
   bc600:	c421 000b c435 000b c405 000b c447 000b     !...5.......G...
   bc610:	c48c 000b c4d1 000b c4f1 000b c524 000b     ............$...
   bc620:	c53e 000b c575 000b                         >...u...

000bc628 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   bc630:	577f 000b 580b 000b 572b 000b 57d9 000b     .W...X..+W...W..
   bc640:	5819 000b 573f 000b 5781 000b               .X..?W...W..

000bc64c <_ZL4font>:
   bc64c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bc65c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bc66c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bc67c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bc68c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bc69c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bc6ac:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bc6bc:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bc6cc:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bc6dc:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bc6ec:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bc6fc:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bc70c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bc71c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bc72c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bc73c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bc74c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bc75c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bc76c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bc77c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bc78c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bc79c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bc7ac:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bc7bc:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bc7cc:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bc7dc:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bc7ec:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bc7fc:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bc80c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bc81c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bc82c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bc83c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bc84c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bc85c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bc86c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bc87c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bc88c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bc89c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bc8ac:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bc8bc:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bc8cc:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bc8dc:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   bc8ec:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bc8fc:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bc90c:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   bc91c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bc92c:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   bc93c:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   bc94c:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   bc95c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bc96c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bc97c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bc98c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bc99c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bc9ac:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bc9bc:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   bc9cc:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   bc9dc:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   bc9ec:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   bc9fc:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   bca0c:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   bca1c:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   bca2c:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   bca3c:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   bca4c:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   bca5c:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   bca6c:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   bca7c:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   bca8c:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   bca9c:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   bcaac:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   bcabc:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   bcacc:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   bcadc:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   bcaec:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   bcafc:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   bcb0c:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   bcb1c:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   bcb2c:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   bcb3c:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000bcb48 <_ZTV12Adafruit_GFX>:
	...
   bcb58:	5b61 000b 6d95 000b 40a5 000b 5879 000b     a[...m...@..yX..
   bcb68:	599f 000b 59bb 000b 5937 000b 59d5 000b     .Y...Y..7Y...Y..
   bcb78:	5a0b 000b 5a27 000b                         .Z..'Z..

000bcb80 <_ZTV16Adafruit_SSD1306>:
	...
   bcb88:	5eed 000b 5f7d 000b 5b61 000b 6d95 000b     .^..}_..a[...m..
   bcb98:	5ef1 000b 5879 000b 5d79 000b 5c09 000b     .^..yX..y]...\..
   bcba8:	5937 000b 59d5 000b 5a0b 000b 5a27 000b     7Y...Y...Z..'Z..

000bcbb8 <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   bcbb8:	0000 0000                                   ....

000bcbbc <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   bcbbc:	0002 0000                                   ....

000bcbc0 <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   bcbc0:	0001 0000                                   ....

000bcbc4 <_ZN16AirQualitySensor9FRESH_AIRE>:
   bcbc4:	0003 0000                                   ....

000bcbc8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bcbd0 <_ZTVN5spark13EthernetClassE>:
	...
   bcbd8:	69d3 000b 69c9 000b 69bf 000b 69b5 000b     .i...i...i...i..
   bcbe8:	69a9 000b 699d 000b 6c71 000b 6c79 000b     .i...i..ql..yl..
   bcbf8:	6991 000b 6989 000b 697f 000b 6975 000b     .i...i...i..ui..
   bcc08:	6ca9 000b                                   .l..

000bcc0c <_ZTV7TwoWire>:
	...
   bcc14:	69f1 000b 6a3b 000b 6a13 000b 69f3 000b     .i..;j...j...i..
   bcc24:	6a1b 000b 6a23 000b 6a2b 000b 6a33 000b     .j..#j..+j..3j..

000bcc34 <_ZTV9IPAddress>:
	...
   bcc3c:	6b15 000b 6b05 000b 6b07 000b 7061 0070     .k...k...k..app.

000bcc4c <_ZTVN5spark12NetworkClassE>:
	...
   bcc54:	6c31 000b 6c3b 000b 6c45 000b 6c4f 000b     1l..;l..El..Ol..
   bcc64:	6c59 000b 6c65 000b 6c71 000b 6c79 000b     Yl..el..ql..yl..
   bcc74:	6c81 000b 6c8d 000b 6c95 000b 6c9f 000b     .l...l...l...l..
   bcc84:	6ca9 000b                                   .l..

000bcc88 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bcc88:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   bcc98:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000bcca8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bccb0:	71d5 000b 71f9 000b 772b 000b 7207 000b     .q...q..+w...r..
   bccc0:	71d9 000b                                   .q..

000bccc4 <_ZTV9TCPClient>:
	...
   bcccc:	7285 000b 72b9 000b 7151 000b 716b 000b     .r...r..Qq..kq..
   bccdc:	75c1 000b 7195 000b 7437 000b 71c9 000b     .u...q..7t...q..
   bccec:	74c9 000b 7309 000b 7465 000b 7675 000b     .t...s..et..uv..
   bccfc:	7405 000b 71cb 000b 717d 000b 720d 000b     .t...q..}q...r..
   bcd0c:	72e9 000b 5925 252d 2d6d 6425 2554 3a48     .r..%Y-%m-%dT%H:
   bcd1c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bcd2c <_ZTV11USARTSerial>:
	...
   bcd34:	7745 000b 77b1 000b 7789 000b 6d95 000b     Ew...w...w...m..
   bcd44:	7759 000b 7775 000b 7767 000b 7783 000b     Yw..uw..gw...w..
   bcd54:	7747 000b 774b 000b                         Gw..Kw..

000bcd5c <_ZTV9USBSerial>:
	...
   bcd64:	77ef 000b 7857 000b 782d 000b 6d95 000b     .w..Wx..-x...m..
   bcd74:	781f 000b 77f1 000b 7801 000b 7851 000b     .x...w...x..Qx..
   bcd84:	7811 000b 77e9 000b                         .x...w..

000bcd8c <_ZTVN5spark9WiFiClassE>:
	...
   bcd94:	794f 000b 7945 000b 793b 000b 78f1 000b     Oy..Ey..;y...x..
   bcda4:	792f 000b 7923 000b 6c71 000b 6c79 000b     /y..#y..ql..yl..
   bcdb4:	7917 000b 790f 000b 7905 000b 78fb 000b     .y...y...y...x..
   bcdc4:	6ca9 000b                                   .l..

000bcdc8 <_ZSt7nothrow>:
	...

000bcdc9 <_ZTSSt19_Sp_make_shared_tag>:
   bcdc9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bcdd9:	6572 5f64 6174 0067 0000                     red_tag....

000bcde4 <_ZTISt19_Sp_make_shared_tag>:
   bcde4:	ce24 000b cdc9 000b                         $.......

000bcdec <_ZTIN10__cxxabiv117__class_type_infoE>:
   bcdec:	ce84 000b cdf8 000b cea8 000b               ............

000bcdf8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bcdf8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bce08:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bce18:	0045 0000                                   E...

000bce1c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bce1c:	0000 0000 cdec 000b 7e35 000b 7e49 000b     ........5~..I~..
   bce2c:	7fdd 000b 7fdd 000b 7eb3 000b 7df5 000b     .........~...}..
   bce3c:	7e9b 000b 7e5d 000b 7e27 000b               .~..]~..'~..

000bce48 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bce48:	ce84 000b ce54 000b cdec 000b               ....T.......

000bce54 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bce54:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bce64:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bce74:	666e 456f 0000 0000                         nfoE....

000bce7c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bce7c:	0000 0000 ce48 000b 7edd 000b 7ef1 000b     ....H....~...~..
   bce8c:	7fdd 000b 7fdd 000b 7eb3 000b 7df5 000b     .........~...}..
   bce9c:	7fb1 000b 7f3d 000b 7f05 000b               ....=.......

000bcea8 <_ZTISt9type_info>:
   bcea8:	ce24 000b ceb0 000b                         $.......

000bceb0 <_ZTSSt9type_info>:
   bceb0:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
	...

000bcec8 <TWO52>:
   bcec8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   bced8:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   bcee8:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   bcef8:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   bcf08:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   bcf18:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   bcf28:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   bcf38:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.
   bcf48:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000bcf54 <fpi.1>:
   bcf54:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bcf64:	0000 0000                                   ....

000bcf68 <fpinan.0>:
   bcf68:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bcf80 <tinytens>:
   bcf80:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bcf90:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bcfa0:	6f43 64ac 0628 1168                         Co.d(.h.

000bcfa8 <_ctype_>:
   bcfa8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bcfb8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bcfc8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bcfd8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bcfe8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bcff8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd008:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd018:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd028:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bd0a8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bd0b8:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bd0c8:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bd0d8:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bd0e8:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bd0f8:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bd108:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bd118:	632e 0000                                   .c..

000bd11c <_C_numeric_locale>:
   bd11c:	c14b 000b c22a 000b e318 2003 0043 4f50     K...*...... C.PO
   bd12c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bd13c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bd14c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bd15c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bd16c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bd17c:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bd18c:	0000 0000                                   ....

000bd190 <__mprec_bigtens>:
   bd190:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bd1a0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bd1b0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bd1b8 <__mprec_tens>:
   bd1b8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bd1c8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bd1d8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bd1e8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bd1f8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bd208:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bd218:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bd228:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bd238:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bd248:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bd258:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bd268:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bd278:	9db4 79d9 7843 44ea                         ...yCx.D

000bd280 <p05.0>:
   bd280:	0005 0000 0019 0000 007d 0000               ........}...

000bd28c <link_const_variable_data_end>:
   bd28c:	000b4709 	.word	0x000b4709
   bd290:	000b6965 	.word	0x000b6965
   bd294:	000b69dd 	.word	0x000b69dd
   bd298:	000b6c21 	.word	0x000b6c21
   bd29c:	000b6d81 	.word	0x000b6d81
   bd2a0:	000b6ebd 	.word	0x000b6ebd
   bd2a4:	000b712d 	.word	0x000b712d
   bd2a8:	000b7731 	.word	0x000b7731
   bd2ac:	000b7959 	.word	0x000b7959
